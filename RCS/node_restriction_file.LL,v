head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2001.12.14.18.27.19;	author kenneth;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.23.17.07.34;	author kenneth;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.12.21.41.53;	author kenneth;	state Exp;
branches;
next	;


desc
@node restriction for LoadL
@


1.3
log
@changed to ConfiguredClasses_list
@
text
@# Restrict nodes to those with ConfiguredClasses normal  and Max_Starters > 0
# If node does not have normal class or has Max_Starters == 0, reject

resource = input_tuple[0]

if resource['State'] == 'Down' :
    result = 'Down'
elif resource['State'] == 'Drain' :
    result = 'Drain'
elif resource['State'] == 'Drained' :
    result = 'Drained'
elif resource['State'] == 'None' :
    result = 'None'
elif resource['State'] == None :
    result = None
elif resource['State'] == 'Unknown' :
    result = 'Unknown'
elif resource['Max_Starters'] == 0 :
    result = 'Max_Starters=0'
elif not DEFAULT_JOB_CLASS in resource['ConfiguredClasses_list'] :
    result = 'noNormal'
else :
    result = 0
@


1.2
log
@changed from regex to re
@
text
@a2 2
import re
import string
a5 5
pattName = re.compile('.*normal')

#print "in node_restriction_file, %s has state %s" % (resource['name'], resource['State'])


d20 1
a20 1
elif pattName.match(resource['ConfiguredClasses']) == None :
a23 1

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
import regex
d8 1
a8 1
pattName = regex.compile('.*normal')
d27 1
a27 1
elif pattName.match(resource['ConfiguredClasses']) == -1 :
@
