head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2002.02.27.23.32.48;	author kenneth;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.22.19.38.11;	author kenneth;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.22.17.15.28;	author kenneth;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.18.19.38.26;	author kenneth;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.27.00.15.46;	author kenneth;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.06.23.07.12;	author kenneth;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.31.23.02.58;	author kenneth;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.31.21.48.39;	author kenneth;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.25.17.42.04;	author kenneth;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.13.17.52.48;	author kenneth;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.13.17.46.40;	author kenneth;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.12.22.03.22;	author kenneth;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.12.21.01.17;	author kenneth;	state Exp;
branches;
next	;


desc
@job scheduling loop
@


1.13
log
@moved db closing
@
text
@#!___PYTHON_PATH_PLACEHOLDER___
# script to update the resource database

import Catalina
import time
import sys
import os
import getopt
import socket
import traceback
import string
import types

RESOURCES_DB = 'resource'
JOBS_DB = 'jobs'
RESERVATIONS_DB = 'reservations'
OLD_JOBS_DB = 'old_jobs'
OLD_RESERVATIONS_DB = 'old_reservations'
STANDING_RESERVATIONS_DB = 'standing_reservations'
CONFIGURED_RESOURCES_DB = 'configured_resources'
CONFIGURATION_DB = 'configuration'
EVENTS_DB = 'events'

options = [
  'debugjob=',
  'iterate',
  'startcount=',
  'endcount='
]

def instance_remove(configuration_db_handle) :
    if configuration_dict.has_key('server_hosts_pidslist_dict') :
        temp_dict = Catalina.get_object('server_hosts_pidslist_dict',
          configuration_db_handle)
        Catalina.delete_object('server_hosts_pidslist_dict',
          configuration_db_handle)
    else :
        temp_dict = {}
    my_hostname = socket.gethostname()
    my_pid = os.getpid()
    if temp_dict.has_key(my_hostname) :
        temp_pidslist = filter(lambda pid, my_pid=my_pid : pid != my_pid,
          temp_dict[my_hostname])
        if len(temp_pidslist) > 0 :
            temp_dict[my_hostname] = temp_pidslist
        else :
            del temp_dict[my_hostname]
        print "temp_pidslist (%s)" % temp_pidslist
    Catalina.insert_new_object_with_key('server_hosts_pidslist_dict',
      temp_dict, configuration_db_handle)
    Catalina.close_db(configuration_db_handle)

args = sys.argv[1:]
argdict = {}
optlist, lineargs = getopt.getopt(args, '', options)
for pair in optlist:
    argdict[pair[0]] = pair[1]
if argdict.has_key('--startcount') :
    startcount = string.atoi(argdict['--startcount'])
else :
    startcount = 0
if argdict.has_key('--endcount') :
    endcount = string.atoi(argdict['--endcount'])
elif not argdict.has_key('--iterate') :
    endcount = startcount
if argdict.has_key('--debugjob') :
    Catalina.DEBUGJOB = argdict['--debugjob']

start_time = time.clock()
state = 'running'
count = startcount
failed_count = 0
while ( (state == 'running' or state == 'suspended') and
  (argdict.has_key('--iterate') or count <= endcount) ) :
    try :
        Catalina.Now_float = time.time()
        print "iteration (%s)" % count
        print "Catalina.Now_float (%s)" % time.asctime(time.gmtime(Catalina.Now_float))
        print "%s" % time.clock()
        configuration_db_handle = Catalina.open_db(CONFIGURATION_DB,'write')
        configuration_dict = configuration_db_handle[0]
        if configuration_dict.has_key('state') :
            if configuration_dict['state'] == 'stopped' :
                print "Scheduler has state 'stopped'.  Exiting..."
                instance_remove(configuration_db_handle)
                state = 'stopped'
                raise 'SchedulerStopped'
            elif configuration_dict['state'] == 'suspended' :
                print "Scheduler has state 'suspended'.  Sleeping..."
                time.sleep(30)
                Catalina.close_db(configuration_db_handle)
                state = 'suspended'
                raise 'SchedulerSuspended'
            elif configuration_dict['state'] == 'running' :
		state = 'running'
                if configuration_dict.has_key('server_hosts_pidslist_dict') :
                    temp_dict = Catalina.get_object(
                      'server_hosts_pidslist_dict', configuration_db_handle)
                    Catalina.delete_object('server_hosts_pidslist_dict',
                      configuration_db_handle)
                else :
                    temp_dict = {}
                my_hostname = socket.gethostname()
                my_pid = os.getpid()
                if temp_dict.has_key(my_hostname) :
                    temp_dict[my_hostname].append(my_pid)
                else :
                    temp_dict[my_hostname] = [my_pid,]
                print "temp_dict[my_hostname] (%s)" % temp_dict[my_hostname]
                Catalina.insert_new_object_with_key('server_hosts_pidslist_dict', temp_dict, configuration_db_handle)
            else :
                print "Scheduler has unknown state. Exiting..."
                instance_remove(configuration_db_handle)
                state = 'stopped'
                sys.exit(1)
        Catalina.close_db(configuration_db_handle)
        cfg_resources_db_handle = Catalina.open_db(CONFIGURED_RESOURCES_DB,'write')
        events_db_handle = Catalina.open_db(EVENTS_DB,'write')
        jobs_db_handle = Catalina.open_db(JOBS_DB,'write')
        old_jobs_db_handle = Catalina.open_db(OLD_JOBS_DB,'write')
        old_reservations_db_handle = Catalina.open_db(OLD_RESERVATIONS_DB,'write')
        reservations_db_handle = Catalina.open_db(RESERVATIONS_DB,'write')
        resources_db_handle = Catalina.open_db(RESOURCES_DB,'write')
        standing_reservations_db_handle = Catalina.open_db(STANDING_RESERVATIONS_DB,'read')
        #print "updating standing reservations"
        #Catalina.update_standing_reservations(
        #  events_db_handle=events_db_handle,
        #  jobs_db_handle=jobs_db_handle,
        #  resources_db_handle=resources_db_handle,
        #  reservations_db_handle=reservations_db_handle,
        #  standing_reservations_db_handle=standing_reservations_db_handle)
        if count % 10 == 0 :
            print "reloading job resource lists"
            Catalina.reload_job_resource_lists(events_db_handle, jobs_db_handle, resources_db_handle)
            print "moving old jobs"
            Catalina.move_old_jobs(events_db_handle, jobs_db_handle, old_jobs_db_handle)
            print "moving old reservations"
            Catalina.move_old_reservations(events_db_handle, reservations_db_handle, old_reservations_db_handle)
            print "rolling logs"
            Catalina.roll_logs(events_db_handle, old_jobs_db_handle, old_reservations_db_handle)
        Catalina.schedule_jobs(events_db_handle, jobs_db_handle, resources_db_handle, reservations_db_handle, cfg_resources_db_handle, standing_reservations_db_handle )
        Catalina.close_db(standing_reservations_db_handle)
        Catalina.close_db(resources_db_handle)
        Catalina.close_db(reservations_db_handle)
        Catalina.close_db(old_reservations_db_handle)
        Catalina.close_db(old_jobs_db_handle)
        Catalina.close_db(jobs_db_handle)
        Catalina.close_db(events_db_handle)
        Catalina.close_db(cfg_resources_db_handle)
        failed_count = 0
        count = count + 1
        print "elapsed (%s)" % (time.time() - Catalina.Now_float,)
        time.sleep(1)
    except 'SchedulerSuspended' :
        print "Scheduler suspended"
    except 'SchedulerStopped' :
        print "Scheduler stopped"
    except :
        failed_count = failed_count + 1
        try :
            info_tuple = sys.exc_info()
            print "(%s) (%s) (%s)" % info_tuple
            info_list = ["%s" % info_tuple[0], "%s" % info_tuple[1], '\n']
            traceback.print_tb(info_tuple[2])
            tb_list = traceback.format_tb(info_tuple[2])
            info_list = info_list + tb_list
            tb_text = string.join(info_list)
            message = tb_text
            subject = 'Catalina failure'
            recipient = Catalina.MAIL_RECIPIENT
            print "message (%s)" % message
            print "subject (%s)" % subject
            print "recipient (%s)" % recipient
            if failed_count == 1 :
                Catalina.warn(message, subject, recipient)
        except :
            print "print of sys.exc_info() failed"
        print "iteration %s failed" % count
        Catalina.close_db(standing_reservations_db_handle)
        Catalina.close_db(resources_db_handle)
        Catalina.close_db(reservations_db_handle)
        Catalina.close_db(old_reservations_db_handle)
        Catalina.close_db(old_jobs_db_handle)
        Catalina.close_db(jobs_db_handle)
        Catalina.close_db(events_db_handle)
        Catalina.close_db(cfg_resources_db_handle)
    else :
        configuration_db_handle = Catalina.open_db(CONFIGURATION_DB,'write')
        instance_remove(configuration_db_handle)
@


1.12
log
@*** empty log message ***
@
text
@a158 8
        Catalina.close_db(standing_reservations_db_handle)
        Catalina.close_db(resources_db_handle)
        Catalina.close_db(reservations_db_handle)
        Catalina.close_db(old_reservations_db_handle)
        Catalina.close_db(old_jobs_db_handle)
        Catalina.close_db(jobs_db_handle)
        Catalina.close_db(events_db_handle)
        Catalina.close_db(cfg_resources_db_handle)
d179 8
@


1.11
log
@close dbs if exception raised
@
text
@a155 8
        Catalina.close_db(standing_reservations_db_handle)
        Catalina.close_db(resources_db_handle)
        Catalina.close_db(reservations_db_handle)
        Catalina.close_db(old_reservations_db_handle)
        Catalina.close_db(old_jobs_db_handle)
        Catalina.close_db(jobs_db_handle)
        Catalina.close_db(events_db_handle)
        Catalina.close_db(cfg_resources_db_handle)
a157 8
        Catalina.close_db(standing_reservations_db_handle)
        Catalina.close_db(resources_db_handle)
        Catalina.close_db(reservations_db_handle)
        Catalina.close_db(old_reservations_db_handle)
        Catalina.close_db(old_jobs_db_handle)
        Catalina.close_db(jobs_db_handle)
        Catalina.close_db(events_db_handle)
        Catalina.close_db(cfg_resources_db_handle)
@


1.10
log
@update standing reservations every iteration
@
text
@d156 8
d166 8
d175 8
@


1.9
log
@only warn at first failure, don't warn if shutdown
@
text
@d125 7
a134 7
            print "updating standing reservations"
            Catalina.update_standing_reservations(
              events_db_handle=events_db_handle,
              jobs_db_handle=jobs_db_handle,
              resources_db_handle=resources_db_handle,
              reservations_db_handle=reservations_db_handle,
              standing_reservations_db_handle=standing_reservations_db_handle)
d141 1
a141 1
        Catalina.schedule_jobs(events_db_handle, jobs_db_handle, resources_db_handle, reservations_db_handle, cfg_resources_db_handle )
@


1.8
log
@remove empty hosts_pidlists
@
text
@d72 1
d87 1
a87 1
                sys.exit(1)
d150 1
d154 4
d159 1
d174 2
a175 1
            Catalina.warn(message, subject, recipient)
@


1.7
log
@move db opens to fix locking order
@
text
@d10 3
d44 4
a47 1
        temp_dict[my_hostname] = temp_pidslist
d154 14
a167 1
            print "(%s) (%s) (%s)" % sys.exc_info()
@


1.6
log
@put in tracking of hosts and pids for stopping
@
text
@d113 2
d117 1
a118 3
            old_jobs_db_handle = Catalina.open_db(OLD_JOBS_DB,'write')
            old_reservations_db_handle = Catalina.open_db(OLD_RESERVATIONS_DB,'write')
            standing_reservations_db_handle = Catalina.open_db(STANDING_RESERVATIONS_DB,'read')
a133 3
            Catalina.close_db(standing_reservations_db_handle)
            Catalina.close_db(old_reservations_db_handle)
            Catalina.close_db(old_jobs_db_handle)
d135 1
d138 2
@


1.5
log
@Add elapsed time printout
@
text
@d7 1
d9 1
d28 19
d73 1
a73 1
        configuration_db_handle = Catalina.open_ro_db(CONFIGURATION_DB,'read')
d78 1
a78 1
                Catalina.close_ro_db(configuration_db_handle)
d84 1
a84 1
                Catalina.close_ro_db(configuration_db_handle)
d89 21
a109 1
        Catalina.close_ro_db(configuration_db_handle)
d152 3
@


1.4
log
@< to <=
@
text
@d103 1
@


1.3
log
@fixed DEBUGJOB typo
l
@
text
@d46 1
a46 1
  (argdict.has_key('--iterate') or count < endcount) ) :
@


1.2
log
@added --debugjob
@
text
@d40 1
a40 1
    Catalina.DEUBGJOB = argdict['--debugjob']
@


1.1
log
@Initial revision
@
text
@d20 1
d39 2
@
