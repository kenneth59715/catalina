head	1.3;
access;
symbols;
locks
	mmargo:1.3; strict;
comment	@# @;


1.3
date	2006.07.05.21.19.23;	author mmargo;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.03.00.27.08;	author kenneth;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.11.22.28.25;	author kenneth;	state Exp;
branches;
next	;


desc
@run job for LL
@


1.3
log
@only accepts new abbreaviated form for LL, too long
IMPORTANT!!! The new rj_LL doesn't accept the old form
mmargo
@
text
@#include <stdio.h>
#include <string.h>
#include "/usr/lpp/LoadL/full/include/llapi.h"

/*
runjob <fromhost> <cluster> <proc> <abbreviated form>
example, to run tf225i.sdsc.edu.84.0, a 1 node, 8 task_per_node job on tf226i,
runjob tf225i.sdsc.edu 84 0 tf226i#8 tf227i#8 
must be run as a LoadL administrator
*/
int  count_total_task_all(char **, int);
int  count_total_task(char *);
void  parse_all_nodelist(char **, int, char **, int *);
void parse_nodelist( char *, char **, int *);


/*****************
main()
*****************/
int main (int argc, char *argv[]) {
	if (argc < 5 ) 
	{
		printf("Error, no node specified\n");
		exit(-2);
	}
	
	char * current_node;
	LL_get_jobs_info *jobsinfo;
	int rc, argindex, nodelistindex, total_node;
	char **nodelist;
	
	nodelistindex=0;
	LL_start_job_info *startjobinfo;

	startjobinfo = ( LL_start_job_info *)malloc(sizeof(LL_start_job_info));
	jobsinfo = ( LL_get_jobs_info *)malloc(sizeof(LL_get_jobs_info));

	rc = ll_get_jobs(jobsinfo);
	startjobinfo->version_num = jobsinfo->version_num;
	startjobinfo->StepId.from_host = argv[1];
	startjobinfo->StepId.cluster = atoi(argv[2]);
	startjobinfo->StepId.proc = atoi(argv[3]);
	
	total_node = count_total_task_all(argv,argc);
	
	
	//printf("  Total node count : %d\n", total_node);
	
	/* added by mmargo 6/28/2006. Shorthand notation for rj_ll ds100*8 */
	
	/* int pointer */
	int start =  0 ;
	int * start_ptr = &start;
	
	nodelist = (char **)malloc(sizeof(char *) * (total_node + 1));
	
	parse_all_nodelist(argv,argc,nodelist,	start_ptr);
	
	startjobinfo->nodeList = nodelist;

	/* run the job: */

	rc = ll_start_job(startjobinfo);
	printf("rc from ll_start_job is >%d<\n", rc);

	rc = ll_free_jobs(jobsinfo);
	rc = free(startjobinfo);
	
	return 0;
}


/*************************************
parse_all_nodelist()
helper function to parse shorthand version to longhand version 
input
	_argv : arg array from command line
	_argc : the count of command line arg element
	el    : the char * array to hold the entire thing
	start : the int * to hold the location of next available slot in el.
	
output
	el 	  : hold input and also is modified by this function

**************************************/
void parse_all_nodelist(char ** _argv, int _argc, char ** el, int * start) {
	
	int i=0, arg_index=0;
	
	
	for (i= 4; i< _argc; i++) 
	{
	
		parse_nodelist(*(_argv+i), el, start); 
		
		
	}
	
	
}

/*******************************
parse_nodelist()

Helper function to update el char * array. for each abbreviated form, expand it
and store it in el. Keep updating start (the int pointer) because it points to
the next available slot in the char * array.
input 
	input_str = char * to the input string to be processed (e.g. ds333*8)
	el = (input and output) the char * array to be worked on
	start = int * to the next available slot in el.
output (implicit)
	el = modified by the result of the processing
	start = incremented by the result of the processing.
********************************/
void parse_nodelist( char * input_str, char ** el, int * start  )
{
	/* input e.g. ds333#8  */
	/* output e.g. ds333 ds333 ds333 ds333 ds333 ds333 ds333 ds333  */
	
	int node_count = 0, i=0;
	
	const char delimiters[] = "#";
	char  *cp, *nodename;
	
	//copy input string elsewhere first
	cp = strdup(input_str);
	
	//Tokenize for the first time, pass it the copy
	nodename=strtok(cp, delimiters);	//token = ds333
	node_count  = atoi(strtok(NULL, delimiters));
	

	for (i=0;i<node_count;i++) 
	{
		/* allocate enough memory to hold a nodename in el[*start] */
		*(el+((int)*start))=(char *) malloc (strlen(nodename) + sizeof('\0'));
		
		
		
		strcpy(*(el+((int)*start)),nodename);
		printf("adding to nodelist (%s)\n", nodename);
		*start = *start + 1;
		*(el+((int)*start))=NULL;

	}
	free(cp);
	free(nodename);
}

/*************************
* count_total_task_all
* I need this function because C needs to know how much space to allocate
* prior to creating an array of char *. So inconvenient, I wish it is like
* python.
*
* input argv and argc,
* output, the total number of node (I should say task)
*****************************/
int count_total_task_all(char ** _argv, int _argc)
{
	int total_task=0, i=0;
	
	/*****
	The number of abbreviated string starts at argument number 4 (argv[4])
	eg. rj_LL ds355 777 88 0 ds355#10 ds366#2
    *****/
    for (i=4; i < _argc; i++) 
    {
    	total_task += count_total_task( *(_argv+i));
    	
    }
    
	return total_task;
}

/*************************
count_total_task()
A helper function for count_total_task_all. It process individual abbreviated
form of input, while count_total_task_all() process entire string of
rj_LL input

output: the number of task requested
**************************/
int count_total_task( char * input){
	
	int task_ct=0;
	const char delimiters[] = "#";
	char *cp;
	
	cp = strdup(input);
	strtok(cp,delimiters);	//discard this, this is the nodename
	task_ct = atoi(strtok(NULL,delimiters));
	free(cp);

	return task_ct;
}@


1.2
log
@remember started job, report returncode of 0
@
text
@d2 1
d4 1
d6 1
a6 1
runjob <fromhost> <cluster> <proc> <space delimited list of node names, one per task>
d8 1
a8 1
runjob tf225i.sdsc.edu 84 0 tf226i tf226i tf226i tf226i tf226i tf226i tf226i tf226i
d11 5
d17 11
a27 1
main (int argc, char *argv[]) {
d29 1
a29 1
	int rc, argindex, nodelistindex;
d31 2
a32 1

d43 16
a58 9
	nodelist = (char **)malloc(sizeof(char *) * (argc - 4 + 1));
	for ( argindex = 4; argindex < argc ; ++argindex) {
		nodelistindex = argindex - 4;
		nodelist[nodelistindex] = (char *)malloc(strlen(argv[argindex]) + sizeof('\0'));
		strcpy(nodelist[nodelistindex], argv[argindex]);
		printf("adding to nodelist (%s)\n", argv[argindex]);
		nodelist[nodelistindex + 1] = NULL;
	}
		
d60 2
a61 2
	
/* run the job: */
d68 32
d101 97
@


1.1
log
@Initial revision
@
text
@d39 1
a39 3
	if ( rc != 0 ) {
		printf("rc from ll_start_job is >%d<\n", rc);
	}
@
