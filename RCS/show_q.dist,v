head	1.30;
access;
symbols;
locks
	mmargo:1.30; strict;
comment	@# @;


1.30
date	2006.10.12.23.50.56;	author mmargo;	state Exp;
branches;
next	1.29;

1.29
date	2006.10.12.23.09.38;	author mmargo;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.26.20.59.02;	author mmargo;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.22.17.24.16;	author mmargo;	state Exp;
branches;
next	1.26;

1.26
date	2005.04.08.22.43.15;	author kenneth;	state Exp;
branches;
next	1.25;

1.25
date	2005.03.28.20.07.00;	author kenneth;	state Exp;
branches;
next	1.24;

1.24
date	2004.08.11.17.50.26;	author kenneth;	state Exp;
branches;
next	1.23;

1.23
date	2004.05.12.18.26.51;	author kenneth;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.03.06.14.02;	author kenneth;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.19.22.59.18;	author kenneth;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.16.22.35.09;	author kenneth;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.05.17.55.30;	author kenneth;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.26.23.58.53;	author kenneth;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.26.18.08.50;	author kenneth;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.21.04.19.18;	author kenneth;	state Exp;
branches;
next	1.15;

1.15
date	2002.12.17.00.44.59;	author kenneth;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.07.19.41.15;	author kenneth;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.03.00.28.07;	author kenneth;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.14.18.29.41;	author kenneth;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.27.00.31.31;	author kenneth;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.27.00.22.13;	author kenneth;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.31.18.34.20;	author kenneth;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.18.18.04.29;	author kenneth;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.20.16.04.44;	author kenneth;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.17.16.49.19;	author kenneth;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.14.19.52.08;	author kenneth;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.13.00.48.58;	author kenneth;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.13.00.34.24;	author kenneth;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.12.21.15.43;	author kenneth;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.12.20.40.00;	author kenneth;	state Exp;
branches;
next	;


desc
@show jobs in queue
@


1.30
log
@import pwd. i missed it
mmargo
@
text
@#!___PYTHON_PATH_PLACEHOLDER___
# get existing jobs
# separate Running and starting from Idle jobs by 'state' attribute
# find idle ineligible jobs, by the 'ineligible_reason' attribute
# canceled or completed jobs should be screened out at the state step

import sys
sys.path.append('___HOMEDIR_PLACEHOLDER___')
import Catalina
import time
import string
import getopt
import os
import pwd

JOBS_DB = Catalina.JOBS_DB
RESERVATIONS_DB = Catalina.RESERVATIONS_DB
RESOURCE_DB = Catalina.RESOURCE_DB
CONFIGURATION_DB = Catalina.CONFIGURATION_DB

def by_remaining(first, second) :
    if first.has_key('run_at_risk_int') and first['run_at_risk_int'] >= 1 :
        first_end = Catalina.Now_float + Catalina.RUN_AT_RISK_CLEANUP_TIME
    else :
        first_end = first['Dispatch_Time'] + first['wall_clock_limit']
    if second.has_key('run_at_risk_int') and second['run_at_risk_int'] >= 1 :
        second_end = Catalina.Now_float + Catalina.RUN_AT_RISK_CLEANUP_TIME
    else :
        second_end = second['Dispatch_Time'] + second['wall_clock_limit']
    if first_end < second_end :
        return -1
    if first_end == second_end :
        return 0
    if first_end > second_end :
        return 1

def by_wall(first, second) :
    if first['wall_clock_limit'] > second['wall_clock_limit'] :
        return -1
    if first['wall_clock_limit'] == second['wall_clock_limit'] :
        return 0
    if first['wall_clock_limit'] < second['wall_clock_limit'] :
        return 1

def by_Dispatch_Time(first, second) :
    if first['Dispatch_Time'] < second['Dispatch_Time'] :
        return -1
    if first['Dispatch_Time'] == second['Dispatch_Time'] :
        return 0
    if first['Dispatch_Time'] > second['Dispatch_Time'] :
        return 1

def by_resource(first, second) :
    if len(string.split(first['initiatormap'], '+')) > len(string.split(second['initiatormap'], '+')) :
        return -1
    if len(string.split(first['initiatormap'], '+')) == len(string.split(second['initiatormap'], '+')) :
        return 0
    if len(string.split(first['initiatormap'], '+')) < len(string.split(second['initiatormap'], '+')) :
        return 1

def by_priority(first, second) :
    if first.has_key('priority') and not second.has_key('priority') :
        return -1
    if not first.has_key('priority') and not second.has_key('priority') :
        return 0
    if not first.has_key('priority') and second.has_key('priority') :
        return 1
    if first['priority'] > second['priority'] :
        return -1
    if first['priority'] == second['priority'] :
        return 0
    if first['priority'] < second['priority'] :
        return 1

if os.environ.has_key('TZ') :
    print "TZ (%s)" % os.environ['TZ']
else :
    print "No TZ found"

usage_string = \
"""
Usage: show_q   [--?]
                [--help]
                [--full]
                [--job]
                [--state]
                [--class]
                [--limit]
                [--remaining]
                [--startt]
                [--resstartt]
                [--qos]
                [--user]
                [--group]
                [--account]
                [--nodes]
                [--cpu]
                [--memory]
                [--taskmap]
                [--systemqt]
                [--submitt]
                [--reason]
                [--risk]
                [--queue=qname1,qname2,...  <comma-delimited queue names>]
                [--fullname]
"""

default_argdict = {
    '--job' : None,
    '--user' : None,
    '--state' : None,
    '--class' : None,
    '--limit' : None,
    '--nodes' : None,
    '--remaining' : None,
    '--startt' : None,
    '--resstartt' : None,
    '--systemqt' : None,
    '--risk' : None,
    '--reason' : None
}

full_argdict = {
    '--job' : None,
    '--qos' : None,
    '--account' : None,
    '--class' : None,
    '--user' : None,
    '--state' : None,
    '--limit' : None,
    '--nodes' : None,
    '--cpu' : None,
    '--memory' : None,
    '--remaining' : None,
    '--startt' : None,
    '--resstartt' : None,
    '--systemqt' : None,
    '--submitt' : None,
    '--risk' : None,
    '--reason' : None,
    '--fullname' : None
}

options = ['dump',
           '?',
           'help',
           'full',
           'job',
           'state',
           'class',
           'limit',
           'remaining',
           'startt',
           'resstartt',
           'qos',
           'user',
           'group',
           'account',
           'nodes',
           'cpu',
           'memory',
           'taskmap',
           'systemqt',
           'submitt',
           'risk',
           'reason',
           'queue=',
           'fullname'
  ]

args = sys.argv[1:]
if len(args) == 0 :
    argdict = default_argdict
else :
    argdict = {}
    try :
        optlist, lineargs = getopt.getopt(args, '', options)
    except :
        print usage_string
        sys.exit(0)
    for pair in optlist:
        argdict[pair[0]] = pair[1]

## validate the name of the queues entered
## Grab the present queues from LoadLeveler.
## Check if the requested queues are in this 
## set. If not print error message & exit
## Not yet implemented - kmuriki@@sdsc.edu, May 16th 2006
#tempdict = checkargs(argdict)
#argdict = tempdict

if argdict.has_key('--?') or argdict.has_key('--help') :
    print usage_string
    sys.exit(0)

if argdict.has_key('--full') :
    argdict.update(full_argdict)


## if --queue provided, it should be in the form of a comma-delimited
## list of node names.  reformat this to ['<qname1>', '<qname2>',...]
if argdict.has_key('--queue') :
    queues_string = argdict['--queue']
    ## special case, if only --queue is provided, use default argument
    ## on top of --queue argument so jobid, owner, etc are listed.
    if len(args) ==1 :
        argdict= default_argdict
        argdict['--queue'] = queues_string
    #split off queues_string based on comma (,)
    queues_string = queues_string.split(',')
    
else :
    queues_string = None


db_handle = Catalina.open_ro_db(JOBS_DB,'read')
job_steps = Catalina.get_object_list(db_handle)
reservations_db_handle = Catalina.open_ro_db(RESERVATIONS_DB,'read')
reservations = Catalina.get_object_list(reservations_db_handle)
resource_db_handle = Catalina.open_ro_db(RESOURCE_DB,'read')
resource = Catalina.get_object_list(resource_db_handle)
configuration_db_handle = Catalina.open_ro_db(CONFIGURATION_DB,'read')
configuration_db = configuration_db_handle[0]

try :
    update_timestamp_float = configuration_db['last_schedule_update']['timestamp']
    print "Last schedule update (%s)" % time.strftime("%m/%d/%Y %H:%M:%S", time.localtime(update_timestamp_float))
except :
    print "WARNING: Could not find last schedule update!"

if argdict.has_key('--dump') :
    for job_step in job_steps :
        for key in job_step.keys() :
            print "#cat_delim#%s#cat_sep#%s" % (key, job_step[key]),
        print ""
    sys.exit(0)

idle_jobs = filter( lambda job_step : job_step['state'] == 'Idle', job_steps )
running_starting_jobs = filter( lambda job_step : \
  job_step['state'] in ['Running', 'Starting', 'Preempted'] \
  , job_steps )
eligible_jobs = filter( lambda job_step : job_step['ineligible_reason'] == 'Eligible', idle_jobs )
ineligible_jobs = filter( lambda job_step : job_step['ineligible_reason'] != 'Eligible', idle_jobs )

running_starting_jobs.sort(by_remaining)
# print header for Running jobs
print "ACTIVE JOBS" + 20 * '-'
header_string = ''
format_string = ''
if argdict.has_key('--job') :
    header_string = header_string + " JOBNAME             "
    format_string = format_string + " %20s"
if argdict.has_key('--user') :
    header_string = header_string + " USER      "
    format_string = format_string + " %10s"
if argdict.has_key('--state') :
    header_string = header_string + " STATE   "
    format_string = format_string + " %8s"
if argdict.has_key('--nodes') :
    header_string = header_string + " NODES"
    format_string = format_string + " %4s "
if argdict.has_key('--cpu') :
    header_string = header_string + " PROCS"
    format_string = format_string + " %4s "
if argdict.has_key('--memory') :
    header_string = header_string + " MEMORY"
    format_string = format_string + " %5i "
if argdict.has_key('--remaining') :
    header_string = header_string + "  REMAINING"
    format_string = format_string + " %10s"
if argdict.has_key('--startt') :
    header_string = header_string + " STARTTIME  "
    format_string = format_string + " %11s"
if argdict.has_key('--limit') :
    header_string = header_string + " LIMIT    "
    format_string = format_string + " %9s"
if argdict.has_key('--class') :
    header_string = header_string + " CLASS       "
    format_string = format_string + " %12s "
if argdict.has_key('--qos') :
    header_string = header_string + " QOS"
    format_string = format_string + " %2s "
if argdict.has_key('--group') :
    header_string = header_string + " GROUP  "
    format_string = format_string + " %7s"
if argdict.has_key('--account') :
    header_string = header_string + " ACCOUNT"
    format_string = format_string + " %7s"
if argdict.has_key('--risk') :
    header_string = header_string + " RISK"
    format_string = format_string + " %4s"
if argdict.has_key('--taskmap') :
    header_string = header_string + " TASKMAP"
    format_string = format_string + " %s"
if argdict.has_key('--fullname') :
    header_string = header_string + " FULL NAME"
    format_string = format_string + "%s"
    

#print "JobStepId       State     Class        Limit(hr) TimeRemaining(hr) StartTime                QOS    User      Group   Account (Nodes) TaskMap"
#print 140 * '-'
print header_string
# print each running job line
allocated_nodes = 0
allocated_cpu = 0
allocated_memory = 0
consumable_cpu = 0
consumable_memory = 0
allocated_hosts_dict = {}

for job_step in running_starting_jobs :

        display = 0
        if argdict.has_key('--queue') :
           class_name = job_step['job_class']
        
        ## I'm trying to find my class_name (from my job) in the list of 
        ## class provided by --queue options by the user. I am using the
        ## index function, which returns an error if not found, and an index
        ## if found.
        
           try:
                queues_string.index(class_name) 
                display=1
           except :
                pass
           
        else :
           display = 1

        if display == 1 :
            nodes = string.split(job_step['initiatormap'], '+')
            task_hosts = job_step['task_hosts']
            allocated_hosts = job_step['allocated_hosts']
            run_cpu = 0
            run_memory = 0
            cons_cpu = 0
            cons_memory = 0
            job_nodes = {}
            for allocated_host in allocated_hosts :
                allocated_hosts_dict[allocated_host] = None
                job_nodes[allocated_host] = None
            #print "job_nodes.keys() (%s)" % (job_nodes.keys(),)
            if job_step['node_usage'] == 'node_shared' :
                nodes_length = len(nodes)
                for node_index in range(nodes_length) :
                    if job_step.has_key('requested_resource_list') :
                        req_list = job_step['requested_resource_list'][node_index]['req_list']
                        for req in req_list :
                            if req.has_key('cpu') :
                                cons_cpu = cons_cpu + req['cpu']
                                run_cpu = run_cpu + req['cpu']
                            if req.has_key('memory') :
                                cons_memory = cons_memory + req['memory']
                                run_memory = run_memory + req['memory']
            else :
                for node in job_nodes.keys() :
                    #print "adding cpu (%s) for node (%s)" % (resource_db_handle[0][node]['Cpus'], node)
                    if resource_db_handle[0].has_key(node) :
                        if resource_db_handle[0][node]['Cpus'] != None :
                            run_cpu = run_cpu + resource_db_handle[0][node]['Cpus']
                        if resource_db_handle[0][node]['Memory'] != None :
                            run_memory = run_memory + resource_db_handle[0][node]['Memory']
                        if resource_db_handle[0][node]['ConsumableCpus'] != None :
                            cons_cpu = cons_cpu + resource_db_handle[0][node]['ConsumableCpus']
                        if resource_db_handle[0][node]['ConsumableMemory'] != None :
                            cons_memory = cons_memory + resource_db_handle[0][node]['ConsumableMemory']
            limit_seconds = job_step['wall_clock_limit']
            limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
            if job_step.has_key('wall_clock_used') and job_step['wall_clock_used'] != None :
                remaining_seconds = job_step['wall_clock_limit'] - job_step['wall_clock_used']
            else :
                remaining_seconds = (job_step['Dispatch_Time'] + job_step['wall_clock_limit'] - Catalina.Now_float)
            if job_step['state'] in ['Preempted'] :
                for reservation in reservations :
                    if reservation['job_runID'] == job_step['name'] :
                        res_start_time = reservation['start_time_float']
                        relative_res_start_time = res_start_time - Catalina.Now_float
                        if relative_res_start_time < 0 :
                            relative_res_start_time = 0.0
                        remaining_seconds = relative_res_start_time + remaining_seconds
            if remaining_seconds < 0 :
                sign_char = '-'
            else :
                sign_char = ' '
            remaining_string = "%s%02d:%02d:%02d" % (sign_char, abs(remaining_seconds)/3600, abs(remaining_seconds)%3600/60, abs(remaining_seconds)%60)
            print_list = []
            if argdict.has_key('--job') :
                print_list.append(job_step['name'])
            if argdict.has_key('--user') :
                print_list.append(job_step['user'])
            if argdict.has_key('--state') :
                print_list.append(job_step['state'])
            if argdict.has_key('--nodes') :
                #print_list.append(nodes_length)
                print_list.append(len(job_nodes.keys()))
            if argdict.has_key('--cpu') :
                print_list.append(int(run_cpu))
            if argdict.has_key('--memory') :
                print_list.append(int(run_memory))
            if argdict.has_key('--remaining') :
                print_list.append(remaining_string)
            if argdict.has_key('--startt') :
                print_list.append(
                  time.strftime("%m/%d %H:%M", time.localtime(job_step['Dispatch_Time']))
                  )
            if argdict.has_key('--limit') :
                print_list.append(limit_string)
            if argdict.has_key('--class') :
                print_list.append(job_step['job_class'])
            if argdict.has_key('--qos') :
                print_list.append(job_step['QOS'])
            if argdict.has_key('--group') :
                print_list.append(job_step['group'])
            if argdict.has_key('--account') :
                print_list.append(job_step['account'])
            if argdict.has_key('--risk') :
                if job_step.has_key('run_at_risk_int') :
                    print_list.append(job_step['run_at_risk_int'])
                else :
                    print_list.append(0)
            if argdict.has_key('--taskmap') :
                print_list.append(job_step['initiatormap'])
            if argdict.has_key('--fullname') :
                #parse output from pwd.getpwname( tuple of information)
                user_fullname = pwd.getpwnam(job_step['user'])[4].split(',')[0]
                user_org = pwd.getpwnam(job_step['user'])[4].split(',')[1].lower()
                print_list.append(' ' +  user_fullname + ' (' + user_org + ')')
            print format_string % tuple(print_list)
            #allocated_nodes = allocated_nodes + nodes_length
            allocated_cpu = allocated_cpu + run_cpu
            allocated_memory = allocated_memory + run_memory
            consumable_cpu = consumable_cpu + cons_cpu
            consumable_memory = consumable_memory + cons_memory

allocated_nodes = len(allocated_hosts_dict.keys())
print "Allocated Nodes: (%i)" % allocated_nodes
print "Allocated Cpus: (%i)" % allocated_cpu
print "Allocated Memory: (%i)" % allocated_memory

eligible_jobs.sort(by_priority)
# print header for eligible jobs
print "IDLE JOBS" + 20 * '-'
header_string = ''
format_string = ''
if argdict.has_key('--job') :
    header_string = header_string + " JOBNAME             "
    format_string = format_string + " %20s"
if argdict.has_key('--user') :
    header_string = header_string + " USER      "
    format_string = format_string + " %10s"
if argdict.has_key('--state') :
    header_string = header_string + " STATE   "
    format_string = format_string + " %8s"
if argdict.has_key('--nodes') :
    header_string = header_string + " NODES"
    format_string = format_string + " %4s "
if argdict.has_key('--cpu') :
    header_string = header_string + " PROCS"
    format_string = format_string + " %4s "
if argdict.has_key('--memory') :
    header_string = header_string + " MEMORY"
    format_string = format_string + " %5i "
if argdict.has_key('--limit') :
    header_string = header_string + " LIMIT    "
    format_string = format_string + " %9s"
if argdict.has_key('--systemqt') :
    header_string = header_string + " QUEUETIME  "
    format_string = format_string + " %11s"
if argdict.has_key('--submitt') :
    header_string = header_string + " SUBMITTIME "
    format_string = format_string + " %11s"
if argdict.has_key('--class') :
    header_string = header_string + " CLASS       "
    format_string = format_string + " %12s"
if argdict.has_key('--qos') :
    header_string = header_string + " QOS"
    format_string = format_string + " %3s"
if argdict.has_key('--group') :
    header_string = header_string + " GROUP  "
    format_string = format_string + " %7s"
if argdict.has_key('--account') :
    header_string = header_string + " ACCOUNT"
    format_string = format_string + " %7s"
if argdict.has_key('--risk') :
    header_string = header_string + " RISK"
    format_string = format_string + " %4s"
if argdict.has_key('--resstartt') :
    header_string = header_string + " RES_START "
    format_string = format_string + " %10s"
if argdict.has_key('--taskmap') :
    header_string = header_string + " TASKMAP"
    format_string = format_string + " %s"
if argdict.has_key('--fullname') :
    header_string = header_string + " FULL NAME"
    format_string = format_string + "%s"
print header_string
for job_step in eligible_jobs :

   display = 0
   if argdict.has_key('--queue') :
      class_name = job_step['job_class']
      try:
           queues_string.index(class_name)
           display=1
      except:
           pass
           
   else :
      display = 1

   if display == 1 :
        nodes = string.split(job_step['initiatormap'], '+')
        nodes_length = len(nodes)
        cpu = 0
        memory = 0
        for node_index in range(nodes_length) :
            if job_step.has_key('requested_resource_list') :
                 req_list = job_step['requested_resource_list'][node_index]['req_list']
                 for req in req_list :
                     if req.has_key('cpu') :
                         cpu = cpu + req['cpu']
                     if req.has_key('memory') :
                         memory = memory + req['memory']
        res_start_string = None
        limit_seconds = job_step['wall_clock_limit']
        limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
        for reservation in reservations :
            if reservation['job_runID'] == job_step['name'] :
                res_start_time = reservation['start_time_float']
                relative_res_start_time = res_start_time - Catalina.Now_float
                if relative_res_start_time < 0 :
                    res_start_sign = '-'
                    relative_res_start_time = abs(relative_res_start_time)
                else :
                    res_start_sign = ' '
                res_start_string = "%s%02u:%02u:%02u" % (res_start_sign, relative_res_start_time/3600, relative_res_start_time%3600/60, relative_res_start_time%60)
        print_list = []
        if argdict.has_key('--job') :
            print_list.append(job_step['name'])
        if argdict.has_key('--user') :
            print_list.append(job_step['user'])
        if argdict.has_key('--state') :
            print_list.append(job_step['state'])
        if argdict.has_key('--nodes') :
            print_list.append(nodes_length)
        if argdict.has_key('--cpu') :
            print_list.append(int(cpu))
        if argdict.has_key('--memory') :
            print_list.append(int(memory))
        if argdict.has_key('--limit') :
            print_list.append(limit_string)
        if argdict.has_key('--systemqt') :
            print_list.append(
              time.strftime("%m/%d %H:%M", time.localtime(job_step['system_queue_time']))
            )
        if argdict.has_key('--submitt') :
            print_list.append(
              time.strftime("%m/%d %H:%M", time.localtime(job_step['SubmitTime']))
            )
        if argdict.has_key('--class') :
            print_list.append(job_step['job_class'])
        if argdict.has_key('--qos') :
            print_list.append(job_step['QOS'])
        if argdict.has_key('--group') :
            print_list.append(job_step['group'])
        if argdict.has_key('--account') :
            print_list.append(job_step['account'])
        if argdict.has_key('--risk') :
            if job_step.has_key('run_at_risk_int') :
                 print_list.append(job_step['run_at_risk_int'])
            else :
                 print_list.append(0)
        if argdict.has_key('--resstartt') :
            print_list.append(res_start_string)
        if argdict.has_key('--taskmap') :
            print_list.append(job_step['initiatormap'])
        if argdict.has_key('--fullname') :
            # parse output from pwd.getpwnam (tuple of information)
            user_fullname = pwd.getpwnam(job_step['user'])[4].split(',')[0]
            user_org = pwd.getpwnam(job_step['user'])[4].split(',')[1].lower()
            print_list.append(' ' + user_fullname + ' (' + user_org + ')')
        print format_string % tuple(print_list)

ineligible_jobs.sort(by_priority)
# print header for ineligible jobs
print "NON-QUEUED JOBS" + 20 * '-'
header_string = ''
format_string = ''
if argdict.has_key('--job') :
    header_string = header_string + " JOBNAME             "
    format_string = format_string + " %20s"
if argdict.has_key('--user') :
    header_string = header_string + " USER      "
    format_string = format_string + " %10s"
if argdict.has_key('--state') :
    header_string = header_string + " STATE   "
    format_string = format_string + " %8s"
if argdict.has_key('--nodes') :
    header_string = header_string + " NODES"
    format_string = format_string + " %4s "
if argdict.has_key('--cpu') :
    header_string = header_string + " PROCS"
    format_string = format_string + " %4s "
if argdict.has_key('--memory') :
    header_string = header_string + " MEMORY"
    format_string = format_string + " %5i "
if argdict.has_key('--limit') :
    header_string = header_string + " LIMIT    "
    format_string = format_string + " %9s"
if argdict.has_key('--submitt') :
    header_string = header_string + " SUBMITTIME "
    format_string = format_string + " %11s"
if argdict.has_key('--class') :
    header_string = header_string + " CLASS       "
    format_string = format_string + " %12s"
if argdict.has_key('--qos') :
    header_string = header_string + " QOS"
    format_string = format_string + " %3s"
if argdict.has_key('--group') :
    header_string = header_string + " GROUP  "
    format_string = format_string + " %7s"
if argdict.has_key('--account') :
    header_string = header_string + " ACCOUNT"
    format_string = format_string + " %7s"
if argdict.has_key('--risk') :
    header_string = header_string + " RISK"
    format_string = format_string + " %4s"
if argdict.has_key('--reason') :
    header_string = header_string + " REASON                    "
    format_string = format_string + " %26s"
if argdict.has_key('--taskmap') :
    header_string = header_string + " TASKMAP"
    format_string = format_string + " %s"
if argdict.has_key('--fullname') :
    header_string = header_string + " FULL NAME"
    format_string = format_string + "%s"
print header_string
for job_step in ineligible_jobs :
   display = 0
   if argdict.has_key('--queue') :
      class_name = job_step['job_class']
      try:
           queues_string.index(class_name)
           display=1
      except:
           pass
           
   else :
      display = 1

   if display == 1 :
        nodes = string.split(job_step['initiatormap'], '+')
        nodes_length = len(nodes)
        cpu = 0
        memory = 0
        for node_index in range(nodes_length) :
             if job_step.has_key('requested_resource_list') :
                  req_list = job_step['requested_resource_list'][node_index]['req_list']
                  for req in req_list :
                       if req.has_key('cpu') :
                            cpu = cpu + req['cpu']
                       if req.has_key('memory') :
                            memory = memory + req['memory']
        limit_seconds = job_step['wall_clock_limit']
        limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
        print_list = []
        if argdict.has_key('--job') :
             print_list.append(job_step['name'])
        if argdict.has_key('--user') :
             print_list.append(job_step['user'])
        if argdict.has_key('--state') :
             print_list.append(job_step['state'])
        if argdict.has_key('--nodes') :
             print_list.append(nodes_length)
        if argdict.has_key('--cpu') :
             print_list.append(int(cpu))
        if argdict.has_key('--memory') :
             print_list.append(int(memory))
        if argdict.has_key('--limit') :
             print_list.append(limit_string)
        if argdict.has_key('--submitt') :
             print_list.append(
             time.strftime("%m/%d %H:%M", time.localtime(job_step['SubmitTime']))
          )
        if argdict.has_key('--class') :
             print_list.append(job_step['job_class'])
        if argdict.has_key('--qos') :
             print_list.append(job_step['QOS'])
        if argdict.has_key('--group') :
             print_list.append(job_step['group'])
        if argdict.has_key('--account') :
             print_list.append(job_step['account'])
        if argdict.has_key('--risk') :
             if job_step.has_key('run_at_risk_int') :
                  print_list.append(job_step['run_at_risk_int'])
             else :
                  print_list.append(0)
        if argdict.has_key('--reason') :
             print_list.append(job_step['ineligible_reason'])
        if argdict.has_key('--taskmap') :
             print_list.append(job_step['initiatormap'])
        if argdict.has_key('--fullname') :
            # parse output from pwd.getpwnam (tuple of information)
            user_fullname = pwd.getpwnam(job_step['user'])[4].split(',')[0]
            user_org = pwd.getpwnam(job_step['user'])[4].split(',')[1].lower()
            print_list.append(' ' + user_fullname + ' (' + user_org + ')')     
        print format_string % tuple(print_list)

active_resource = filter(lambda x, translation_dict=Catalina.RM_TO_CAT_RESOURCE_dict, \
  def_class=Catalina.DEFAULT_JOB_CLASS : \
  x['State'] != None and \
  translation_dict[x['State']] in ['Idle', 'Running', 'Busy'] , resource)
active_cpu = 0
for ar in active_resource :
    if ar.has_key('ConsumableCpus') :
        conscpu = ar['ConsumableCpus']
    else :
        consscpu = 0
    if ar.has_key('Cpus') :
        realcpu = ar['Cpus']
    else : 
        realcpu = 0
    active_cpu = active_cpu + max(conscpu, realcpu)

if argdict.has_key('--queue') == 0 :
    #print "HOTPAGE: %s %s" % (allocated_nodes, len(active_resource))
    print "HOTPAGE: %i %i" % (allocated_cpu, active_cpu)

Catalina.close_ro_db(resource_db_handle)
Catalina.close_ro_db(reservations_db_handle)
Catalina.close_ro_db(db_handle)
Catalina.close_ro_db(configuration_db_handle)@


1.29
log
@add new feature / flag called 'fullname' to show descriptive text about the user and organization
mmargo
@
text
@d14 1
@


1.28
log
@Changes by Krishna
accept --queue=queue1,queue2,queue3
so we can filter the output based on the requested queue parameters
mmargo
@
text
@d104 1
d139 2
a140 1
    '--reason' : None
d166 2
a167 1
           'queue='
d294 4
d423 5
a427 1

d493 3
d577 5
d634 3
d702 5
d732 1
@


1.27
log
@fix by Kenneth.
Robert's job has weird geometry, x nodes with 8 cpu, and y nodes with 7 cpu. show_q reported wrong cpu count
mmargo.
@
text
@d103 1
d163 2
a164 1
           'reason'
d166 1
d180 8
d195 17
d302 1
d304 16
a319 88
    nodes = string.split(job_step['initiatormap'], '+')
    task_hosts = job_step['task_hosts']
    allocated_hosts = job_step['allocated_hosts']
    run_cpu = 0
    run_memory = 0
    cons_cpu = 0
    cons_memory = 0
    job_nodes = {}
    for allocated_host in allocated_hosts :
        allocated_hosts_dict[allocated_host] = None
        job_nodes[allocated_host] = None
    #print "job_nodes.keys() (%s)" % (job_nodes.keys(),)
    if job_step['node_usage'] == 'node_shared' :
        nodes_length = len(nodes)
        for node_index in range(nodes_length) :
            if job_step.has_key('requested_resource_list') :
                req_list = job_step['requested_resource_list'][node_index]['req_list']
                for req in req_list :
                    if req.has_key('cpu') :
                        cons_cpu = cons_cpu + req['cpu']
                        run_cpu = run_cpu + req['cpu']
                    if req.has_key('memory') :
                        cons_memory = cons_memory + req['memory']
                        run_memory = run_memory + req['memory']
    else :
        for node in job_nodes.keys() :
            #print "adding cpu (%s) for node (%s)" % (resource_db_handle[0][node]['Cpus'], node)
            if resource_db_handle[0].has_key(node) :
                if resource_db_handle[0][node]['Cpus'] != None :
                    run_cpu = run_cpu + resource_db_handle[0][node]['Cpus']
                if resource_db_handle[0][node]['Memory'] != None :
                    run_memory = run_memory + resource_db_handle[0][node]['Memory']
                if resource_db_handle[0][node]['ConsumableCpus'] != None :
                    cons_cpu = cons_cpu + resource_db_handle[0][node]['ConsumableCpus']
                if resource_db_handle[0][node]['ConsumableMemory'] != None :
                    cons_memory = cons_memory + resource_db_handle[0][node]['ConsumableMemory']
    limit_seconds = job_step['wall_clock_limit']
    limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
    if job_step.has_key('wall_clock_used') and job_step['wall_clock_used'] != None :
        remaining_seconds = job_step['wall_clock_limit'] - job_step['wall_clock_used']
    else :
        remaining_seconds = (job_step['Dispatch_Time'] + job_step['wall_clock_limit'] - Catalina.Now_float)
    if job_step['state'] in ['Preempted'] :
        for reservation in reservations :
            if reservation['job_runID'] == job_step['name'] :
                res_start_time = reservation['start_time_float']
                relative_res_start_time = res_start_time - Catalina.Now_float
                if relative_res_start_time < 0 :
                    relative_res_start_time = 0.0
                remaining_seconds = relative_res_start_time + remaining_seconds
    if remaining_seconds < 0 :
        sign_char = '-'
    else :
        sign_char = ' '
    remaining_string = "%s%02d:%02d:%02d" % (sign_char, abs(remaining_seconds)/3600, abs(remaining_seconds)%3600/60, abs(remaining_seconds)%60)
    print_list = []
    if argdict.has_key('--job') :
        print_list.append(job_step['name'])
    if argdict.has_key('--user') :
        print_list.append(job_step['user'])
    if argdict.has_key('--state') :
        print_list.append(job_step['state'])
    if argdict.has_key('--nodes') :
        #print_list.append(nodes_length)
        print_list.append(len(job_nodes.keys()))
    if argdict.has_key('--cpu') :
        print_list.append(int(run_cpu))
    if argdict.has_key('--memory') :
        print_list.append(int(run_memory))
    if argdict.has_key('--remaining') :
        print_list.append(remaining_string)
    if argdict.has_key('--startt') :
        print_list.append(
          time.strftime("%m/%d %H:%M", time.localtime(job_step['Dispatch_Time']))
          )
    if argdict.has_key('--limit') :
        print_list.append(limit_string)
    if argdict.has_key('--class') :
        print_list.append(job_step['job_class'])
    if argdict.has_key('--qos') :
        print_list.append(job_step['QOS'])
    if argdict.has_key('--group') :
        print_list.append(job_step['group'])
    if argdict.has_key('--account') :
        print_list.append(job_step['account'])
    if argdict.has_key('--risk') :
        if job_step.has_key('run_at_risk_int') :
            print_list.append(job_step['run_at_risk_int'])
d321 103
a423 10
            print_list.append(0)
    if argdict.has_key('--taskmap') :
        print_list.append(job_step['initiatormap'])
    
    print format_string % tuple(print_list)
    #allocated_nodes = allocated_nodes + nodes_length
    allocated_cpu = allocated_cpu + run_cpu
    allocated_memory = allocated_memory + run_memory
    consumable_cpu = consumable_cpu + cons_cpu
    consumable_memory = consumable_memory + cons_memory
d484 73
a556 22
    nodes = string.split(job_step['initiatormap'], '+')
    nodes_length = len(nodes)
    cpu = 0
    memory = 0
    for node_index in range(nodes_length) :
        if job_step.has_key('requested_resource_list') :
            req_list = job_step['requested_resource_list'][node_index]['req_list']
            for req in req_list :
                if req.has_key('cpu') :
                    cpu = cpu + req['cpu']
                if req.has_key('memory') :
                    memory = memory + req['memory']
    res_start_string = None
    limit_seconds = job_step['wall_clock_limit']
    limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
    for reservation in reservations :
        if reservation['job_runID'] == job_step['name'] :
            res_start_time = reservation['start_time_float']
            relative_res_start_time = res_start_time - Catalina.Now_float
            if relative_res_start_time < 0 :
                res_start_sign = '-'
                relative_res_start_time = abs(relative_res_start_time)
d558 6
a563 43
                res_start_sign = ' '
            res_start_string = "%s%02u:%02u:%02u" % (res_start_sign, relative_res_start_time/3600, relative_res_start_time%3600/60, relative_res_start_time%60)
    print_list = []
    if argdict.has_key('--job') :
        print_list.append(job_step['name'])
    if argdict.has_key('--user') :
        print_list.append(job_step['user'])
    if argdict.has_key('--state') :
        print_list.append(job_step['state'])
    if argdict.has_key('--nodes') :
        print_list.append(nodes_length)
    if argdict.has_key('--cpu') :
        print_list.append(int(cpu))
    if argdict.has_key('--memory') :
        print_list.append(int(memory))
    if argdict.has_key('--limit') :
        print_list.append(limit_string)
    if argdict.has_key('--systemqt') :
        print_list.append(
          time.strftime("%m/%d %H:%M", time.localtime(job_step['system_queue_time']))
          )
    if argdict.has_key('--submitt') :
        print_list.append(
          time.strftime("%m/%d %H:%M", time.localtime(job_step['SubmitTime']))
          )
    if argdict.has_key('--class') :
        print_list.append(job_step['job_class'])
    if argdict.has_key('--qos') :
        print_list.append(job_step['QOS'])
    if argdict.has_key('--group') :
        print_list.append(job_step['group'])
    if argdict.has_key('--account') :
        print_list.append(job_step['account'])
    if argdict.has_key('--risk') :
        if job_step.has_key('run_at_risk_int') :
            print_list.append(job_step['run_at_risk_int'])
        else :
            print_list.append(0)
    if argdict.has_key('--resstartt') :
        print_list.append(res_start_string)
    if argdict.has_key('--taskmap') :
        print_list.append(job_step['initiatormap'])
    print format_string % tuple(print_list)
d617 45
a661 32
    nodes = string.split(job_step['initiatormap'], '+')
    nodes_length = len(nodes)
    cpu = 0
    memory = 0
    for node_index in range(nodes_length) :
        if job_step.has_key('requested_resource_list') :
            req_list = job_step['requested_resource_list'][node_index]['req_list']
            for req in req_list :
                if req.has_key('cpu') :
                    cpu = cpu + req['cpu']
                if req.has_key('memory') :
                    memory = memory + req['memory']
    limit_seconds = job_step['wall_clock_limit']
    limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
    print_list = []
    if argdict.has_key('--job') :
        print_list.append(job_step['name'])
    if argdict.has_key('--user') :
        print_list.append(job_step['user'])
    if argdict.has_key('--state') :
        print_list.append(job_step['state'])
    if argdict.has_key('--nodes') :
        print_list.append(nodes_length)
    if argdict.has_key('--cpu') :
        print_list.append(int(cpu))
    if argdict.has_key('--memory') :
        print_list.append(int(memory))
    if argdict.has_key('--limit') :
        print_list.append(limit_string)
    if argdict.has_key('--submitt') :
        print_list.append(
          time.strftime("%m/%d %H:%M", time.localtime(job_step['SubmitTime']))
d663 18
a680 18
    if argdict.has_key('--class') :
        print_list.append(job_step['job_class'])
    if argdict.has_key('--qos') :
        print_list.append(job_step['QOS'])
    if argdict.has_key('--group') :
        print_list.append(job_step['group'])
    if argdict.has_key('--account') :
        print_list.append(job_step['account'])
    if argdict.has_key('--risk') :
        if job_step.has_key('run_at_risk_int') :
            print_list.append(job_step['run_at_risk_int'])
        else :
            print_list.append(0)
    if argdict.has_key('--reason') :
        print_list.append(job_step['ineligible_reason'])
    if argdict.has_key('--taskmap') :
        print_list.append(job_step['initiatormap'])
    print format_string % tuple(print_list)
d697 4
a700 2
#print "HOTPAGE: %s %s" % (allocated_nodes, len(active_resource))
print "HOTPAGE: %i %i" % (allocated_cpu, active_cpu)
@


1.26
log
@for preempted jobs, remaining time should be the end of the preempt
reservation
@
text
@d291 1
a291 1
                req_list = job_step['requested_resource_list'][0]['req_list']
d440 1
a440 1
            req_list = job_step['requested_resource_list'][0]['req_list']
d559 1
a559 1
            req_list = job_step['requested_resource_list'][0]['req_list']
@


1.25
log
@add preemption
@
text
@d317 8
@


1.24
log
@FORCETZ
@
text
@d208 2
a209 2
  job_step['state'] == 'Running' or \
  job_step['state'] == 'Starting', job_steps )
d313 4
a316 1
    remaining_seconds = (job_step['Dispatch_Time'] + job_step['wall_clock_limit'] - Catalina.Now_float)
@


1.23
log
@count all Idle, Busy, Running nodes, regardless of class, as active for HOTPAGE
@
text
@d13 1
d74 4
a77 1
print "TZ (%s)" % time.tzname[0]
@


1.22
log
@check for Memory None
@
text
@d593 1
a593 2
  translation_dict[x['State']] in ['Idle', 'Running', 'Busy'] and \
  def_class in x['ConfiguredClasses_list'], resource)
@


1.21
log
@if bogus options, print usage and exit
@
text
@d299 8
a306 4
                run_cpu = run_cpu + resource_db_handle[0][node]['Cpus']
                run_memory = run_memory + resource_db_handle[0][node]['Memory']
                cons_cpu = cons_cpu + resource_db_handle[0][node]['ConsumableCpus']
                cons_memory = cons_memory + resource_db_handle[0][node]['ConsumableMemory']
@


1.20
log
@don't die if node is missing
@
text
@d165 5
a169 1
    optlist, lineargs = getopt.getopt(args, '', options)
@


1.19
log
@smp
@
text
@d294 5
a298 4
            run_cpu = run_cpu + resource_db_handle[0][node]['Cpus']
            run_memory = run_memory + resource_db_handle[0][node]['Memory']
            cons_cpu = cons_cpu + resource_db_handle[0][node]['ConsumableCpus']
            cons_memory = cons_memory + resource_db_handle[0][node]['ConsumableMemory']
@


1.18
log
@send_end
@
text
@d92 2
d125 2
d152 2
d222 6
d261 5
d268 30
a297 1
    nodes_length = len(nodes)
d314 6
a319 1
        print_list.append(nodes_length)
d345 9
a353 2
    allocated_nodes = allocated_nodes + nodes_length
print "Allocated Nodes: (%s)" % allocated_nodes
d372 6
d412 10
d444 4
d493 7
a499 1
    format_string = format_string + " %4s"
d531 10
d552 4
d586 13
a598 1
print "HOTPAGE: %s %s" % (allocated_nodes, len(active_resource))
@


1.17
log
@added run_at_risk
@
text
@d25 1
a25 1
        second = Catalina.Now_float + Catalina.RUN_AT_RISK_CLEANUP_TIME
@


1.16
log
@consistent opts
@
text
@d20 8
a27 2
    first_end = first['Dispatch_Time'] + first['wall_clock_limit']
    second_end = second['Dispatch_Time'] + second['wall_clock_limit']
d96 1
d110 1
d128 1
d151 1
d237 3
d285 5
d335 3
d388 5
d434 3
d472 5
@


1.15
log
@added last_schedule_update
@
text
@d74 1
a74 1
                [--runID]
d93 1
a93 1
    '--runID' : None,
d107 1
a107 1
    '--runID' : None,
d127 1
a127 1
           'runID',
d194 1
a194 1
if argdict.has_key('--runID') :
d248 1
a248 1
    if argdict.has_key('--runID') :
d284 1
a284 1
if argdict.has_key('--runID') :
d341 1
a341 1
    if argdict.has_key('--runID') :
d378 1
a378 1
if argdict.has_key('--runID') :
d421 1
a421 1
    if argdict.has_key('--runID') :
@


1.14
log
@use systemqt instead of submitt in default argdict
@
text
@d17 1
d166 8
@


1.13
log
@append HOMEDIR
@
text
@d101 1
a101 1
    '--submitt' : None,
d112 1
d309 1
a309 1
    header_string = header_string + " RES START "
@


1.12
log
@added HOTPAGE line
@
text
@d7 2
a12 1
import sys
@


1.11
log
@set res_start_string = None
@
text
@d15 1
d161 2
d307 2
a308 2
    header_string = header_string + " RES START"
    format_string = format_string + " %9s"
d323 6
a328 1
            res_start_string = "%02u:%02u:%02u" % (relative_res_start_time/3600, relative_res_start_time%3600/60, relative_res_start_time%60)
d438 8
@


1.10
log
@modified, per wilkinsn
@
text
@d313 1
@


1.9
log
@fixed bug with negative remaining time
@
text
@d14 1
d77 1
d93 2
d98 1
a98 1
    '--systemqt' : None,
d113 1
d129 1
d158 2
d196 2
a197 2
    header_string = header_string + " STARTTIME                "
    format_string = format_string + " %25s"
d246 1
a246 1
          time.asctime(time.localtime(job_step['Dispatch_Time']))
d286 2
a287 2
    header_string = header_string + " QUEUETIME                "
    format_string = format_string + " %25s"
d289 2
a290 2
    header_string = header_string + " SUBMITTIME               "
    format_string = format_string + " %25s"
d293 1
a293 1
    format_string = format_string + " %12s "
d296 1
a296 1
    format_string = format_string + " %2s "
d303 3
d315 5
d333 1
a333 1
          time.asctime(time.localtime(job_step['system_queue_time']))
d337 1
a337 1
          time.asctime(time.localtime(job_step['SubmitTime']))
d347 2
d369 1
a369 1
    format_string = format_string + " %4s "
d374 2
a375 2
    header_string = header_string + " SUBMITTIME               "
    format_string = format_string + " %25s"
d378 1
a378 1
    format_string = format_string + " %12s "
d381 1
a381 1
    format_string = format_string + " %2s "
d413 1
a413 1
          time.asctime(time.localtime(job_step['SubmitTime']))
d429 1
@


1.8
log
@added usage string, changed to Maui-like format
@
text
@d185 2
a186 2
    header_string = header_string + " REMAINING"
    format_string = format_string + " %9s"
d220 5
a224 1
    remaining_string = "%02u:%02u:%02u" % (remaining_seconds/3600, remaining_seconds%3600/60, remaining_seconds%60)
@


1.7
log
@added SubmitTime to Ineligible jobs
@
text
@d65 69
a133 1
options = ['dump']
d135 14
a148 4
argdict = {}
optlist, lineargs = getopt.getopt(args, '', options)
for pair in optlist:
    argdict[pair[0]] = pair[1]
d169 43
a211 3
print 140 * '-'
print "JobStepId       State     Class        Limit(hr) TimeRemaining(hr) StartTime                QOS    User      Group   Account (Nodes) TaskMap"
print 140 * '-'
d217 33
a249 14
    print "%s %8s %12s %10.1f  %17.1f %24s %2s     %8s %7s %7s  (%4s) %s" % (
      job_step['name'],
      job_step['state'],
      job_step['job_class'],
      job_step['wall_clock_limit'] / 3600,
      (job_step['Dispatch_Time'] + job_step['wall_clock_limit'] - Catalina.Now_float) / 3600,
      time.asctime(time.localtime(job_step['Dispatch_Time'])),
      job_step['QOS'],
      job_step['user'],
      job_step['group'],
      job_step['account'],
      nodes_length,
      job_step['initiatormap']
    )
d255 40
a294 4
print 140 * '-'
print "JobStepId       State     Class        Limit(hr) SystemQueueTime          SubmitTime               QOS    User      Group   Account (Nodes) TaskMap"
print 140 * '-'
# print each eligible job line
d298 32
a329 18
    if job_step['system_queue_time'] == None :
        sqt = None
    else :
        sqt = time.asctime(time.localtime(job_step['system_queue_time']))
    print "%s %8s %12s %10.1f  %24s %24s %2s     %8s %7s %7s  (%4s) %s" % (
      job_step['name'],
      job_step['state'],
      job_step['job_class'],
      job_step['wall_clock_limit'] / 3600,
      time.asctime(time.localtime(job_step['system_queue_time'])),
      time.asctime(time.localtime(job_step['SubmitTime'])),
      job_step['QOS'],
      job_step['user'],
      job_step['group'],
      job_step['account'],
      nodes_length,
      job_step['initiatormap']
    )
d333 40
a372 4
print 140 * '-'
print "JobStepId       State     Class        Limit(hr) SubmitTime               QOS    User      Group   Account Reason                   (Nodes) TaskMap"
print 140 * '-'
# print each ineligible job line
d376 30
a405 18
    if job_step['system_queue_time'] == None :
        sqt = None
    else :
        sqt = time.asctime(time.localtime(job_step['system_queue_time']))
    print "%s %8s %12s %10.1f  %24s %2s     %8s %7s %7s %26s (%4s) %s" % (
      job_step['name'],
      job_step['state'],
      job_step['job_class'],
      job_step['wall_clock_limit'] / 3600,
      time.asctime(time.localtime(job_step['SubmitTime'])),
      job_step['QOS'],
      job_step['user'],
      job_step['group'],
      job_step['account'],
      job_step['ineligible_reason'],
      nodes_length,
      job_step['initiatormap']
    )
@


1.6
log
@removed priority from show_q output
@
text
@d147 1
a147 1
print "JobStepId       State     Class        Limit(hr) QOS    User      Group   Account Reason                   (Nodes) TaskMap"
d157 1
a157 1
    print "%s %8s %12s %10.1f  %2s     %8s %7s %7s %26s (%4s) %s" % (
d162 1
@


1.5
log
@patched to fix binding
@
text
@d119 1
a119 1
print "JobStepId       State     Class        Limit(hr) SystemQueueTime          SubmitTime               QOS    User      Group   Account Priority                 (Nodes) TaskMap"
d129 1
a129 1
    print "%s %8s %12s %10.1f  %24s %24s %2s     %8s %7s %7s  %20.0f     (%4s) %s" % (
a139 1
      job_step['priority'],
@


1.4
log
@*** empty log message ***
@
text
@d79 1
@


1.3
log
@added import sys
@
text
@d50 6
@


1.2
log
@--dump added
@
text
@d11 1
@


1.1
log
@Initial revision
@
text
@d10 1
d58 7
d67 6
@
