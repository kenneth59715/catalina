#!___PYTHON_PATH_PLACEHOLDER___
# script to run reservation tests
# create a user reservation, with earliest start and resource_amount
# check that the reservation was created, with query_res
# create a user reservation, with earliest start and no resource_amount
# check that the reservation was created, with query_res
# create a user reservation, with no earliest start and resource_amount
# check that the reservation was created, with query_res
# submit a job
# save the jobid
# update resources
# update jobs
# schedule jobs
# query_res to check for reservation with job_runID

import os
import string
import re
import time
import sys
import Catalina
import pwd
import subprocess

if Catalina.USERNAMESUFFIX != '@IGNORE' :
    username_string = pwd.getpwuid(os.getuid())[0] + Catalina.USERNAMESUFFIX
else :
    username_string = pwd.getpwuid(os.getuid())[0]

os.environ['TZ'] = 'GMT0'

epoch_now = time.time()

HOMEDIR = Catalina.HOMEDIR

test_res_id_list = []
test_standing_res_id_list = []

# update resources
cmd = HOMEDIR + '/update_resources'
cmd_string = cmd
print "# update_resources"
returnstring = os.popen(cmd_string).read()

# check to see if any resources have ConsumableCpus and ConsumableMemory
# greater than 0.  If so, do the shared tests
resource_db_handle = Catalina.open_ro_db(Catalina.RESOURCE_DB,'read')
resource_dict = resource_db_handle[0]
TESTSHARED = 0
for resource_name in resource_dict.keys() :
    resource = resource_dict[resource_name]
    if resource.has_key('ConsumableCpus') and resource['ConsumableCpus'] > 0 \
      and resource.has_key('ConsumableMemory') and resource['ConsumableMemory'] > 0 :
        TESTSHARED = 1
Catalina.close_ro_db(resource_db_handle)

# update runningstarting reservations
cmd = HOMEDIR + '/update_runningstarting'
cmd_string = cmd
print "# update_runningstarting"
returnstring = os.popen(cmd_string).read()

# create shortpool
cmd = HOMEDIR + '/create_standing_res'
start_spec = "'%s'" % Catalina.TEST_SHORTPOOL_SPEC
depth = '6'
duration = "%s" % Catalina.TEST_SHORTPOOL_DURATION
latency = '900'
resource_amount = "%s" % Catalina.TEST_SHORTPOOL_AMOUNT
job_restriction = r"if input_tuple[0]['QOS'] in ['4','6','7'] : result = 0"
node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
node_sort_policy_file = HOMEDIR + r"/last_available_running_first"
comment = 'Express'
affinity_calculation = "'result = -1'"
mode = 'real'
escaped_standing_spec = re.sub(r"\*",r"\*",Catalina.TEST_SHORTPOOL_SPEC)
output = r"""standing reservation (?P<res_name>.*) created on \d+ nodes with start_spec %s for duration (?P<duration>.*)""" % escaped_standing_spec
cmd_string = cmd + ' --latency=' + latency + ' --depth=' + depth + ' --start_spec=' + start_spec + ' --duration=' + duration + ' --resource_amount=' + resource_amount + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --mode=' + mode + ' --comment=' + comment + ' --affinity_calculation=' + affinity_calculation + '  --overlap_running=1'
returnstring = os.popen(cmd_string).read()
#print cmd_string
so = re.search(output, returnstring)
print "# 8 resource, 12 hour, shortpool reservation, M-F"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    res_id = so.group('res_name')
    test_standing_res_id_list.append(res_id)
    shortpool_id = so.group('res_name')

if TESTSHARED > 0 :
    # create shortpool with --sharedmap=1#type:node_shared#cpu:1+memory:1@1#type:node_shared#cpu:1+memory:2
    cmd = HOMEDIR + '/create_standing_res'
    start_spec = "'%s'" % Catalina.TEST_SHORTPOOL_SPEC
    depth = '6'
    duration = "%s" % Catalina.TEST_SHORTPOOL_DURATION
    latency = '900'
    resource_amount = "%s" % Catalina.TEST_SHORTPOOL_AMOUNT
    sharedmap = '1#type:node_shared#cpu:1+memory:1@1#type:node_shared#cpu:1+memory:2'
    job_restriction = r"if input_tuple[0]['QOS'] in ['4','6','7'] : result = 0"
    node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
    node_sort_policy_file = HOMEDIR + r"/last_available_running_first"
    comment = 'Shortpool_shared'
    affinity_calculation = "'result = -1'"
    mode = 'real'
    escaped_standing_spec = re.sub(r"\*",r"\*",Catalina.TEST_SHORTPOOL_SPEC)
    output = r"""standing reservation (?P<res_name>.*) created on \d+ nodes with start_spec %s for duration (?P<duration>.*)""" % escaped_standing_spec
    cmd_string = cmd + ' --latency=' + latency + ' --depth=' + depth + ' --start_spec=' + start_spec + ' --duration=' + duration + ' --resource_amount=' + resource_amount + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --mode=' + mode + ' --comment=' + comment + ' --affinity_calculation=' + affinity_calculation + '  --overlap_running=1' + " --sharedmap=%s" % sharedmap
    returnstring = os.popen(cmd_string).read()
    #print cmd_string
    so = re.search(output, returnstring)
    print "# 8 resource, 12 hour, shortpool reservation, M-F, sharedmap"
    if so == None :
        print "not ok shared"
        print "returnstring is (%s)" % returnstring
        print cmd_string
        #continue_var = raw_input('continue? ')
    else :
        print "ok shared"
        #print cmd_string
        shortsharedres_id = so.group('res_name')
        test_standing_res_id_list.append(shortsharedres_id)
        shortshared_id = so.group('res_name')

# create standing reservation
cmd = HOMEDIR + '/create_standing_res'
start_spec = "'%s'" % Catalina.TEST_STANDING_SPEC
depth = '5'
duration = "%s" % Catalina.TEST_STANDING_DURATION
resource_amount = "%s" % Catalina.TEST_STANDING_AMOUNT
#job_restriction = r"'if input_tuple[0][\'job_class\'] == \'interactive\' and input_tuple[0][\'wall_clock_limit\'] <= 1800 : result = 0'"
job_restriction = r"if input_tuple[0]['job_class'] == '" + Catalina.DEFAULT_JOB_CLASS + r"' and input_tuple[0]['QOS'] in ['2','4','6','7'] : result = 0"
node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
node_sort_policy_file = HOMEDIR + r"/first_available"
comment = 'Interactive'
affinity_calculation = "'result = -1'"
mode = 'real'
output = r"""standing reservation (?P<res_name>.*) created on \d+ nodes with start_spec (?P<res_time>.*) for duration (?P<duration>.*)"""
cmd_string = cmd + ' --depth=' + depth + ' --start_spec=' + start_spec + ' --duration=' + duration + ' --resource_amount=' + resource_amount + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --mode=' + mode + ' --comment=' + comment + ' --affinity_calculation=' + affinity_calculation + '  --overlap_running=1'
returnstring = os.popen(cmd_string).read()
#print cmd_string
so = re.search(output, returnstring)
print "# 8 resource, 12 hour, standing reservation, M-F"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    res_id = so.group('res_name')
    test_standing_res_id_list.append(res_id)
    res_start_time = so.group('res_time')

if TESTSHARED > 0 :
    # create standing reservation, sharedmap=1#type:node_shared#cpu:1+memory:1@1#type:node_shared#cpu:1+memory:2
    cmd = HOMEDIR + '/create_standing_res'
    start_spec = "'%s'" % Catalina.TEST_STANDING_SPEC
    depth = '5'
    duration = "%s" % Catalina.TEST_STANDING_DURATION
    resource_amount = "%s" % Catalina.TEST_STANDING_AMOUNT
    sharedmap = '1#type:node_shared#cpu:1+memory:1@1#type:node_shared#cpu:1+memory:2'
    #job_restriction = r"'if input_tuple[0][\'job_class\'] == \'interactive\' and input_tuple[0][\'wall_clock_limit\'] <= 1800 : result = 0'"
    job_restriction = r"if input_tuple[0]['job_class'] == '" + Catalina.DEFAULT_JOB_CLASS + r"' and input_tuple[0]['QOS'] in ['2','4','6','7'] : result = 0"
    node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
    node_sort_policy_file = HOMEDIR + r"/first_available"
    comment = 'Interactive'
    affinity_calculation = "'result = -1'"
    mode = 'real'
    output = r"""standing reservation (?P<res_name>.*) created on \d+ nodes with start_spec (?P<res_time>.*) for duration (?P<duration>.*)"""
    cmd_string = cmd + ' --depth=' + depth + ' --start_spec=' + start_spec + ' --duration=' + duration + ' --resource_amount=' + resource_amount + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --mode=' + mode + ' --comment=' + comment + ' --affinity_calculation=' + affinity_calculation + '  --overlap_running=1' + " --sharedmap=%s" % sharedmap
    returnstring = os.popen(cmd_string).read()
    #print cmd_string
    so = re.search(output, returnstring)
    print "# 8 resource, 12 hour, standing reservation, M-F, sharedmap"
    if so == None :
        print "not ok shared"
        print "returnstring is (%s)" % returnstring
        print cmd_string
        #continue_var = raw_input('continue? ')
    else :
        print "ok shared"
        standingsharedres_id = so.group('res_name')
        test_standing_res_id_list.append(standingsharedres_id)
        standingsharedres_start_time = so.group('res_time')


#continue_var = raw_input('continue? ')

# update standing reservation instances
cmd = HOMEDIR + '/update_standing_reservations'
cmd_string = cmd
print "# update_standing_reservations"
returnstring = os.popen(cmd_string).read()

cmd = HOMEDIR + '/show_res'
output = r"(?P<res_name>\d+) 12:00:00 00:00:00 \d+"
cmd_string = cmd + ' --purpose' + ' --start' + ' --end' + ' --nodes' + ' --readable' + " | ___GREP_PLACEHOLDER___ standing_reservation | ___AWK_PLACEHOLDER___ '{print $1,$5,$10,$12}'"
cmd_string = cmd + ' --purpose' + ' --comment' + ' --start' + ' --end' + ' --nodes' + ' --readable' + " | ___GREP_PLACEHOLDER___ %s | ___AWK_PLACEHOLDER___ '{print $1,$5,$10,$12}'" % res_id
returnstring = os.popen(cmd_string).read()
search_list = re.findall(output, returnstring)
print "# query for 2 resource, 12 hour, standing_reservation instances"
if len(search_list) < 5 :
    print "not ok"
    print output
    print returnstring
    print cmd_string
else :
    print "ok"

if TESTSHARED > 0 :
    cmd = HOMEDIR + '/show_res'
    output = r"(?P<res_name>\d+) 12:00:00 00:00:00 \d+"
    cmd_string = cmd + ' --purpose' + ' --start' + ' --end' + ' --nodes' + ' --readable' + " | ___GREP_PLACEHOLDER___ standing_reservation | ___AWK_PLACEHOLDER___ '{print $1,$5,$10,$12}'"
    cmd_string = cmd + ' --purpose' + ' --comment' + ' --start' + ' --end' + ' --nodes' + ' --readable' + " | ___GREP_PLACEHOLDER___ %s | ___AWK_PLACEHOLDER___ '{print $1,$5,$10,$12}'" % standingsharedres_id
    returnstring = os.popen(cmd_string).read()
    search_list = re.findall(output, returnstring)
    print "# query for 2 resource, 12 hour, standing_reservation sharedmap instances"
    if len(search_list) < 5 :
        print "not ok shared"
        print output
        print returnstring
        print cmd_string
        #continue_var = raw_input('continue? ')
    else :
        print "ok shared"

cmd = HOMEDIR + '/show_res'
output = r"\d\d:\d\d:\d\d \d\d:00:00 \d+"
cmd_string = cmd + ' --nodes' + ' --comment' + ' --start' + ' --end' + ' --readable' + " | ___GREP_PLACEHOLDER___ " + shortpool_id  + " | ___AWK_PLACEHOLDER___ '{print $5,$10,$12}'"
returnstring = os.popen(cmd_string).read()
search_list = re.findall(output, returnstring)
print "# query for 8 resource, 12 hour, shortpool instances"
if len(search_list) < 6 :
    print "not ok"
    print output
    print returnstring
    print cmd_string
else :
    print "ok"

if TESTSHARED > 0 :
    cmd = HOMEDIR + '/show_res'
    output = r"\d\d:\d\d:\d\d \d\d:00:00 \d+"
    cmd_string = cmd + ' --nodes' + ' --comment' + ' --start' + ' --end' + ' --readable' + " | ___GREP_PLACEHOLDER___ " + shortshared_id  + " | ___AWK_PLACEHOLDER___ '{print $5,$10,$12}'"
    returnstring = os.popen(cmd_string).read()
    search_list = re.findall(output, returnstring)
    print "# query for 8 resource, 12 hour, shortpool shared instances"
    if len(search_list) < 6 :
        print "not ok shared"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok shared"

#continue_var = raw_input('continue? ')

# create reservation, with earliest_start and resource_amount specified
cmd = HOMEDIR + '/create_res'
start_time = "%d" % (epoch_now + 3600)
end_time = "%d" % (epoch_now + Catalina.TEST_USERRES_END)
duration = '3600'
resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
job_restriction = "if input_tuple[0]['user'] == '%s' : result = 0" % username_string
node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
node_sort_policy_file = HOMEDIR + r"/last_available"
conflict_policy_file = HOMEDIR + r"/nonconflicting"
affinity_calculation = "if input_tuple[0]['user'] == '%s' : result = 10" % username_string
mode = 'real'
output = r"""reservation (?P<res_name>.*) created on %s nodes with start_time (?P<res_time>.*) for duration (?P<duration>.*)""" % Catalina.TEST_USERRES_AMOUNT
cmd_string = cmd + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --duration=' + duration + ' --resource_amount=' + resource_amount + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --conflict_policy_file=' + '"' + conflict_policy_file + '"' + ' --affinity_calculation=' + '"' + affinity_calculation + '"' + ' --mode=' + mode
print "# create reservation, with earliest_start and resource_amount specified"
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# 3 resource, 1 hour, earliest_start +1hr, latest_end +24hr"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    res_id = so.group('res_name')
    # don't add to test_res_id_list.  It gets deleted in the mod test.
    #test_res_id_list.append(res_id)
    print "res_id: (%s)" % so.group('res_name')
    res_start_time = so.group('res_time')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + res_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for 3 resource, 1 hour, earliest_start +1hr, latest_end +3hr"
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"

if TESTSHARED > 0 :
    # create --sharedmap reservation, with earliest_start and resource_amount specified
    cmd = HOMEDIR + '/create_res'
    start_time = "%d" % (epoch_now + 3600)
    end_time = "%d" % (epoch_now + Catalina.TEST_USERRES_END)
    duration = '3600'
    resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
    sharedmap = "1#type:node_shared#cpu:1+memory:1"
    job_restriction = "if input_tuple[0]['user'] == '%s' : result = 0" % username_string
    node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
    node_sort_policy_file = HOMEDIR + r"/last_available"
    conflict_policy_file = HOMEDIR + r"/nonconflicting"
    affinity_calculation = "if input_tuple[0]['user'] == '%s' : result = 10" % username_string
    mode = 'real'
    output = r"""reservation (?P<res_name>.*) created on %s nodes with start_time (?P<res_time>.*) for duration (?P<duration>.*)""" % Catalina.TEST_USERRES_AMOUNT
    cmd_string = cmd + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --duration=' + duration + ' --resource_amount=' + resource_amount + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --conflict_policy_file=' + '"' + conflict_policy_file + '"' + ' --affinity_calculation=' + '"' + affinity_calculation + '"' + ' --mode=' + mode + ' --sharedmap=' + sharedmap
    print "# create sharedmap reservation, with earliest_start and resource_amount specified"
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# 3 resource, 1 hour, earliest_start +1hr, latest_end +24hr sharedmap"
    if so == None :
        print "not ok shared"
        print "returnstring is (%s)" % returnstring
        print cmd_string
    else :
        print "ok shared"
        #print cmd_string
        shared_res_id = so.group('res_name')
        test_res_id_list.append(shared_res_id)
        print "shared_res_id: (%s)" % so.group('res_name')
        shared_res_start_time = so.group('res_time')
        output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
        cmd = HOMEDIR + '/show_res'
        cmd_string = cmd + ' --res=' + shared_res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + shared_res_id
        returnstring = os.popen(cmd_string).read()
        so = re.search(output, returnstring)
        print "# query for sharedmap resource, 1 hour, earliest_start +1hr, latest_end +3hr"
        if so == None :
            print "not ok shared"
            print output
            print returnstring
            print cmd_string
        else :
            print "ok shared"



# create user_set reservation
# (no test for --featurelist...)
cmd = HOMEDIR + '/user_set_res'
account = Catalina.TEST_ACCOUNT_STRING
resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
duration = '3600'
start_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 3600))
end_time = time.strftime ('%H:%M_%m/%d/%Y',time.localtime(epoch_now + Catalina.TEST_USERRES_END))
email = Catalina.TEST_EMAIL
output = r"""user reservation \((?P<res_name>\d+)\) created with %s nodes at (?P<readable_time>.*) \((?P<res_time>\S*) epoch\)""" % Catalina.TEST_USERRES_AMOUNT
cmd_string = cmd + ' --account=' + account + ' --nodes=' + resource_amount + ' --duration=' + duration + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --email=' + email
print "# create user reservation"
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# user reservation"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print "output is (%s)" % output
    print cmd_string
else :
    print "ok"
    ures_id = so.group('res_name')
    print "ures_id: (%s)" % so.group('res_name')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + ures_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + ures_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for user reservation"
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"
        print "canceling user_set reservation"
        # cancel user_set reservation
        cmd = HOMEDIR + '/user_cancel_res ' + ures_id
        returnstring = os.popen(cmd).read()
        ## check returnstring
        #output = r"Waiting.*lock\n.*lock\n.*lock\n"
        #so = re.search(output, returnstring)
        # check show_res
        cmd = HOMEDIR + '/show_res'
        cmd_string = cmd + ' | ___GREP_PLACEHOLDER___ ' + ures_id
        output = r""
        so = re.match(output, returnstring)
        if so != None :
            print "ok"
        else :
            print "not ok"
            print returnstring


# create user_set reservation
# test for return of user_bind_res and user_unbind_res
# submit a job for reservation binding
cmd = Catalina.SUBMITCMD
job = HOMEDIR + '/' + Catalina.TEST_JOB
# here, should have Makefile sed in the output pattern...
output = Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.SUBMIT_OUTPUT_PATTERN
cmd_string = cmd + ' ' + job
#print "cmd_string (%s)" % (cmd_string,)
#returnstring = os.popen(cmd_string).read()
stdout_string, rc, stderr_string = Catalina.timedrun(cmd_string,60)
returnstring = stdout_string + stderr_string
#print "stderr_string (%s)" % (stderr_string,)
#print "stdout_string (%s)" % (stdout_string,)
so = re.search(output, returnstring)
print "# submit a job"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    bindjob_id = so.group('job_id') + Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.JOBSUFFIX
    print "bindjob_id (%s)" % (bindjob_id,)

# update job info
cmd = HOMEDIR + '/update_jobs'
cmd_string = cmd
print "# update_jobs"
returnstring = os.popen(cmd_string).read()

cmd = HOMEDIR + '/user_set_res'
account = Catalina.TEST_ACCOUNT_STRING
resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
duration = '3600'
start_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 3600))
end_time = time.strftime ('%H:%M_%m/%d/%Y',time.localtime(epoch_now + Catalina.TEST_USERRES_END))
email = Catalina.TEST_EMAIL
output = r"""user reservation \((?P<res_name>\d+)\) created with %s nodes at (?P<readable_time>.*) \((?P<res_time>\S*) epoch\)""" % Catalina.TEST_USERRES_AMOUNT
cmd_string = cmd + ' --account=' + account + ' --nodes=' + resource_amount + ' --duration=' + duration + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --email=' + email + ' --comment=madebytestres9'
print "# create user reservation"
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# user reservation"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print "output is (%s)" % output
    print cmd_string
else :
    print "ok"
    bindures_id = so.group('res_name')
    print "bindures_id: (%s)" % so.group('res_name')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + bindures_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + bindures_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for user reservation"
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"
        print "user_bind_res"
        cmd = HOMEDIR + '/user_bind_res ' + bindures_id + ' ' + bindjob_id
        returnstring = os.popen(cmd).read()
        # check returnstring
        output = r"lock\njob_restriction.*\nReleased"
        so = re.search(output, returnstring)
        if so != None :
            print "ok"
        else :
            print "not ok"
            print returnstring

        print "user_bind_job"
        cmd = HOMEDIR + '/user_bind_job ' + bindjob_id + ' ' + bindures_id
        returnstring = os.popen(cmd).read()
        # check returnstring
        output = r"lock\nReceived.*\nReleased"
        so = re.search(output, returnstring)
        if so != None :
            print "ok"
        else :
            print "not ok"
            print returnstring

        print "user_unbind_job"
        cmd = HOMEDIR + '/user_unbind_job ' + bindjob_id + ' ' + bindures_id
        returnstring = os.popen(cmd).read()
        # check returnstring
        output = r"lock\nReceived.*\nReleased"
        so = re.search(output, returnstring)
        if so != None :
            print "ok"
        else :
            print "not ok"
            print returnstring

        print "user_unbind_res"
        cmd = HOMEDIR + '/user_unbind_res ' + bindures_id + ' ' + bindjob_id
        returnstring = os.popen(cmd).read()
        # check returnstring
        output = r"lock\njob_restriction.*\nReleased"
        so = re.search(output, returnstring)
        if so != None :
            print "ok"
        else :
            print "not ok"
            print returnstring

        print "canceling user_set reservation"
        # cancel user_set reservation
        cmd_string = HOMEDIR + '/user_cancel_res ' + bindures_id
        #returnstring = os.popen(cmd).read()
        stdout_string, rc, stderr_string = Catalina.timedrun(cmd_string,60)
        returnstring = stdout_string + stderr_string
        ## check returnstring
        #output = r"Waiting.*lock\n.*lock\n.*lock\n"
        #so = re.search(output, returnstring)
        # check show_res
        cmd = HOMEDIR + '/show_res'
        cmd_string = cmd + ' | ___GREP_PLACEHOLDER___ ' + bindures_id
        returnstring = os.popen(cmd_string).read()
        output = r""
        so = re.match(output, returnstring)
        if so != None :
            print "ok"
        else :
            print "not ok"
            print returnstring
# cancel the bound job
print "# cancel %s" % bindjob_id
cmd = Catalina.CANCELCMD
cmd_string = cmd + ' ' + bindjob_id
print cmd_string
returnstring = os.popen(cmd_string).read()
print returnstring


# test --featurelist need simulator for this test
#cmd = HOMEDIR + '/user_set_res'
#account = Catalina.TEST_ACCOUNT_STRING
#resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
#duration = '3600'
#start_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 3600))
#end_time = time.strftime ('%H:%M_%m/%d/%Y',time.localtime(epoch_now + Catalina.TEST_USERRES_END))
#email = Catalina.TEST_EMAIL
#output = r"""user reservation \((?P<res_name>\d+)\) created with %s nodes at (?P<readable_time>.*) \((?P<res_time>\S*) epoch\)""" % Catalina.TEST_USERRES_AMOUNT
#cmd_string = cmd + ' --account=' + account + ' --nodes=' + resource_amount + ' --duration=' + duration + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --email=' + email
#print "# create user reservation"
#returnstring = os.popen(cmd_string).read()
#so = re.search(output, returnstring)
#print "# user reservation"
#if so == None :
#    print "not ok"
#    print "returnstring is (%s)" % returnstring
#    print "output is (%s)" % output
#    print cmd_string
#else :
#    print "ok"
#    ures_id = so.group('res_name')
#    print "ures_id: (%s)" % so.group('res_name')
#    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
#    cmd = HOMEDIR + '/show_res'
#    cmd_string = cmd + ' --res=' + ures_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + ures_id
#    returnstring = os.popen(cmd_string).read()
#    so = re.search(output, returnstring)
#    print "# query for user reservation"
#    if so == None :
#        print "not ok"
#        print output
#        print returnstring
#        print cmd_string
#    else :
#        print "ok"
#        print "canceling user_set reservation"
#        # cancel user_set reservation
#        cmd = HOMEDIR + '/user_cancel_res ' + ures_id
#        returnstring = os.popen(cmd).read()
#        # check returnstring
#        output = r"Waiting.*lock\n.*lock\n.*lock\n"
#        so = re.search(output, returnstring)
#        if so != None :
#            print "ok"
#        else :
#            print "not ok"
#            print returnstring

if TESTSHARED > 0 :
    # create user_set reservation with sharedmap
    cmd = HOMEDIR + '/user_set_res'
    account = Catalina.TEST_ACCOUNT_STRING
    resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
    sharedmap = '1#type:node_shared#cpu:1+memory:1'
    duration = '3600'
    start_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 3600))
    end_time = time.strftime ('%H:%M_%m/%d/%Y',time.localtime(epoch_now + Catalina.TEST_USERRES_END))
    email = Catalina.TEST_EMAIL
    output = r"""user reservation \((?P<res_name>\d+)\) created with %s nodes at (?P<readable_time>.*) \((?P<res_time>\S*) epoch\)""" % Catalina.TEST_USERRES_AMOUNT
    cmd_string = cmd + ' --account=' + account + ' --nodes=' + resource_amount + ' --duration=' + duration + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --email=' + email + ' --sharedmap=' + sharedmap
    print "# create user reservation with sharedmap"
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# user reservation with sharedmap"
    if so == None :
        print "not ok shared"
        print "returnstring is (%s)" % returnstring
        print "output is (%s)" % output
        print cmd_string
    else :
        print "ok shared"
        ures_id = so.group('res_name')
        print "ures_id: (%s)" % so.group('res_name')
        output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
        cmd = HOMEDIR + '/show_res'
        cmd_string = cmd + ' --res=' + ures_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + ures_id
        returnstring = os.popen(cmd_string).read()
        so = re.search(output, returnstring)
        print "# query for user reservation with sharedmap"
        if so == None :
            print "not ok shared"
            print output
            print returnstring
            print cmd_string
        else :
            print "ok shared"
            print "canceling user_set reservation"
            # cancel user_set reservation
            cmd = HOMEDIR + '/user_cancel_res ' + ures_id
            returnstring = os.popen(cmd).read()
            ## check returnstring
            #output = r"Waiting.*lock\n.*lock\n.*lock\n"
            #so = re.search(output, returnstring)
            # check show_res
            cmd = HOMEDIR + '/show_res'
            cmd_string = cmd + ' | ___GREP_PLACEHOLDER___ ' + ures_id
            returnstring = os.popen(cmd).read()
            output = r""
            so = re.match(output, returnstring)
            if so != None :
                print "ok shared"
            else :
                print "not ok shared"
                print returnstring

# create reservation, with earliest_start and resource_amount specified,
# --ignore=ALL
cmd = HOMEDIR + '/set_res'
start_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 3600))
end_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 3600 + 3600))
resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
mode = 'real'
output = r"""reservation (?P<res_name>.*) created on %s nodes with start_time (?P<res_time>.*) for duration (?P<duration>.*)""" % Catalina.TEST_USERRES_AMOUNT
cmd_string = cmd + ' --start=' + start_time + ' --end=' + end_time + ' --resource_amount=' + resource_amount + ' --ignore=ALL' + ' --mode=' + mode
print "# create reservation, with --ignore=ALL specified"
firstreturnstring = os.popen(cmd_string).read()
firstigso = re.search(output, firstreturnstring)
if firstigso == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
    continue_var = raw_input('continue? ')
firstigres_id = firstigso.group('res_name')
returnstring = os.popen(cmd_string).read()
igso = re.search(output, returnstring)
print "# 3 resource, 1 hour, earliest_start +1hr, latest_end +24hr, --ignore=ALL"
if igso == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    igres_id = igso.group('res_name')
    print "igres_id: (%s)" % igso.group('res_name')
    igres_start_time = igso.group('res_time')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + igres_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + igres_id
    resreturnstring = os.popen(cmd_string).read()
    resso = re.search(output, returnstring)
    print "# show_res query for --ignore=ALL"
    if resso == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"
        cmd = HOMEDIR + '/cancel_res'
        cmd_string = cmd + ' --res=' + igres_id + ',' + firstigres_id
        returnstring = os.popen(cmd_string).read()
        output = r""
        cmd = HOMEDIR + '/show_res'
        cmd_string = cmd + ' | ___GREP_PLACEHOLDER___ ' + ' -e '+ igres_id + ' -e ' + firstigres_id
        returnstring = os.popen(cmd_string).read()
        so = re.match(output, returnstring, re.MULTILINE)
        print "# cancel two reservations"
        if returnstring == None :
            print "not ok"
            print output
            print returnstring
            print cmd_string
        else :
            print "ok"

if TESTSHARED > 0 :
    # create reservation, with earliest_start and resource_amount specified,
    # --ppn (procs per node), --mpn (MB per node)
    cmd = HOMEDIR + '/set_res'
    start_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 14 * 24 * 3600))
    end_time = time.strftime('%H:%M_%m/%d/%Y',time.localtime(epoch_now + 14 * 24 * 3600 + 3600))
    resource_amount = "%s" % Catalina.TEST_USERRES_AMOUNT
    mode = 'real'
    output = r"""reservation (?P<res_name>.*) created on %s nodes with start_time (?P<res_time>.*) for duration (?P<duration>.*)""" % Catalina.TEST_USERRES_AMOUNT
    cmd_string = cmd + ' --start=' + start_time + ' --end=' + end_time + ' --resource_amount=' + resource_amount + ' --ppn=1 --mpn=1' + ' --mode=' + mode
    print "# create --ppn --mpn reservation"
    firstreturnstring = os.popen(cmd_string).read()
    ppnso = re.search(output, firstreturnstring)
    print "# %s resource, 1 hour, earliest_start +1hr, latest_end +24hr, --ppn=1 --mpn=1" % (resource_amount,)
    if ppnso == None :
        print "not ok shared"
        print "firstreturnstring is (%s)" % firstreturnstring
        print cmd_string
        #continue_var = raw_input('continue? ')
    else :
        print "ok shared"
        ppnres_id = ppnso.group('res_name')
        test_res_id_list.append(ppnres_id)
        print "ppnres_id: (%s)" % ppnso.group('res_name')
        ppnres_start_time = ppnso.group('res_time')

# modify the previous reservation, increasing resource_amount
cmd = HOMEDIR + '/create_res --mode=real --del_res_id=' + res_id + ' --copy_res_id=' + res_id
cmd_string = cmd + " --resource_amount=%s" % Catalina.TEST_USERRES_MOD_AMOUNT
output = r"""reservation (?P<res_name>.+) created on %s nodes with start_time (?P<res_time>.+) for duration (?P<duration>.+)""" % Catalina.TEST_USERRES_MOD_AMOUNT
print "# modify reservation, with earliest_start and resource_amount specified"
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# modified 4 resource, 1 hour, earliest_start +1hr, latest_end +24hr"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    res_id = so.group('res_name')
    test_res_id_list.append(res_id)
    print "res_id: (%s)" % so.group('res_name')
    res_start_time = so.group('res_time')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + res_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for modified 4 resource, 1 hour, earliest_start +1hr, latest_end +3hr"
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"

# create reservation, with earliest_start and resource_amount specified
# for use with the binding test later on.
cmd = HOMEDIR + '/create_res'
start_time = "%d" % (epoch_now + 1814400)
end_time = "%d" % (epoch_now + 1900800)
duration = '14400'
resource_amount = "%s" % Catalina.TEST_BINDING_AMOUNT
job_restriction = r"if input_tuple[0]['user'] == '%s' : result = 0" % username_string
node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
node_sort_policy_file = HOMEDIR + r"/last_available"
conflict_policy_file = HOMEDIR + r"/nonconflicting"
mode = 'real'
output = r"""reservation (?P<res_name>.+) created on \d+ nodes with start_time (?P<res_time>.+) for duration (?P<duration>.+)"""
cmd_string = cmd + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --duration=' + duration + ' --resource_amount=' + resource_amount + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --conflict_policy_file=' + '"' + conflict_policy_file + '"' + ' --mode=' + mode
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# for bind test, 2 resource, 4 hour, earliest_start +21days, latest_end +22days"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
    sys.exit(1)
else :
    print "ok"
    #print cmd_string
    #continue_var = raw_input('continue? ')
    res_id = so.group('res_name')
    test_res_id_list.append(res_id)
    print "res_id: (%s)" % so.group('res_name')
    bind_res_id = res_id
    res_start_time = so.group('res_time')
    bind_res_start_time = so.group('res_time')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + res_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for 3 resource, 1 hour, earliest_start +1hr, latest_end +3hr"
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"

# create reservation with earliest_start and no resource_amount
cmd = HOMEDIR + '/create_res'
start_time = "%d" % (epoch_now + 3600)
end_time = "%d" % (epoch_now + 77760000)
duration = '3600'
job_restriction = r"if input_tuple[0]['user'] == '%s' : result = 0" % username_string
node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
node_sort_policy_file = HOMEDIR + r"/last_available"
conflict_policy_file = HOMEDIR + r"/nonconflicting"
mode = 'real'
output = r"""reservation (?P<res_name>.+) created on \d+ nodes with start_time (?P<res_time>\d+)"""
cmd_string = cmd + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --duration=' + duration + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --conflict_policy_file=' + '"' + conflict_policy_file + '"' + ' --mode=' + mode
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# Unlimited resource, 1 hour, earliest_start +1hr, latest_end +24hr"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    res_id = so.group('res_name')
    test_res_id_list.append(res_id)
    print "res_id: (%s)" % so.group('res_name')
    res_start_time = so.group('res_time')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + res_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for Unlimited resource, 1 hour, earliest_start +1hr, latest_end +24hr"
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"

#continue_var = raw_input('continue? ')

if TESTSHARED > 0 :
    # create sharedmap reservation with earliest_start and no resource_amount
    cmd = HOMEDIR + '/create_res'
    start_time = "%d" % (epoch_now + 3600)
    end_time = "%d" % (epoch_now + 77760000)
    duration = '3600'
    job_restriction = r"if input_tuple[0]['user'] == '%s' : result = 0" % username_string
    node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
    node_sort_policy_file = HOMEDIR + r"/last_available"
    conflict_policy_file = HOMEDIR + r"/nonconflicting"
    mode = 'real'
    sharedmap = "1#type:node_shared#cpu:1+memory:1"
    output = r"""reservation (?P<res_name>.+) created on \d+ nodes with start_time (?P<res_time>\d+)"""
    cmd_string = cmd + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --duration=' + duration + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --conflict_policy_file=' + '"' + conflict_policy_file + '"' + ' --mode=' + mode + ' --sharedmap=' + sharedmap
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# Unlimited resource, 1 hour, earliest_start +1hr, latest_end +24hr, sharedmap"
    if so == None :
        print "not ok shared"
        print "returnstring is (%s)" % returnstring
        print cmd_string
    else :
        print "ok shared"
        res_id = so.group('res_name')
        test_res_id_list.append(res_id)
        print "res_id: (%s)" % so.group('res_name')
        res_start_time = so.group('res_time')
        output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
        cmd = HOMEDIR + '/show_res'
        cmd_string = cmd + ' --res=' + res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + res_id
        returnstring = os.popen(cmd_string).read()
        so = re.search(output, returnstring)
        print "# query for Unlimited resource, 1 hour, earliest_start +1hr, latest_end +24hr sharedmap"
        if so == None :
            print "not ok shared"
            print output
            print returnstring
            print cmd_string
        else :
            print "ok shared"

# create lookahead reservation with earliest_start and no resource_amount
cmd = HOMEDIR + '/create_res'
start_time = "%d" % (epoch_now + 3600)
end_time = "%d" % (epoch_now + 77760000)
duration = '3600'
job_restriction = r"if input_tuple[0]['user'] == '%s' : result = 0" % username_string
node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
node_sort_policy_file = HOMEDIR + r"/last_available"
conflict_policy_file = HOMEDIR + r"/nonconflicting"
mode = 'lookahead'
output = r"""reservation possible on \d+ nodes with start_time (?P<res_time>.*) for duration (?P<duration>.*)"""
cmd_string = cmd + ' --earliest_start=' + start_time + ' --latest_end=' + end_time + ' --duration=' + duration + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --conflict_policy_file=' + '"' + conflict_policy_file + '"' + ' --mode=' + mode
returnstring = os.popen(cmd_string).read()
print "# Lookahead unlimited resource, 1 hour, earliest_start +1hr, latest_end +3hr"
so = re.search(output, returnstring)
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
    continue_var = raw_input('continue? ')
else :
    print "ok"
    res_start_time = so.group('res_time')

# create reservation with no earliest_start and resource_amount
cmd = HOMEDIR + '/create_res'
start_time = "%d" % (epoch_now + 3600)
end_time = "%d" % (epoch_now + 1209600)
resource_amount = "%s" % Catalina.TEST_NOEARLIEST_AMOUNT
duration = '3600'
job_restriction = r"if input_tuple[0]['user'] == '%s' : result = 0" % username_string
node_restriction_file = HOMEDIR + r"/node_restriction_file.___RESOURCEMANAGER_PLACEHOLDER___"
node_sort_policy_file = HOMEDIR + r"/last_available"
conflict_policy_file = HOMEDIR + r"/nonconflicting"
mode = 'real'
output = r"""reservation (?P<res_name>.+) created on \d+ nodes with start_time (?P<res_time>.+) for duration (?P<duration>.+)"""
cmd_string = cmd + ' --resource_amount=' + resource_amount + ' --latest_end=' + end_time + ' --duration=' + duration + ' --job_restriction=' + '"' + job_restriction + '"' + ' --node_restriction_file=' + '"' + node_restriction_file + '"' + ' --node_sort_policy_file=' + '"' + node_sort_policy_file + '"' + ' --conflict_policy_file=' + '"' + conflict_policy_file + '"' + ' --mode=' + mode
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# 3 resource, 1 hour, No earliest_start, latest_end +24hr"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    res_id = so.group('res_name')
    test_res_id_list.append(res_id)
    print "res_id: (%s)" % so.group('res_name')
    res_start_time = so.group('res_time')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + res_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for 3 resource, 1 hour, No earliest_start, latest_end +3hr"
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"
        res_start_time = so.group('res_time')

# create a system reservation for 30 days from now, duration 8 hours
offset = 30 * 24 * 3600
duration = 8 * 3600
output = r"""reservation (?P<res_name>.+) created on \d+ nodes with start_time (?P<res_time>.+) for duration (?P<duration>.+)"""
cmd_string = HOMEDIR + '/create_system_res' + " --offset=%d --duration=%d" %\
  (offset, duration)
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# All resource, 30-day offset, 8-hour duration system res"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    res_id = so.group('res_name')
    test_res_id_list.append(res_id)
    print "res_id: (%s)" % so.group('res_name')
    res_start_time = so.group('res_time')
    output = r"\S+\s+(?P<res_time>\d+\.?\d*)"
    cmd = HOMEDIR + '/show_res'
    cmd_string = cmd + ' --res=' + res_id + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + res_id
    returnstring = os.popen(cmd_string).read()
    so = re.search(output, returnstring)
    print "# query for All resource, 30 day offset, 8 hour duration, system res "
    if so == None :
        print "not ok"
        print output
        print returnstring
        print cmd_string
    else :
        print "ok"
        res_start_time = so.group('res_time')

# submit a job for reservation binding
cmd = Catalina.SUBMITCMD
job = HOMEDIR + '/' + Catalina.TEST_JOB
# here, should have Makefile sed in the output pattern...
output = Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.SUBMIT_OUTPUT_PATTERN
cmd_string = cmd + ' ' + job
#returnstring = os.popen(cmd_string).read()
stdout_string, rc, stderr_string = Catalina.timedrun(cmd_string,60)
returnstring = stdout_string + stderr_string
so = re.search(output, returnstring)
print "# submit a job"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    job_id = so.group('job_id') + Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.JOBSUFFIX

# submit a job for test without reservation binding
cmd = Catalina.SUBMITCMD
job = HOMEDIR + '/' + Catalina.TEST_JOB
output = Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.SUBMIT_OUTPUT_PATTERN
#cmd_string = cmd + ' ' + job
#returnstring = os.popen(cmd_string).read()
stdout_string, rc, stderr_string = Catalina.timedrun(cmd_string,60)
returnstring = stdout_string + stderr_string
so = re.search(output, returnstring)
print "# submit a job"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    unbound_job_id = so.group('job_id') + Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.JOBSUFFIX

# submit a job for run_at_risk test
cmd = Catalina.SUBMITCMD
job = HOMEDIR + '/' + Catalina.TEST_JOB_RUN_AT_RISK
output = Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.SUBMIT_OUTPUT_PATTERN
#cmd_string = cmd + ' ' + job
#returnstring = os.popen(cmd_string).read()
stdout_string, rc, stderr_string = Catalina.timedrun(cmd_string,60)
returnstring = stdout_string + stderr_string
so = re.search(output, returnstring)
print "# submit a run_at_risk job"
if so == None :
    print "not ok"
    print "returnstring is (%s)" % returnstring
    print cmd_string
else :
    print "ok"
    run_at_risk_job_id = so.group('job_id') + Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.JOBSUFFIX

# move old stuff
cmd = HOMEDIR + '/move_old_stuff'
cmd_string = cmd
print "# move_old_stuff"
returnstring = os.popen(cmd_string).read()

# update job info
cmd = HOMEDIR + '/update_jobs'
cmd_string = cmd
print "# update_jobs"
returnstring = os.popen(cmd_string).read()

# set system priority
print "set system priority"
cmd = HOMEDIR + '/update_system_priority'
cmd_string = cmd + ' --job=' + job_id + ' --system_priority=92093'
syspri_jobid = job_id
returnstring = os.popen(cmd_string).read()

# update job priorities
cmd = HOMEDIR + '/update_job_priorities'
cmd_string = cmd
print "# update_job_priorities"
returnstring = os.popen(cmd_string).read()

# bind a job to a reservation
job_step_name = job_id
cmd = HOMEDIR + '/bind_job_to_res'
cmd_string = cmd + ' --res=' + bind_res_id + ' --job=' + job_step_name
print "# bind_job_to_res"
returnstring = os.popen(cmd_string).read()

# check for QOS from comment
#cmd = HOMEDIR + '/query_jobs'
cmd = HOMEDIR + '/show_q --full'
cmd_string = cmd + ' | ___GREP_PLACEHOLDER___ ' + job_step_name
returnstring = os.popen(cmd_string).read()
output = r"\s+2\s+"
mo = re.search(output, returnstring)
print "# check for QOS from comment"
if mo == None :
    print "not ok"
    print output
    print returnstring
    print cmd_string
else :
    print "ok"

# set QOS to 8
cmd = HOMEDIR + '/update_qos'
cmd_string = cmd + ' --job=' + job_step_name + ' --QOS=8'
returnstring = os.popen(cmd_string).read()

# check for QOS from update_qos
cmd = HOMEDIR + '/show_q'
cmd_string = cmd + ' --full --qos' + ' | ___GREP_PLACEHOLDER___ ' + job_step_name
returnstring = os.popen(cmd_string).read()
output = r"\s+8\s+"
mo = re.search(output, returnstring)
print "# check for QOS from update_qos"
if mo == None :
    print "not ok"
    print output
    print returnstring
    print cmd_string
else :
    print "ok"

# check for local_admin_priority_string from comment 92091
jobs_db_handle = Catalina.open_ro_db(Catalina.JOBS_DB, 'read')
job_la = Catalina.get_object(job_step_name, jobs_db_handle)
print "# check for local_admin_priority_string from comment"
if job_la['local_admin_priority_string'] != '92091' :
    print "not ok"
    print job_la['local_admin_priority_string']
else :
    print "ok"
Catalina.close_ro_db(jobs_db_handle)

# set local_admin_priority_string to 92094
cmd = HOMEDIR + '/update_local_admin'
cmd_string = cmd + ' --job_step_id=' + job_step_name + ' --la_pri=92094'
returnstring = os.popen(cmd_string).read()

# check for local_admin_priority_string from update_local_admin
jobs_db_handle = Catalina.open_ro_db(Catalina.JOBS_DB, 'read')
job_la = Catalina.get_object(job_step_name, jobs_db_handle)
print "# check for local_admin_priority_string from update_local_admin"
if job_la['local_admin_priority_string'] != '92094' :
    print "not ok"
    print job_la['local_admin_priority_string']
    print cmd_string
else :
    print "ok"
Catalina.close_ro_db(jobs_db_handle)

# check for local_user_priority_string from comment -100
jobs_db_handle = Catalina.open_ro_db(Catalina.JOBS_DB, 'read')
job_la = Catalina.get_object(job_step_name, jobs_db_handle)
print "# check for local_user_priority_string from comment"
if job_la['local_user_priority_string'] != '-100' :
    print "not ok"
    print job_la['local_user_priority_string']
else :
    print "ok"
Catalina.close_ro_db(jobs_db_handle)

# unbind jobs from testholder comment reservation
cmd = HOMEDIR + '/unbind_job_from_res'
cmd_string = cmd + ' --res=testholder' + ' --job=' + job_step_name
returnstring = os.popen(cmd_string).read()
cmd_string = cmd + ' --res=testholder' + ' --job=' + unbound_job_id
returnstring = os.popen(cmd_string).read()
cmd_string = cmd + ' --res=testholder' + ' --job=' + run_at_risk_job_id
returnstring = os.popen(cmd_string).read()

# schedule jobs
#print "# " + HOMEDIR + "/schedule_jobs"
#cmd = HOMEDIR + '/schedule_jobs'
#cmd_string = cmd
#sj_returnstring = os.popen(cmd_string).read()

#continue_var = raw_input('continue? ')

print "# " + HOMEDIR + "/start.ksh"
cmd = HOMEDIR + '/start.ksh'
cmd_string = cmd
sj_returnstring = os.popen(cmd_string).read()
time.sleep(15)
print "# " + HOMEDIR + "/stop.py"
cmd = HOMEDIR + '/stop.py'
cmd_string = cmd
returnstring = os.popen(cmd_string).read()

# check show_bf command
#returnstring = os.popen(HOMEDIR + '/show_bf | ___GREP_PLACEHOLDER___ pportunit').read()
cmd_string = HOMEDIR + '/show_bf | ___GREP_PLACEHOLDER___ pportunit'
stdout_string, rc, stderr_string = Catalina.timedrun(cmd_string,60)
returnstring = stdout_string + stderr_string
print "# check show_bf command"
if returnstring != '' :
    print "ok"
    print returnstring
else :
    print "not ok"
    print returnstring

# check show_guesstimate command
cmd = HOMEDIR + '/show_guesstimate --account=' + Catalina.TEST_ACCOUNT_STRING + ' --nodes=' + `Catalina.TEST_USERRES_AMOUNT` + ' --local_admin=100000000 --qos=2 | ___GREP_PLACEHOLDER___ guesstimated'
returnstring = os.popen(cmd).read()
print "# check show_guesstimate command"
if returnstring != '' :
    print "ok"
else :
    print "not ok"
    print returnstring

# check system priority
returnstring = os.popen(HOMEDIR + '/query_priority | ___GREP_PLACEHOLDER___ "* " | ___GREP_PLACEHOLDER___ ' + syspri_jobid).read()
print "# check system priority"
if returnstring != '' :
    print "ok"
else :
    print "not ok"
    os.system(HOMEDIR + '/show_q')
    print returnstring

# check for local_admin_float from update_local_admin
jobs_db_handle = Catalina.open_ro_db(Catalina.JOBS_DB, 'read')
job_la = Catalina.get_object(job_step_name, jobs_db_handle)
print "# check for local_admin_float from update_local_admin"
if job_la['priority_element_dict']['local_admin_float'] != 92094.0 :
    print "not ok"
    print job_la['priority_element_dict']['local_admin_float']
else :
    print "ok"
Catalina.close_ro_db(jobs_db_handle)

# check for local_user_float from comment
jobs_db_handle = Catalina.open_ro_db(Catalina.JOBS_DB, 'read')
job_la = Catalina.get_object(job_step_name, jobs_db_handle)
print "# check for local_user_float from comment"
if job_la['priority_element_dict']['local_user_float'] != -100.0 :
    print "not ok"
    print job_la['priority_element_dict']['local_user_float']
else :
    print "ok"
Catalina.close_ro_db(jobs_db_handle)

output = r"\S+\s+(?P<runID>.*)"
cmd = HOMEDIR + '/show_res'
cmd_string = cmd + ' --job' + ' | ___GREP_PLACEHOLDER___ ' + job_id
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# check reservation creation for bound job (%s)" % job_id
if so == None :
    print "not ok"
    print output
    print returnstring
    print cmd_string
    sj_out = open('sj_out', 'w')
    sj_out.write(sj_returnstring)
else :
    print "ok"
    runID = so.group('runID')

output = r"\S+\s+(?P<runID>.*)"
cmd = HOMEDIR + '/show_res'
cmd_string = cmd + ' --job' + ' | ___GREP_PLACEHOLDER___ ' + unbound_job_id
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# check reservation creation for unbound job (%s)" % unbound_job_id
if so == None :
    print "not ok"
    print output
    print returnstring
    print cmd_string
    unbound_sj_out = open(HOMEDIR + '/unbound_sj_out', 'w')
    unbound_sj_out.write(sj_returnstring)
else :
    print "ok"
    runID = so.group('runID')

output = r"\S+\s+(?P<runID>.*)"
cmd = HOMEDIR + '/show_res'
cmd_string = cmd + ' --job' + ' | ___GREP_PLACEHOLDER___ ' + run_at_risk_job_id
returnstring = os.popen(cmd_string).read()
so = re.search(output, returnstring)
print "# check reservation creation for run_at_risk job (%s)" % run_at_risk_job_id
if so == None :
    print "not ok"
    print output
    print returnstring
    print cmd_string
    run_at_risk_sj_out = open(HOMEDIR + '/run_at_risk_sj_out', 'w')
    run_at_risk_sj_out.write(sj_returnstring)
    continue_var = raw_input('continue? ')
else :
    print "ok"
    run_at_risk_runID = so.group('runID')

# query priority
returnstring = os.popen(HOMEDIR + '/query_priority').read()
if returnstring != '' :
    print "ok"
else :
    print "not ok"

# check for reservation_binding in job
jobs_db_handle = Catalina.open_ro_db(Catalina.JOBS_DB, 'read')
jobs_dict = jobs_db_handle[0]
print "# reservation_binding (%s) in job (%s)" % (bind_res_id, job_step_name)
if not bind_res_id in jobs_dict[job_step_name]['reservation_binding'] :
    print "not ok"
    print "(%s)" % returnstring
    print cmd_string
else :
    print "ok"
Catalina.close_ro_db(jobs_db_handle)

# check for same start_time for bound reservation and job
output = r"\S+\s+(?P<res_time>\S+)\s+(?P<runID>.*)$"
cmd = HOMEDIR + '/show_res'
cmd_string = cmd + ' --job' + ' --start' + ' | ___GREP_PLACEHOLDER___ ' + job_step_name
#returnstring = os.popen(cmd_string).read()
returnlines = os.popen(cmd_string).readlines()
#so = re.search(output, returnstring)
print "# start_time (%s) check for reservation_binding (%s) in job (%s)" % ( bind_res_start_time, bind_res_id, job_step_name)
res_time_found = 0
for returnline in returnlines:
    so = re.match(output, returnline)
    if so == None:
        continue
    else:
        if so.group('res_time') == bind_res_start_time:
            res_time_found = 1
#if so == None or so.group('res_time') != bind_res_start_time :
if res_time_found == 0:
    print "not ok"
    print output
    print returnstring
    print bind_res_start_time
    print so.group('res_time')
    print cmd_string
    continue_var = raw_input('continue? ')
else :
    print "ok"

# unbind job from reservation
cmd = HOMEDIR + '/unbind_job_from_res'
cmd_string = cmd + ' --res=' + bind_res_id + ' --job=' + job_step_name
print cmd_string
returnstring = os.popen(cmd_string).read()

# check for absent reservation_binding in job
jobs_db_handle = Catalina.open_ro_db(Catalina.JOBS_DB, 'read')
jobs_dict = jobs_db_handle[0]
print "# reservation_binding (%s) in job (%s)" % (bind_res_id, job_step_name)
if bind_res_id in jobs_dict[job_step_name]['reservation_binding'] :
    print "not ok"
    print "(%s)" % returnstring
    print cmd_string
else :
    print "ok"
Catalina.close_ro_db(jobs_db_handle)

# cancel the bound job
print "# cancel %s" % job_step_name
cmd = Catalina.CANCELCMD
cmd_string = cmd + ' ' + job_step_name
print cmd_string
returnstring = os.popen(cmd_string).read()
print returnstring

# cancel the unbound job
print "# cancel %s" % unbound_job_id
cmd = Catalina.CANCELCMD
cmd_string = cmd + ' ' + unbound_job_id
print cmd_string
returnstring = os.popen(cmd_string).read()
print returnstring

# cancel the run_at_risk job
print "# cancel %s" % run_at_risk_job_id
cmd = Catalina.CANCELCMD
cmd_string = cmd + ' ' + run_at_risk_job_id
print cmd_string
returnstring = os.popen(cmd_string).read()
print returnstring

# ./cancel_standing_res the test standing reservations
for res_id in test_standing_res_id_list :
    raw_res_ids = os.popen(HOMEDIR + '/show_res --full --comment | ___GREP_PLACEHOLDER___ standing | ___GREP_PLACEHOLDER___ ' + res_id + " | ___AWK_PLACEHOLDER___ '{print $1}'").read()
    #print "raw_res_ids (%s)" % (raw_res_ids,)
    stripped_res_ids = string.strip(raw_res_ids)
    #print "stripped_res_ids (%s)" % (stripped_res_ids,)
    res_ids = string.split(stripped_res_ids, '\n')
    #print "res_ids (%s)" % (res_ids,)
    for id in res_ids :
        if id != '' :
            print "# cancel_res --res=%s" % id
            cmd = HOMEDIR + '/cancel_res'
            cmd_string = cmd + ' --res=' + id
            returnstring = os.popen(cmd_string).read()
    print "# cancel_standing_res --res=%s" % res_id
    cmd = './cancel_standing_res'
    cmd_string = cmd + " --res=%s" % res_id
    returnstring = os.popen(cmd_string).read()

# update standing reservation instances
cmd = HOMEDIR + '/update_standing_reservations'
cmd_string = cmd
print "# update_standing_reservations"
returnstring = os.popen(cmd_string).read()

# ./cancel_res the test reservations
for res_id in test_res_id_list :
    print "# cancel_res --res=%s" % res_id
    cmd = './cancel_res'
    cmd_string = cmd + " --res=%s" % res_id
    returnstring = os.popen(cmd_string).read()

# check for excess overlapping reservations
cmd = HOMEDIR + '/show_res'
cmd_string = cmd + ' --overlap | ___GREP_PLACEHOLDER___ res_id' + " | ___WC_PLACEHOLDER___ -l | ___AWK_PLACEHOLDER___ '{print $1}'"
raw_returnstring = os.popen(cmd_string).read()
string.strip(raw_returnstring)
returnstring = raw_returnstring[:-1]
print "# Excess overlapping reservations"
if string.atoi(returnstring) > 8 :
    print "not ok"
    print "(%s)" % returnstring
    print cmd_string
else :
    print "ok"
