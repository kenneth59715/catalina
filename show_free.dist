#!___PYTHON_PATH_PLACEHOLDER___
# ./show_free [--user=<username>] [--account=<account>] [--group=<group>] [--class=<job class>] [--QOS=<QOS>] [--duration=<wallclocklimit>]
#./show_free --class=normal32 --runID=fakejob --debug --requirementsmap='Feature == "CPUs32"'
# create a fake job with the requested characteristics
# create ignore list for reservations in which the job can run
# using the ignore list, create a reservation with earliest_start now, no resource amount specified,
# if start_time_float is Now, report the number of resources found, else report none available now

import sys
sys.path.append('___HOMEDIR_PLACEHOLDER___')
import getopt
import fcntl
import string
import Catalina
import Catalina____RESOURCEMANAGER_PLACEHOLDER___
import time
import getpass

def by_end_time(first, second) :
    if first[1] < second[1] :
        return -1
    if first[1] == second[1] :
        return 0
    if first[1] > second[1] :
        return 1

def file_to_string(filename) :
    input = open(filename, 'r')
    filestring = input.read()
    input.close()
    return filestring

usage_string = \
"""
Usage: show_free [--user=<username>]
               [--?]
               [--help]
               [--account=<account>]
               [--group=<group>]
               [--class=<job class>]
               [--qos=<QOS>]
               [--duration=<wallclocklimit>]
               [--runID=<job name>]
               [--requirementsmap=<job requirements>]
               [--Adapter=<job adapter requirement>]
               [--initiatormap=<job task map>]
               [--debug]"""

options = [ 'user=',
            '?',
            'help',
            'debug',
            'runID=',
            'account=',
            'group=',
            'class=',
            'requirementsmap=',
            'Adapter=',
            'initiatormap=',
            'qos=',
            'duration='
           ]
args = sys.argv[1:]
argdict = {}
optlist, lineargs = getopt.getopt(args, '', options)
for pair in optlist:
        argdict[pair[0]] = pair[1]

if argdict.has_key('--?') or argdict.has_key('--help') :
    print usage_string
    sys.exit(0)

node_restriction_code = Catalina.NODERESTCODE
conflict_policy = None

RESOURCES_DB = 'resource'
RESERVATIONS_DB = 'reservations'
JOBS_DB = 'jobs'

# open the reservations file for read, set exclusive lock
jobs_db_handle = Catalina.open_ro_db(JOBS_DB, 'read')
reservations_db_handle = Catalina.open_ro_db(RESERVATIONS_DB, 'read')
resources_db_handle = Catalina.open_ro_db(RESOURCES_DB, 'read')

if argdict.has_key('--runID') :
    job_name = argdict['--runID']
else :
    job_name = None
fake_job = Catalina.initialize_job_step(job_name)
if argdict.has_key('--user') :
    fake_job['user'] = argdict['--user']
else :
    fake_job['user'] = getpass.getuser()
if argdict.has_key('--account') :
    fake_job['account'] = argdict['--account']
else :
    fake_job['account'] = None
if argdict.has_key('--group') :
    fake_job['group'] = argdict['--group']
else :
    fake_job['group'] = None
if argdict.has_key('--class') :
    fake_job['job_class'] = argdict['--class']
else :
    #print "Defaulting job class to '%s'" % Catalina.DEFAULT_JOB_CLASS
    #fake_job['job_class'] = Catalina.DEFAULT_JOB_CLASS
    fake_job['job_class'] = ""
#print "fake_job['job_class'] (%s)" % (fake_job['job_class'],)
#print "argdict['--class'] (%s)" % (argdict['--class'],)
if argdict.has_key('--qos') :
    fake_job['QOS'] = argdict['--qos']
else :
    fake_job['QOS'] = '0'
if argdict.has_key('--Adapter') :
    fake_job['adapter'] = argdict['--Adapter']
else :
    fake_job['adapter'] = ''
if argdict.has_key('--initiatormap') :
    fake_job['initiatormap'] = argdict['--initiatormap']
    fake_job['resourcemap_list'] = string.split(argdict['--initiatormap'], '+')
else :
    fake_job['initiatormap'] = '1'
    fake_job['resourcemap_list'] = ['1',]
if argdict.has_key('--requirementsmap') :
    fake_job['requirementsmap'] = argdict['--requirementsmap']
    print "argdict['--requirementsmap'] (%s)" % (argdict['--requirementsmap'],)
else :
    fake_job['requirementsmap'] = ['',]
if argdict.has_key('--duration') :
    fake_job['wall_clock_limit'] = string.atof(argdict['--duration'])
else :
    print "Defaulting job duration to 3600"
    fake_job['wall_clock_limit'] = 3600.0
if argdict.has_key('--debug') :
    Catalina.DEBUG = 'TRUE'
    Catalina.DEBUGJOB = job_name

res_name = Catalina.get_new_db_key(reservations_db_handle)
fake_res = Catalina.initialize_reservation(res_name)
fake_res['earliest_start_float'] = Catalina.Now_float
fake_res['duration_float'] = 1.0
fake_res['conflict_policy'] = conflict_policy

# get all existing reservations
existing_reservations = Catalina.get_object_list(reservations_db_handle)

#nonjob_reservations = filter( lambda reservation : reservation['purpose_type_string'] != 'job', existing_reservations )
#existing_reservations = nonjob_reservations
# Find blocking reservations, based on each reservation's
# job_restriction attribute
blocking_reservations_list = []
for reservation in existing_reservations :
    input_tuple = ( fake_job, )
    result = Catalina.apply_policy_code(reservation['job_restriction'],
      input_tuple)
    if result != 0 :
        #if Catalina.DEBUG != None :
        #    print "adding blocking reservation (%s) type (%s)" % \
        #      (reservation['name'], reservation['purpose_type_string'])
        blocking_reservations_list.append(reservation)
    #else :
    #    if Catalina.DEBUG != None :
    #        print "Not adding reservation (%s) type (%s) result(%s)" % \
    #          (reservation['name'], reservation['purpose_type_string'], result)

# Generate lookahead reservation, earliest start now, no resource amount, no duration
# This won't work.  create_reservation requires a duration.
# May be able to use get_open_windows_list...
# get accepted nodes
accepted_nodes = Catalina.get_accepted_nodes_list(node_restriction_code, resources_db_handle)
#if Catalina.DEBUG != None :
#    print "len(accepted_nodes) is %s" % len(accepted_nodes)
# get open_windows list, need to feed it a new_res with end_limit duration...
# this doesn't work with large duration, with the standard nonconflicting conflict_policy
# may need to write one that does not depend on duration...
#resource_list = Catalina.get_resource_list(fake_job, resources_db_handle)
# need to create req_dict_list here, with requirementsmap
# for PBS, something like:
# 2:hippi:ppn=2:fat
# tg-c002:ppn=1:compute+tg-c003
# tg-c002:ppn=1:compute+tg-c003+2:compute
# for LoadLeveler, something like:
#(Arch == "R6000") && (OpSys == "AIX52")+(Arch == "R6000") &&
#(OpSys == "AIX52")+(Arch == "R6000") && (OpSys == "AIX52")+
#(Arch == "R6000") && (OpSys == "AIX52")+(Arch == "R6000") &&
#(OpSys == "AIX52")+(Arch == "R6000") && (OpSys == "AIX52")+...
#requirementsmap_list = string.split(fake_job['requirementsmap'],'+')
#fake_job['requirements'] = requirementsmap_list[0]
#fake_job['requirementsmap'] = requirementsmap
fake_job['cat_requirements_string'] = Catalina____RESOURCEMANAGER_PLACEHOLDER___.get_requirements_string(fake_job)
fake_job['req_dict_list'] = Catalina____RESOURCEMANAGER_PLACEHOLDER___.get_req_dict_list(fake_job)
print "fake_job['req_dict_list'] (%s)" % (fake_job['req_dict_list'],)
resource_dict_list = Catalina.get_resource_dict_list(fake_job, resources_db_handle)
#print "resource_dict_list (%s)" % (resource_dict_list,)
screened_resource_name_list = filter(lambda x,resource_dict_list=resource_dict_list : resource_dict_list[0]['resource_dict'].has_key(x), accepted_nodes)
#if Catalina.DEBUG != None :
#    print "len(resource_list) is (%s)" % len(resource_list)
#screened_resource_name_list = Catalina.get_resource_name_list(resource_list)
#if Catalina.DEBUG != None :
#    print "len(screened_resource_name_list) is (%s)" % len(screened_resource_name_list)
screened_nodes_list = []
for node in accepted_nodes :
    if node in screened_resource_name_list :
        screened_nodes_list.append(node)
#if Catalina.DEBUG != None :
#    print "len(screened_nodes_list) is (%s)" % len(screened_nodes_list)
open_windows_list = Catalina.get_open_windows_list(screened_nodes_list, fake_res, blocking_reservations_list, resources_db_handle)
#if Catalina.DEBUG != None :
#    print "len(open_windows_list) is %s" % len(open_windows_list)
# filter for open_windows starting now
now_windows = filter( lambda window : window[0] <= Catalina.Now_float <= window[1], open_windows_list )
if len(now_windows) == 0 :
    #if Catalina.DEBUG != None :
    #    print "Catalina.Now_float is %s" % Catalina.Now_float
    #    print "len(now_windows) is %s" % len(now_windows)
    #    for window in open_windows_list :
    #        print "%s %s %s " % window
    print "0 nodes available"
# sort now open_windows by end time
now_windows.sort(by_end_time)
# report number of now open_windows for each end_time
window_dict = {}
old_end_time = 0
window_count = 0
print "CPU Backfill window:"
for window in now_windows :
    if not window[2].has_key('cpu') :
        continue
    if window[1] != old_end_time :
        if old_end_time != 0 :
            duration = old_end_time - Catalina.Now_float - Catalina.FUDGE_FACTOR
            print "%s cpus available for approximately %.0f minutes" % ( window_count, duration/60 )
        window_count = window[2]['cpu']
        old_end_time = window[1]
    else :
        window_count = window_count + window[2]['cpu']
    print "    node: %s" % window[2]
    #if Catalina.DEBUG != None :
    #    print "(%s) (%s) (%s)" % ( window[0] - Catalina.Now_float, window[1] - Catalina.Now_float, window[2] )
if window_count > 0 :
    duration = old_end_time - Catalina.Now_float - Catalina.FUDGE_FACTOR
    print "%s cpus available for approximately %.0f minutes" % ( window_count, duration/60 )

old_end_time = 0
window_count = 0
print "Memory Backfill window:"
for window in now_windows :
    if not window[2].has_key('memory') :
        continue
    if window[1] != old_end_time :
        if old_end_time != 0 :
            duration = old_end_time - Catalina.Now_float - Catalina.FUDGE_FACTOR
            print "%s memory (MB) available for approximately %.0f minutes" % ( window_count, duration/60 )
        window_count = window[2]['memory']
        old_end_time = window[1]
    else :
        window_count = window_count + window[2]['memory']
    print "    node: %s" % window[2]
    #if Catalina.DEBUG != None :
    #    print "(%s) (%s) (%s)" % ( window[0] - Catalina.Now_float, window[1] - Catalina.Now_float, window[2] )
if window_count > 0 :
    duration = old_end_time - Catalina.Now_float - Catalina.FUDGE_FACTOR
    print "%s memory (MB) available for approximately %.0f minutes" % ( window_count, duration/60 )

old_end_time = 0
window_count = 0
print "Node Backfill window:"
for window in now_windows :
    if not window[2].has_key('node') :
        continue
    if window[1] != old_end_time :
        if old_end_time != 0 :
            duration = old_end_time - Catalina.Now_float - Catalina.FUDGE_FACTOR
            print "%s nodes available for approximately %.0f minutes" % ( window_count, duration/60 )
        window_count = 1
        old_end_time = window[1]
    else :
        window_count = window_count + 1
    print "    node: %s properties: %s" % (window[2]['nodename'], resources_db_handle[0][window[2]['nodename']]['properties_list'])
    #if Catalina.DEBUG != None :
    #    print "(%s) (%s) (%s)" % ( window[0] - Catalina.Now_float, window[1] - Catalina.Now_float, window[2] )
if window_count > 0 :
    duration = old_end_time - Catalina.Now_float - Catalina.FUDGE_FACTOR
    print "%s nodes available for approximately %.0f minutes" % ( window_count, duration/60 )

# release lock, close the file
Catalina.close_ro_db(resources_db_handle)
Catalina.close_ro_db(reservations_db_handle)
Catalina.close_ro_db(jobs_db_handle)
