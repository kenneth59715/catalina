#!___PYTHON_PATH_PLACEHOLDER___
# rj_SLURM <jobid> <username> <duration> <nodelist>
#switch0_node0:~# /opt/slurm/bin/scontrol create Reservation=10 Users=kenneth Nodes=switch0_node0,switch0_node1 StartTime=now Duration=24:00:00 Flags=OVERLAP
#Reservation created: 10
#switch0_node0:~# /opt/slurm/bin/scontrol update JobId=10 Reservation=10
#switch0_node0:~# /opt/slurm/bin/scontrol update JobId=10 Priority=1             switch0_node0:~# /opt/slurm/bin/squeue                                            JOBID PARTITION     NAME     USER  ST       TIME  NODES NODELIST(REASON)           10    normal slurmjob  kenneth   R       0:08      2 switch0_node[0-1]
#switch0_node0:~#

import sys
import os
sys.path.append('___HOMEDIR_PLACEHOLDER___')
import string
import Catalina
import re
import time

jobid = sys.argv[1]
username = sys.argv[2]
duration = sys.argv[3]
node_list = sys.argv[4:]

#QCOUNT=3

#reqnodelist_pat = r"ReqNodeList=(?P<nodespec>\S+)"
#reqnodelist_reo = re.compile(reqnodelist_pat)

#command = Catalina.RUNCMD + " --oneliner show job | grep JobId=%s" % (jobid, )
##print "(%s)" % command
#command_file = os.popen(command)
#return_text = command_file.read()
#rc = command_file.close()
#reqnodelist_mo = reqnodelist_reo.search(return_text)
#if reqnodelist_mo != None:
#    originalnodespec = reqnodelist_mo.group('nodespec')
#else:
#    #print "failed to find ReqNodeList in (%s)" % return_text
#    originalnodespec = None

#print originalnodespec

#node_list = []
#for nodencount in nodencount_list :
#    nodename, count = string.split(nodencount,'#')
#    for index in range(string.atoi(count)) :
#        node_list.append(nodename)
node_string = string.join(node_list,",\\\n")

#command = Catalina.RUNCMD % (jobid, node_string)
#command = Catalina.RUNCMD + ' update ' + "JobId=%s Priority=1 ReqNodeList=%s" % (jobid, node_string)

#set reservation for the job
command = Catalina.RUNCMD + ' create ' + "Reservation=catalinares%s Users=%s Nodes=%s StartTime=now Duration=%s Flags=OVERLAP,IGNORE_JOBS" % (jobid, username, node_string, duration)
print "(%s)" % command
return_text = os.popen(command).read()
print return_text


#command = Catalina.RUNCMD + ' update ' + "JobId=%s Priority=1 ReqNodeList=%s" % (jobid, node_string)
command = Catalina.RUNCMD + ' update ' + "JobId=%s ReservationName=catalinares%s" % (jobid, jobid)
print "(%s)" % command
return_text = os.popen(command).read()
print return_text

command = Catalina.RUNCMD + ' update ' + "JobId=%s Priority=1" % (jobid, )
print "(%s)" % command
command_file = os.popen(command)
return_text = command_file.read()
rc = command_file.close()
if rc == None:
    rc = 0

#kenneth@switch0_node0:~/testprog$ /opt/slurm/bin/scontrol --oneliner show job | grep JobId=12 | grep JobState=RUNNING
#kenneth@switch0_node0:~/testprog$ echo $?
#1

#command = Catalina.RUNCMD + " --oneliner show job | grep JobId=%s | grep -e JobState=RUNNING -e JobState=STARTING" % (jobid, )
#count = 0
#started = 0
#rc = None
#while count < QCOUNT and rc != 0:
#    print "command (%s)" % command
#    command_file = os.popen(command)
#    return_text = command_file.read()
#    rc = command_file.close()
#    print "return_text (%s)" % (return_text,)
#    #print "rc (%s)" % (rc,)
#    #if rc == 0:
#    if return_text != '':
#        print "job start detected at count (%s)" % count
#        started = 1
#        break
#    #else:
#    #    os.system('/opt/slurm/bin/scontrol --oneliner show job')
#    count = count + 1
#    time.sleep(1)
#
#if originalnodespec != None:
#    if originalnodespec == '(null)':
#        originalnodespec = ''
#    command = Catalina.RUNCMD + ' update ' + "JobId=%s ReqNodeList=%s Priority=0" % (jobid, originalnodespec)
#    print "(%s)" % command
#    #os.system('/opt/slurm/bin/scontrol --oneliner show job')
#    command_file = os.popen(command)
#    return_text = command_file.read()
#    rc2 = command_file.close()

#exit_number = return_tuple[1]
#exit_status = exit_number >> 8
#rc = command_file.close()[1] >> 8
print "(%s) (%s)" % (jobid, node_list)
#print "return text (%s)" % return_text
print "rc from scontrol update is >%s<" % rc
sys.exit(rc)
