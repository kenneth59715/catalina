#!___PYTHON_PATH_PLACEHOLDER___
# get existing jobs
# separate Running and starting from Idle jobs by 'state' attribute
# find idle ineligible jobs, by the 'ineligible_reason' attribute
# canceled or completed jobs should be screened out at the state step

import sys
sys.path.append('___HOMEDIR_PLACEHOLDER___')
import Catalina
import time
import string
import getopt
import os
import pwd

JOBS_DB = Catalina.JOBS_DB
RESERVATIONS_DB = Catalina.RESERVATIONS_DB
RESOURCE_DB = Catalina.RESOURCE_DB
CONFIGURATION_DB = Catalina.CONFIGURATION_DB

def by_remaining(first, second) :
    if first.has_key('run_at_risk_int') and first['run_at_risk_int'] >= 1 :
        first_end = Catalina.Now_float + Catalina.RUN_AT_RISK_CLEANUP_TIME
    else :
        first_end = first['Dispatch_Time'] + first['wall_clock_limit']
    if second.has_key('run_at_risk_int') and second['run_at_risk_int'] >= 1 :
        second_end = Catalina.Now_float + Catalina.RUN_AT_RISK_CLEANUP_TIME
    else :
        second_end = second['Dispatch_Time'] + second['wall_clock_limit']
    if first_end < second_end :
        return -1
    if first_end == second_end :
        return 0
    if first_end > second_end :
        return 1

def by_wall(first, second) :
    if first['wall_clock_limit'] > second['wall_clock_limit'] :
        return -1
    if first['wall_clock_limit'] == second['wall_clock_limit'] :
        return 0
    if first['wall_clock_limit'] < second['wall_clock_limit'] :
        return 1

def by_Dispatch_Time(first, second) :
    if first['Dispatch_Time'] < second['Dispatch_Time'] :
        return -1
    if first['Dispatch_Time'] == second['Dispatch_Time'] :
        return 0
    if first['Dispatch_Time'] > second['Dispatch_Time'] :
        return 1

def by_resource(first, second) :
    if len(string.split(first['initiatormap'], '+')) > len(string.split(second['initiatormap'], '+')) :
        return -1
    if len(string.split(first['initiatormap'], '+')) == len(string.split(second['initiatormap'], '+')) :
        return 0
    if len(string.split(first['initiatormap'], '+')) < len(string.split(second['initiatormap'], '+')) :
        return 1

def by_priority(first, second) :
    if first.has_key('priority') and not second.has_key('priority') :
        return -1
    if not first.has_key('priority') and not second.has_key('priority') :
        return 0
    if not first.has_key('priority') and second.has_key('priority') :
        return 1
    if first['priority'] > second['priority'] :
        return -1
    if first['priority'] == second['priority'] :
        return 0
    if first['priority'] < second['priority'] :
        return 1

if os.environ.has_key('TZ') :
    print "TZ (%s)" % os.environ['TZ']
else :
    print "No TZ found"

usage_string = \
"""
Usage: show_q   [--?]
                [--help]
                [--full]
                [--job]
                [--state]
                [--class]
                [--limit]
                [--remaining]
                [--startt]
                [--resstartt]
                [--qos]
                [--user]
                [--group]
                [--account]
                [--nodes]
                [--cpu]
                [--memory]
                [--taskmap]
                [--systemqt]
                [--submitt]
                [--reason]
                [--risk]
                [--queue=qname1,qname2,...  <comma-delimited queue names>]
                [--fullname]
"""

default_argdict = {
    '--job' : None,
    '--user' : None,
    '--state' : None,
    '--class' : None,
    '--limit' : None,
    '--nodes' : None,
    '--remaining' : None,
    '--startt' : None,
    '--resstartt' : None,
    '--systemqt' : None,
    '--risk' : None,
    '--reason' : None
}

full_argdict = {
    '--job' : None,
    '--qos' : None,
    '--account' : None,
    '--class' : None,
    '--user' : None,
    '--state' : None,
    '--limit' : None,
    '--nodes' : None,
    '--cpu' : None,
    '--memory' : None,
    '--remaining' : None,
    '--startt' : None,
    '--resstartt' : None,
    '--systemqt' : None,
    '--submitt' : None,
    '--risk' : None,
    '--reason' : None,
    '--fullname' : None
}

options = ['dump',
           '?',
           'help',
           'full',
           'job',
           'state',
           'class',
           'limit',
           'remaining',
           'startt',
           'resstartt',
           'qos',
           'user',
           'group',
           'account',
           'nodes',
           'cpu',
           'memory',
           'taskmap',
           'systemqt',
           'submitt',
           'risk',
           'reason',
           'queue=',
           'fullname'
  ]

args = sys.argv[1:]
if len(args) == 0 :
    argdict = default_argdict
else :
    argdict = {}
    try :
        optlist, lineargs = getopt.getopt(args, '', options)
    except :
        print usage_string
        sys.exit(0)
    for pair in optlist:
        argdict[pair[0]] = pair[1]

## validate the name of the queues entered
## Grab the present queues from LoadLeveler.
## Check if the requested queues are in this 
## set. If not print error message & exit
## Not yet implemented - kmuriki@sdsc.edu, May 16th 2006
#tempdict = checkargs(argdict)
#argdict = tempdict

if argdict.has_key('--?') or argdict.has_key('--help') :
    print usage_string
    sys.exit(0)

if argdict.has_key('--full') :
    argdict.update(full_argdict)


## if --queue provided, it should be in the form of a comma-delimited
## list of node names.  reformat this to ['<qname1>', '<qname2>',...]
if argdict.has_key('--queue') :
    queues_string = argdict['--queue']
    ## special case, if only --queue is provided, use default argument
    ## on top of --queue argument so jobid, owner, etc are listed.
    if len(args) ==1 :
        argdict= default_argdict
        argdict['--queue'] = queues_string
    #split off queues_string based on comma (,)
    queues_string = queues_string.split(',')
    
else :
    queues_string = None


db_handle = Catalina.open_ro_db(JOBS_DB,'read')
job_steps = Catalina.get_object_list(db_handle)
reservations_db_handle = Catalina.open_ro_db(RESERVATIONS_DB,'read')
reservations = Catalina.get_object_list(reservations_db_handle)
resource_db_handle = Catalina.open_ro_db(RESOURCE_DB,'read')
resource = Catalina.get_object_list(resource_db_handle)
configuration_db_handle = Catalina.open_ro_db(CONFIGURATION_DB,'read')
configuration_db = configuration_db_handle[0]

try :
    update_timestamp_float = configuration_db['last_schedule_update']['timestamp']
    print "Last schedule update (%s)" % time.strftime("%m/%d/%Y %H:%M:%S", time.localtime(update_timestamp_float))
except :
    print "WARNING: Could not find last schedule update!"

if argdict.has_key('--dump') :
    for job_step in job_steps :
        for key in job_step.keys() :
            print "#cat_delim#%s#cat_sep#%s" % (key, job_step[key]),
        print ""
    sys.exit(0)

idle_jobs = filter( lambda job_step : job_step['state'] == 'Idle', job_steps )
running_starting_jobs = filter( lambda job_step : \
  job_step['state'] in ['Running', 'Starting', 'Preempted'] \
  , job_steps )
eligible_jobs = filter( lambda job_step : job_step['ineligible_reason'] == 'Eligible', idle_jobs )
ineligible_jobs = filter( lambda job_step : job_step['ineligible_reason'] != 'Eligible', idle_jobs )

running_starting_jobs.sort(by_remaining)
# print header for Running jobs
print "ACTIVE JOBS" + 20 * '-'
header_string = ''
format_string = ''
if argdict.has_key('--job') :
    header_string = header_string + " JOBNAME             "
    format_string = format_string + " %20s"
if argdict.has_key('--user') :
    header_string = header_string + " USER      "
    format_string = format_string + " %10s"
if argdict.has_key('--state') :
    header_string = header_string + " STATE   "
    format_string = format_string + " %8s"
if argdict.has_key('--nodes') :
    header_string = header_string + " NODES"
    format_string = format_string + " %4s "
if argdict.has_key('--cpu') :
    header_string = header_string + " PROCS"
    format_string = format_string + " %4s "
if argdict.has_key('--memory') :
    header_string = header_string + " MEMORY"
    format_string = format_string + " %5i "
if argdict.has_key('--remaining') :
    header_string = header_string + "  REMAINING"
    format_string = format_string + " %10s"
if argdict.has_key('--startt') :
    header_string = header_string + " STARTTIME  "
    format_string = format_string + " %11s"
if argdict.has_key('--limit') :
    header_string = header_string + " LIMIT    "
    format_string = format_string + " %9s"
if argdict.has_key('--class') :
    header_string = header_string + " CLASS       "
    format_string = format_string + " %12s "
if argdict.has_key('--qos') :
    header_string = header_string + " QOS"
    format_string = format_string + " %2s "
if argdict.has_key('--group') :
    header_string = header_string + " GROUP  "
    format_string = format_string + " %7s"
if argdict.has_key('--account') :
    header_string = header_string + " ACCOUNT"
    format_string = format_string + " %7s"
if argdict.has_key('--risk') :
    header_string = header_string + " RISK"
    format_string = format_string + " %4s"
if argdict.has_key('--taskmap') :
    header_string = header_string + " TASKMAP"
    format_string = format_string + " %s"
if argdict.has_key('--fullname') :
    header_string = header_string + " FULL NAME"
    format_string = format_string + "%s"
    

#print "JobStepId       State     Class        Limit(hr) TimeRemaining(hr) StartTime                QOS    User      Group   Account (Nodes) TaskMap"
#print 140 * '-'
print header_string
# print each running job line
allocated_nodes = 0
allocated_cpu = 0
allocated_memory = 0
consumable_cpu = 0
consumable_memory = 0
allocated_hosts_dict = {}

for job_step in running_starting_jobs :

        display = 0
        if argdict.has_key('--queue') :
           class_name = job_step['job_class']
        
        ## I'm trying to find my class_name (from my job) in the list of 
        ## class provided by --queue options by the user. I am using the
        ## index function, which returns an error if not found, and an index
        ## if found.
        
           try:
                queues_string.index(class_name) 
                display=1
           except :
                pass
           
        else :
           display = 1

        if display == 1 :
            nodes = string.split(job_step['initiatormap'], '+')
            task_hosts = job_step['task_hosts']
            allocated_hosts = job_step['allocated_hosts']
            run_cpu = 0
            run_memory = 0
            cons_cpu = 0
            cons_memory = 0
            job_nodes = {}
            for allocated_host in allocated_hosts :
                allocated_hosts_dict[allocated_host] = None
                job_nodes[allocated_host] = None
            #print "job_nodes.keys() (%s)" % (job_nodes.keys(),)
            if job_step['node_usage'] == 'node_shared' :
                nodes_length = len(nodes)
                for node_index in range(nodes_length) :
                    if job_step.has_key('requested_resource_list') :
                        req_list = job_step['requested_resource_list'][node_index]['req_list']
                        for req in req_list :
                            if req.has_key('cpu') :
                                cons_cpu = cons_cpu + req['cpu']
                                run_cpu = run_cpu + req['cpu']
                            if req.has_key('memory') :
                                cons_memory = cons_memory + req['memory']
                                run_memory = run_memory + req['memory']
            else :
                for node in job_nodes.keys() :
                    #print "adding cpu (%s) for node (%s)" % (resource_db_handle[0][node]['Cpus'], node)
                    if resource_db_handle[0].has_key(node) :
                        if resource_db_handle[0][node]['Cpus'] != None :
                            run_cpu = run_cpu + resource_db_handle[0][node]['Cpus']
                        if resource_db_handle[0][node]['Memory'] != None :
                            run_memory = run_memory + resource_db_handle[0][node]['Memory']
                        if resource_db_handle[0][node]['ConsumableCpus'] != None :
                            cons_cpu = cons_cpu + resource_db_handle[0][node]['ConsumableCpus']
                        if resource_db_handle[0][node]['ConsumableMemory'] != None :
                            cons_memory = cons_memory + resource_db_handle[0][node]['ConsumableMemory']
            limit_seconds = job_step['wall_clock_limit']
            limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
            if job_step.has_key('wall_clock_used') and job_step['wall_clock_used'] != None :
                remaining_seconds = job_step['wall_clock_limit'] - job_step['wall_clock_used']
            else :
                remaining_seconds = (job_step['Dispatch_Time'] + job_step['wall_clock_limit'] - Catalina.Now_float)
            if remaining_seconds < 0 :
                print "Negative remaining time (%s) for (%s).  Using Dispatch Time - Now, instead!" % (job_step['name'], remaining_seconds)
                remaining_seconds = (job_step['Dispatch_Time'] + job_step['wall_clock_limit'] - Catalina.Now_float)
            if job_step['state'] in ['Preempted'] :
                for reservation in reservations :
                    if reservation['job_runID'] == job_step['name'] :
                        res_start_time = reservation['start_time_float']
                        relative_res_start_time = res_start_time - Catalina.Now_float
                        if relative_res_start_time < 0 :
                            relative_res_start_time = 0.0
                        remaining_seconds = relative_res_start_time + remaining_seconds
            if remaining_seconds < 0 :
                sign_char = '-'
            else :
                sign_char = ' '
            remaining_string = "%s%02d:%02d:%02d" % (sign_char, abs(remaining_seconds)/3600, abs(remaining_seconds)%3600/60, abs(remaining_seconds)%60)
            print_list = []
            if argdict.has_key('--job') :
                print_list.append(job_step['name'])
            if argdict.has_key('--user') :
                print_list.append(job_step['user'])
            if argdict.has_key('--state') :
                print_list.append(job_step['state'])
            if argdict.has_key('--nodes') :
                #print_list.append(nodes_length)
                print_list.append(len(job_nodes.keys()))
            if argdict.has_key('--cpu') :
                print_list.append(int(run_cpu))
            if argdict.has_key('--memory') :
                print_list.append(int(run_memory))
            if argdict.has_key('--remaining') :
                print_list.append(remaining_string)
            if argdict.has_key('--startt') :
                print_list.append(
                  time.strftime("%m/%d %H:%M", time.localtime(job_step['Dispatch_Time']))
                  )
            if argdict.has_key('--limit') :
                print_list.append(limit_string)
            if argdict.has_key('--class') :
                print_list.append(job_step['job_class'])
            if argdict.has_key('--qos') :
                print_list.append(job_step['QOS'])
            if argdict.has_key('--group') :
                print_list.append(job_step['group'])
            if argdict.has_key('--account') :
                print_list.append(job_step['account'])
            if argdict.has_key('--risk') :
                if job_step.has_key('run_at_risk_int') :
                    print_list.append(job_step['run_at_risk_int'])
                else :
                    print_list.append(0)
            if argdict.has_key('--taskmap') :
                print_list.append(job_step['initiatormap'])
            if argdict.has_key('--fullname') :
                #parse output from pwd.getpwname( tuple of information)
                user_fullname = pwd.getpwnam(job_step['user'])[4].split(',')[0]
                if len(pwd.getpwnam(job_step['user'])[4].split(',')) > 1:
                    user_org = pwd.getpwnam(job_step['user'])[4].split(',')[1].lower()
                else:
                    user_org = 'None'
                print_list.append(' ' +  user_fullname + ' (' + user_org + ')')
            print format_string % tuple(print_list)
            #allocated_nodes = allocated_nodes + nodes_length
            allocated_cpu = allocated_cpu + run_cpu
            allocated_memory = allocated_memory + run_memory
            consumable_cpu = consumable_cpu + cons_cpu
            consumable_memory = consumable_memory + cons_memory

allocated_nodes = len(allocated_hosts_dict.keys())
print "Allocated Nodes: (%i)" % allocated_nodes
print "Allocated Cpus: (%i)" % allocated_cpu
print "Allocated Memory: (%i)" % allocated_memory

eligible_jobs.sort(by_priority)
# print header for eligible jobs
print "IDLE JOBS" + 20 * '-'
header_string = ''
format_string = ''
if argdict.has_key('--job') :
    header_string = header_string + " JOBNAME             "
    format_string = format_string + " %20s"
if argdict.has_key('--user') :
    header_string = header_string + " USER      "
    format_string = format_string + " %10s"
if argdict.has_key('--state') :
    header_string = header_string + " STATE   "
    format_string = format_string + " %8s"
if argdict.has_key('--nodes') :
    header_string = header_string + " NODES"
    format_string = format_string + " %4s "
if argdict.has_key('--cpu') :
    header_string = header_string + " PROCS"
    format_string = format_string + " %4s "
if argdict.has_key('--memory') :
    header_string = header_string + " MEMORY"
    format_string = format_string + " %5i "
if argdict.has_key('--limit') :
    header_string = header_string + " LIMIT    "
    format_string = format_string + " %9s"
if argdict.has_key('--systemqt') :
    header_string = header_string + " QUEUETIME  "
    format_string = format_string + " %11s"
if argdict.has_key('--submitt') :
    header_string = header_string + " SUBMITTIME "
    format_string = format_string + " %11s"
if argdict.has_key('--class') :
    header_string = header_string + " CLASS       "
    format_string = format_string + " %12s"
if argdict.has_key('--qos') :
    header_string = header_string + " QOS"
    format_string = format_string + " %3s"
if argdict.has_key('--group') :
    header_string = header_string + " GROUP  "
    format_string = format_string + " %7s"
if argdict.has_key('--account') :
    header_string = header_string + " ACCOUNT"
    format_string = format_string + " %7s"
if argdict.has_key('--risk') :
    header_string = header_string + " RISK"
    format_string = format_string + " %4s"
if argdict.has_key('--resstartt') :
    header_string = header_string + " RES_START "
    format_string = format_string + " %10s"
if argdict.has_key('--taskmap') :
    header_string = header_string + " TASKMAP"
    format_string = format_string + " %s"
if argdict.has_key('--fullname') :
    header_string = header_string + " FULL NAME"
    format_string = format_string + "%s"
print header_string
for job_step in eligible_jobs :

   display = 0
   if argdict.has_key('--queue') :
      class_name = job_step['job_class']
      try:
           queues_string.index(class_name)
           display=1
      except:
           pass
           
   else :
      display = 1

   if display == 1 :
        nodes = string.split(job_step['initiatormap'], '+')
        nodes_length = len(nodes)
        cpu = 0
        memory = 0
        for node_index in range(nodes_length) :
            if job_step.has_key('requested_resource_list') :
                 req_list = job_step['requested_resource_list'][node_index]['req_list']
                 for req in req_list :
                     if req.has_key('cpu') :
                         cpu = cpu + req['cpu']
                     if req.has_key('memory') :
                         memory = memory + req['memory']
        res_start_string = None
        limit_seconds = job_step['wall_clock_limit']
        limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
        for reservation in reservations :
            if reservation['job_runID'] == job_step['name'] :
                res_start_time = reservation['start_time_float']
                relative_res_start_time = res_start_time - Catalina.Now_float
                if relative_res_start_time < 0 :
                    res_start_sign = '-'
                    relative_res_start_time = abs(relative_res_start_time)
                else :
                    res_start_sign = ' '
                res_start_string = "%s%02u:%02u:%02u" % (res_start_sign, relative_res_start_time/3600, relative_res_start_time%3600/60, relative_res_start_time%60)
        print_list = []
        if argdict.has_key('--job') :
            print_list.append(job_step['name'])
        if argdict.has_key('--user') :
            print_list.append(job_step['user'])
        if argdict.has_key('--state') :
            print_list.append(job_step['state'])
        if argdict.has_key('--nodes') :
            print_list.append(nodes_length)
        if argdict.has_key('--cpu') :
            print_list.append(int(cpu))
        if argdict.has_key('--memory') :
            print_list.append(int(memory))
        if argdict.has_key('--limit') :
            print_list.append(limit_string)
        if argdict.has_key('--systemqt') :
            print_list.append(
              time.strftime("%m/%d %H:%M", time.localtime(job_step['system_queue_time']))
            )
        if argdict.has_key('--submitt') :
            print_list.append(
              time.strftime("%m/%d %H:%M", time.localtime(job_step['SubmitTime']))
            )
        if argdict.has_key('--class') :
            print_list.append(job_step['job_class'])
        if argdict.has_key('--qos') :
            print_list.append(job_step['QOS'])
        if argdict.has_key('--group') :
            print_list.append(job_step['group'])
        if argdict.has_key('--account') :
            print_list.append(job_step['account'])
        if argdict.has_key('--risk') :
            if job_step.has_key('run_at_risk_int') :
                 print_list.append(job_step['run_at_risk_int'])
            else :
                 print_list.append(0)
        if argdict.has_key('--resstartt') :
            print_list.append(res_start_string)
        if argdict.has_key('--taskmap') :
            print_list.append(job_step['initiatormap'])
        if argdict.has_key('--fullname') :
            # parse output from pwd.getpwnam (tuple of information)
            user_fullname = pwd.getpwnam(job_step['user'])[4].split(',')[0]
            if len(pwd.getpwnam(job_step['user'])[4].split(',')) > 1:
                user_org = pwd.getpwnam(job_step['user'])[4].split(',')[1].lower()
            else:
                user_org = 'None'
            print_list.append(' ' + user_fullname + ' (' + user_org + ')')
        print format_string % tuple(print_list)

ineligible_jobs.sort(by_priority)
# print header for ineligible jobs
print "NON-QUEUED JOBS" + 20 * '-'
header_string = ''
format_string = ''
if argdict.has_key('--job') :
    header_string = header_string + " JOBNAME             "
    format_string = format_string + " %20s"
if argdict.has_key('--user') :
    header_string = header_string + " USER      "
    format_string = format_string + " %10s"
if argdict.has_key('--state') :
    header_string = header_string + " STATE   "
    format_string = format_string + " %8s"
if argdict.has_key('--nodes') :
    header_string = header_string + " NODES"
    format_string = format_string + " %4s "
if argdict.has_key('--cpu') :
    header_string = header_string + " PROCS"
    format_string = format_string + " %4s "
if argdict.has_key('--memory') :
    header_string = header_string + " MEMORY"
    format_string = format_string + " %5i "
if argdict.has_key('--limit') :
    header_string = header_string + " LIMIT    "
    format_string = format_string + " %9s"
if argdict.has_key('--submitt') :
    header_string = header_string + " SUBMITTIME "
    format_string = format_string + " %11s"
if argdict.has_key('--class') :
    header_string = header_string + " CLASS       "
    format_string = format_string + " %12s"
if argdict.has_key('--qos') :
    header_string = header_string + " QOS"
    format_string = format_string + " %3s"
if argdict.has_key('--group') :
    header_string = header_string + " GROUP  "
    format_string = format_string + " %7s"
if argdict.has_key('--account') :
    header_string = header_string + " ACCOUNT"
    format_string = format_string + " %7s"
if argdict.has_key('--risk') :
    header_string = header_string + " RISK"
    format_string = format_string + " %4s"
if argdict.has_key('--reason') :
    header_string = header_string + " REASON                    "
    format_string = format_string + " %26s"
if argdict.has_key('--taskmap') :
    header_string = header_string + " TASKMAP"
    format_string = format_string + " %s"
if argdict.has_key('--fullname') :
    header_string = header_string + " FULL NAME"
    format_string = format_string + "%s"
print header_string
for job_step in ineligible_jobs :
   display = 0
   if argdict.has_key('--queue') :
      class_name = job_step['job_class']
      try:
           queues_string.index(class_name)
           display=1
      except:
           pass
           
   else :
      display = 1

   if display == 1 :
        nodes = string.split(job_step['initiatormap'], '+')
        nodes_length = len(nodes)
        cpu = 0
        memory = 0
        for node_index in range(nodes_length) :
             if job_step.has_key('requested_resource_list') :
                  req_list = job_step['requested_resource_list'][node_index]['req_list']
                  for req in req_list :
                       if req.has_key('cpu') :
                            cpu = cpu + req['cpu']
                       if req.has_key('memory') :
                            memory = memory + req['memory']
        limit_seconds = job_step['wall_clock_limit']
        limit_string = "%02u:%02u:%02u" % (job_step['wall_clock_limit']/3600, job_step['wall_clock_limit']%3600/60, job_step['wall_clock_limit']%60)
        print_list = []
        if argdict.has_key('--job') :
             print_list.append(job_step['name'])
        if argdict.has_key('--user') :
             print_list.append(job_step['user'])
        if argdict.has_key('--state') :
             print_list.append(job_step['state'])
        if argdict.has_key('--nodes') :
             print_list.append(nodes_length)
        if argdict.has_key('--cpu') :
             print_list.append(int(cpu))
        if argdict.has_key('--memory') :
             print_list.append(int(memory))
        if argdict.has_key('--limit') :
             print_list.append(limit_string)
        if argdict.has_key('--submitt') :
             print_list.append(
             time.strftime("%m/%d %H:%M", time.localtime(job_step['SubmitTime']))
          )
        if argdict.has_key('--class') :
             print_list.append(job_step['job_class'])
        if argdict.has_key('--qos') :
             print_list.append(job_step['QOS'])
        if argdict.has_key('--group') :
             print_list.append(job_step['group'])
        if argdict.has_key('--account') :
             print_list.append(job_step['account'])
        if argdict.has_key('--risk') :
             if job_step.has_key('run_at_risk_int') :
                  print_list.append(job_step['run_at_risk_int'])
             else :
                  print_list.append(0)
        if argdict.has_key('--reason') :
             print_list.append(job_step['ineligible_reason'])
        if argdict.has_key('--taskmap') :
             print_list.append(job_step['initiatormap'])
        if argdict.has_key('--fullname') :
            # parse output from pwd.getpwnam (tuple of information)
            user_fullname = pwd.getpwnam(job_step['user'])[4].split(',')[0]
            if len(pwd.getpwnam(job_step['user'])[4].split(',')) > 1:
                user_org = pwd.getpwnam(job_step['user'])[4].split(',')[1].lower()
            else:
                user_org = 'None'
            print_list.append(' ' + user_fullname + ' (' + user_org + ')')     
        print format_string % tuple(print_list)

#active_resource = filter(lambda x, translation_dict=Catalina.RM_TO_CAT_RESOURCE_dict, \
#  def_class=Catalina.DEFAULT_JOB_CLASS : \
#  x['State'] != None and \
#  translation_dict[x['State']] in ['Idle', 'Running', 'Busy'] , resource)
active_resource = filter(lambda x, translation_dict=Catalina.RM_TO_CAT_RESOURCE_dict, \
  def_class=Catalina.DEFAULT_JOB_CLASS : \
  x['State'] != None and \
  x['State'] in ['Idle', 'Running', 'Busy'] , resource)
active_cpu = 0
for ar in active_resource :
    if ar.has_key('ConsumableCpus') :
        conscpu = ar['ConsumableCpus']
    else :
        consscpu = 0
    if ar.has_key('Cpus') :
        realcpu = ar['Cpus']
    else : 
        realcpu = 0
    active_cpu = active_cpu + max(conscpu, realcpu)

if argdict.has_key('--queue') == 0 :
    #print "HOTPAGE: %s %s" % (allocated_nodes, len(active_resource))
    print "HOTPAGE: %i %i" % (allocated_cpu, active_cpu)

Catalina.close_ro_db(resource_db_handle)
Catalina.close_ro_db(reservations_db_handle)
Catalina.close_ro_db(db_handle)
Catalina.close_ro_db(configuration_db_handle)
