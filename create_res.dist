#!___PYTHON_PATH_PLACEHOLDER___

import sys
import getopt
import string
import os
import re
import copy
sys.path.append('___HOMEDIR_PLACEHOLDER___')
import Catalina
import pwd
import time

RESERVATION_DB = 'reservations'
JOBS_DB = 'jobs'
RESOURCE_DB = 'resource'
result = 1

def reconcile_file_to_arg(dict, arg, filearg) :
    if dict.has_key(arg) and dict.has_key(filearg) :
        print "Can't specify both (%s) and (%s)" % (arg, filearg)
        sys.exit(1)
    elif dict.has_key(filearg) :
        if os.path.isfile(dict[filearg]) :
            input = open(dict[filearg], 'r')
            filestring = input.read()
            input.close()
            return filestring
        else :
            print "%s not a file!" % dict[filearg]
            sys.exit(1)
    elif dict.has_key(arg) :
        return dict[arg]
    else :
        print "dict[arg] is (%s)" % dict[arg]
        print "dict[filearg] is (%s)" % dict[filearg]
        return ''

def checkargs(argdict) :

    if argdict.has_key('--job_restriction') or argdict.has_key('--job_restriction_file') :
        job_restriction_code = reconcile_file_to_arg(
          argdict, '--job_restriction', '--job_restriction_file'
          )
        if job_restriction_code != '' :
            argdict['--job_restriction'] = job_restriction_code

    if argdict.has_key('--node_restriction') or argdict.has_key('--node_restriction_file') :
        node_restriction_code = reconcile_file_to_arg(
          argdict, '--node_restriction', '--node_restriction_file'
          )
        if node_restriction_code != '' :
            argdict['--node_restriction'] = node_restriction_code

    if argdict.has_key('--node_sort_policy') or argdict.has_key('--node_sort_policy_file') :
        policy_restriction_code = reconcile_file_to_arg(
          argdict, '--node_sort_policy', '--node_sort_policy_file'
          )
        if policy_restriction_code != '' :
            argdict['--node_sort_policy'] = policy_restriction_code

    if argdict.has_key('--conflict_policy') or argdict.has_key('--conflict_policy_file') :
        conflict_code = reconcile_file_to_arg(
          argdict, '--conflict_policy', '--conflict_policy_file'
          )
        if conflict_code != '' :
            argdict['--conflict_policy'] = conflict_code
    
    if argdict.has_key('--affinity_calculation') or argdict.has_key('--affinity_calculation_file') :
        affinity_calculation = reconcile_file_to_arg(
          argdict, '--affinity_calculation', '--affinity_calculation_file'
          )
        if affinity_calculation != '' :
            argdict['--affinity_calculation'] = affinity_calculation
    
    if argdict.has_key('--duration') and string.atol(argdict['--duration']) < 0 :
        print "--duration must be non-negative!"
        print usage_string
        sys.exit(1)

    if argdict.has_key('--earliest_start') and string.atol(argdict['--earliest_start']) < 0 :
        print "--earliest_start must be non-negative!"
        print usage_string
        sys.exit(1)

    if argdict.has_key('--latest_end') and string.atol(argdict['--latest_end']) < 0 :
        print "--latest_end must be non-negative!"
        print usage_string
        sys.exit(1)

    if argdict.has_key('--latest_end') and argdict.has_key('--earliest_start') and string.atol(argdict['--earliest_start']) > string.atol(argdict['--latest_end']) :
        print "--earliest_start must be earlier than --latest_end!"
        print usage_string
        sys.exit(1)

    #if argdict.has_key('--sharedeach') and argdict.has_key('--sharedlist') :
    #    print "--sharedeach and --sharedlist mutually exclusive!"
    #    print usage_string
    #    sys.exit(1)

    #if argdict.has_key('--sharedlist') :
    #    temp_reqs = string.split(argdict['--sharedlist'],'@')
    #    reqs = filter(lambda x : x != '', temp_reqs)
    #    nodes = string.atoi(argdict['--resource_amount'])
    #    if len(reqs) != nodes :
    #        print "--sharedlist element count must match --resource_amount!"
    #        print "usage_string"
    #        sys.exit(1)

    return argdict

options = [
  '?',
  'help',
  'scheduling_window=',
  'del_res_id=',
  'copy_res_id=',
  'earliest_start=',
  'latest_end=',
  'duration=',
  'resource_amount=',
  'sharedmap=',
  'job_restriction=',
  'job_restriction_file=',
  'node_restriction=',
  'node_restriction_file=',
  'node_sort_policy=',
  'node_sort_policy_file=',
  'conflict_policy=',
  'conflict_policy_file=',
  'affinity_calculation=',
  'affinity_calculation_file=',
  'ignore_list=',
  'mode=',
  'maxhops=',
  'comment='
  ]
usage_string = \
"""Usage: create_res --duration=<seconds>
                  --resource_amount=<number of resources> [--earliest_start=<epoch time>] |
                  [--resource_amount=<number of resources>] --earliest_start=<epoch time>
                  if only resource_amount is provided, the earliest reservation
                  for that amount of resource will be created.
                  if only earliest_start is provided, the largest reservation,
                  starting at that time or later will be created.

                  [--sharedmap=<number of nodes>#type:<node_shared|node_exclusive>[#cpu:<cpus>+memory:<memory>#@<number of nodes>#type:<node_shared|node_exclusive>[#cpu:<cpus>+memory:<memory>#...]
                  for shared nodes, the desired amount of procs and memory
                  should be specified with one of these options.  --sharedmap
                  means use a different number of cpus and memory for each node.
                  If there are more nodes in --resource_amount than in
                  --sharedmap, the last sharedmap element will be used for
                  the remaining nodes.
               
                  [--latest_end=<epoch time>]
                  reservation can end no later than this time, otherwise
                  use the default scheduler limit
                  (catalina.config:SCHEDULING_WINDOW)

                  [--scheduling_window=<float seconds from now>]
                  replace the catalina.config:SCHEDULING_WINDOW

                  [--del_res_id=<res id>]
                  replace the old reservation with the newly created one.

                  [--copy_res_id=<res id>]
                  take default values from the existing reservation.
                  This is a little tricky for some attributes, since they
                  get changed during reservation creation.  The start, end,
                  and resource_amount values get generated from earliest_start,
                  latest_end, and resource_amount depending on the other
                  reservations in the system.  When these defaults are applied
                  in a new context, the resulting reservation may have
                  different start, end and resource_amount values.  To ensure
                  that these values are appropriate, you may specify them
                  with --earliest_start, --latest_end, and --resource_amount.

                  [--job_restriction=<python code> |
                  --job_restriction_file=<filename>]
                  Python code, either on the command line or in a file, to be
                  used to filter jobs for running within the reservation.
                  input_tuple[0] is the job under consideration.  Set
                  'result = 0' if the job is approved for run within the
                  reservation.  By default, 'result = 1', no job may run in
                  the reservation.

                  [--node_restriction=<python code> |
                  --node_restriction_file=<filename>]
                  Python code, either on the command line or in a file, to be
                  used to filter nodes for allocation to the reservation.
                  input_tuple[0] is the node under consideration.  Set
                  'result = 0' if the node is approved for allocation within
                  the reservation.  By default, nodes in Down, Drain, Drained,
                  None, Unknown, or with Max_Starters == 0 (LoadL) are rejected.
                  All other nodes are accepted.

                  [--conflict_policy=<python code> |
                  --conflict_policy_file=<filename>]
                  Python code, either on the command line or in a file, to be
                  used to return open time windows for each node.
                  input_tuple[0] is a list of accepted nodes.
                  input_tuple[1] is the new reservation, with attributes
                  'earliest_start_float' and 'duration_float' in epoch time
                  and seconds input_tuple[2] is the list of existing
                  reservations.  return a dictionary.  Node names are keys.
                  A list of tuples containing (float epoch start of window,
                  float epoch end of window, node name) are the values.
                  By default, only time windows that do not conflict with the
                  existing reservations are returned.

                  [--affinity_calculation=<python code> |
                  --affinity_calculation_file=<filename>]
                  Python code, either on the command line or in a file, to be
                  used to set the affinity of a job for a reservation.  This
                  determines the tendency to schedule jobs towards or away
                  from the reservation.  input_tuple[0] is the job under
                  consideration.  If result is set to a negative number,
                  the node will be avoided by the job, unless there is no
                  alternative.  If result is set to a positive number, the
                  node will use the node in the reservation first, before
                  considering other nodes.  For overlapping reservations,
                  affinities for jobs will be added.
                  This is useful in situations where you want to put jobs on
                  user reservations before using up Idle nodes (positive
                  affinity).  Or where you want to preserve free nodes in a
                  reservation for as long as possible (negative affinity).
                  Specifying affinity as python code instead of a number allows
                  different affinities for different job attributes.
                  By default, reservations are given positive affinity, so jobs
                  will run on reserved nodes first.

                  [--ignore_list=<res_id1>[,<res_id2>[,<res_id3>]...]]
                  Reservation list to ignore.  Use 'ALL' to specify that
                  all known reservations are to be ignored.

                  [--maxhops=<maximum switch hops>]
                  Maximum number of switch hops between any pair of nodes
                  in the reservation.  Defaults to None, any amount of
                  switch hops allowed.

                  [--mode=<real|lookahead>]
                  Determines whether reservation is really made (real) or just
                  tested (lookahead)."""

args = sys.argv[1:]
for arg in args :
    print "arg is (%s)" % arg
argdict = {}
optlist, lineargs = getopt.getopt(args, '', options)
for pair in optlist:
        argdict[pair[0]] = pair[1]
        if pair[0] == '--node_restriction' :
            print "pair[1] is (%s)" % pair[1]
tempdict = checkargs(argdict)
argdict = tempdict

if argdict.has_key('--?') or argdict.has_key('--help') :
    print usage_string
    sys.exit(0)

if argdict.has_key('--scheduling_window'):
    Catalina.END_OF_SCHEDULING = Catalina.Now_float + float(argdict['--scheduling_window'])

events_db_handle = Catalina.open_db(Catalina.EVENTS_DB,'write');
jobs_db_handle = Catalina.open_db(JOBS_DB,'read');
reservations_db_handle = Catalina.open_db(RESERVATION_DB,'write');
resources_db_handle = Catalina.open_db(RESOURCE_DB,'read');

reservations_dict = reservations_db_handle[0]

if argdict.has_key('--del_res_id') :
    old_res_id = argdict['--del_res_id']
    if old_res_id == None :
        raise 'NoOldResID'
    if reservations_dict.has_key(old_res_id) :
        old_res = reservations_dict[old_res_id]
    else :
        raise 'KeyNotFound', old_res_id
else :
    old_res_id = None
if argdict.has_key('--copy_res_id') :
    copy_res_id = argdict['--copy_res_id']
    if reservations_dict.has_key(copy_res_id) :
        copy_res = reservations_dict[copy_res_id]
    else :
        raise 'KeyNotFound', copy_res_id
if argdict.has_key('--earliest_start') :
    earliest_start = string.atof(argdict['--earliest_start'])
elif argdict.has_key('--copy_res_id') :
    earliest_start = copy_res['earliest_start_float']
else :
    earliest_start = None
if argdict.has_key('--duration') :
    duration_float = string.atof(argdict['--duration'])
elif argdict.has_key('--copy_res_id') :
    duration_float = copy_res['duration_float']
else :
    duration_float = None
if argdict.has_key('--latest_end') :
    latest_end = string.atof(argdict['--latest_end'])
elif argdict.has_key('--copy_res_id') :
    latest_end = copy_res['latest_end_float']
else :
    latest_end = None
if argdict.has_key('--resource_amount') :
    resource_amount = string.atoi(argdict['--resource_amount'])
elif argdict.has_key('--copy_res_id') :
    #resource_amount = copy_res['resource_amount_int']
    resource_amount = copy_res['resource_amount_requested_int']
else :
    resource_amount = None
if argdict.has_key('--job_restriction') :
    job_restriction = argdict['--job_restriction']
elif argdict.has_key('--copy_res_id') :
    job_restriction = copy_res['job_restriction']
else :
    job_restriction = None
if argdict.has_key('--node_restriction') :
    node_restriction = argdict['--node_restriction']
elif argdict.has_key('--copy_res_id') :
    node_restriction = copy_res['node_restriction']
else :
    node_restriction = None
if argdict.has_key('--node_sort_policy') :
    node_sort_policy = argdict['--node_sort_policy']
elif argdict.has_key('--copy_res_id') :
    node_sort_policy = copy_res['node_sort_policy']
else :
    node_sort_policy = None
if argdict.has_key('--conflict_policy') :
    conflict_policy = argdict['--conflict_policy']
elif argdict.has_key('--copy_res_id') :
    conflict_policy = copy_res['conflict_policy']
else :
    conflict_policy = None
if argdict.has_key('--affinity_calculation') :
    affinity_calculation = argdict['--affinity_calculation']
elif argdict.has_key('--copy_res_id') :
    affinity_calculation = copy_res['affinity_calculation']
else :
    affinity_calculation = None
if argdict.has_key('--comment') :
    comment = argdict['--comment']
elif argdict.has_key('--copy_res_id') :
    comment = copy_res['comment_string']
else :
    comment = None
if argdict.has_key('--ignore_list') :
    if argdict['--ignore_list'] == 'ALL' :
        existing_reservations = Catalina.get_object_list(reservations_db_handle)
        ignore_list = Catalina.get_object_names_list(existing_reservations)
    else :
        ignore_list = string.split(argdict['--ignore_list'], ",")
elif argdict.has_key('--copy_res_id') :
    ignore_list = copy_res['ignore_reservations_list']
else :
    ignore_list = None
if argdict.has_key('--maxhops') :
    maxhops = argdict['--maxhops']
else :
    maxhops = None
if argdict.has_key('--mode') :
    mode = argdict['--mode']
else :
    mode = 'lookahead'
requested_resource_list = []
#if argdict.has_key('--sharedeach') :
#    node_usage = 'node_shared'
#    reqs = string.split(argdict['--sharedeach'],'@')
#    singlereq = reqs[0]
#    sharedeach_list = string.split(singlereq,'#')
#    type,share_type = string.split(sharedeach_list[0],':')
#    cm_list = string.split(sharedeach_list[1],'+')
#    req_list = []
#    req_dict = {}
#    for cm in cm_list :
#        cm_name,cm_value = string.split(cm,':')
#        req_dict[cm_name] = string.atol(cm_value)
#    req_list.append(req_dict)
#    req_dict_dict = { 'type' : share_type,
#                      'req_list' : req_list }
#    if resource_amount == None :
#        requested_resource_list.append(req_dict_dict)
#    else :
#        for i in range(resource_amount) :
#            requested_resource_list.append(req_dict_dict)
if argdict.has_key('--sharedmap') :
    reqs = string.split(argdict['--sharedmap'],'@')
    #if resource_amount == None :
    #for i in range(resource_amount) :
    for req in reqs :
        sharedlist_list = string.split(req,'#')
        req_count = string.atol(sharedlist_list[0])
        type,share_type = string.split(sharedlist_list[1],':')
        cm_list = string.split(sharedlist_list[2],'+')
        req_list = []
        req_dict = {}
        for cm in cm_list :
            cm_name,cm_value = string.split(cm,':')
            req_dict[cm_name] = string.atol(cm_value)
        req_list.append(req_dict)
        req_dict_dict = { 'type' : share_type,
                          'req_list' : req_list }
        requested_resource_list.append(req_dict_dict)
    node_usage = 'node_shared'
else :
    node_usage = 'node_exclusive'

try :
    new_res = Catalina.create_reservation(
      resources_db_handle=resources_db_handle,
      reservations_db_handle=reservations_db_handle,
      jobs_db_handle=jobs_db_handle,
      old_res_id=old_res_id,
      earliest_start_float=earliest_start,
      latest_end_float=latest_end,
      duration_float=duration_float,
      resource_amount_int=resource_amount,
      requested_resource_list=requested_resource_list,
      job_restriction=job_restriction,
      node_restriction=node_restriction,
      node_usage=node_usage,
      node_sort_policy=node_sort_policy,
      conflict_policy=conflict_policy,
      affinity_calculation=affinity_calculation,
      comment_string=comment,
      maxhops=maxhops,
      ignore_reservations_list=ignore_list,
      mode=mode
    )
except 'InsufficientNodes', new_res :
    print "Insufficient nodes found! "
    Catalina.close_db(resources_db_handle)
    Catalina.close_db(reservations_db_handle)
    Catalina.close_db(jobs_db_handle)
    sys.exit(1)

if mode == 'lookahead' :
    print "reservation possible on %s nodes with start_time %s for duration %s" % \
      ( new_res['resource_amount_int'],
        new_res['start_time_float'],
        new_res['duration_float'] )
else :
    print "reservation %s created on %s nodes with start_time %s for duration %s" % \
      ( new_res['name'],
        new_res['resource_amount_int'],
        new_res['start_time_float'],
        new_res['duration_float'] )
    message = """reservation (%s) created with %d nodes at %s (%s epoch)
for user (%s) with duration seconds (%s)""" % (
      new_res['name'], new_res['resource_amount_int'],
      time.asctime(time.localtime(new_res['start_time_float'])),
      new_res['start_time_float'], pwd.getpwuid(os.getuid())[0],
      duration_float )
    subject = "Reservation created by %s" % pwd.getpwuid(os.getuid())[0]
    if Catalina.__dict__.has_key('USER_SET_RECIPIENT') :
        recipient = Catalina.USER_SET_RECIPIENT
    else :
        recipient = Catalina.MAIL_RECIPIENT
    Catalina.warn(message, subject, recipient)

    event = {
      'name' : 'create_res',
      'res' : copy.deepcopy(new_res),
    }
    Catalina.log_event(event, events_db_handle)



Catalina.close_db(resources_db_handle)
Catalina.close_db(reservations_db_handle)
Catalina.close_db(jobs_db_handle)
Catalina.close_db(events_db_handle)

sys.exit(0)
