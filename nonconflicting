# This python code fragment can be used to obtain a list of available
# node reservation windows.
# It works on input_tuple containing
# ( <nodes matching requirements>, <the requested reservation>,
#   <all existing reservations> , Now)
# returns a list, each element of which is a tuple:
# ( <window start_time_float>, <window end_time_float>, <node name> )
# To accomodate cpu and memory scheduling, need to return
# ( <window start_time_float>, <window end_time_float>, { 'nodename' : <node name>, 'cpu' : <cpus>, 'memory' : <memory>} )
def sort_by_start(first, second) :
    if first[0] < second[0] :
        return -1
    if first[0] == second[0] :
        return 0
    if first[0] > second[0] :
        return 1
accepted_nodes = input_tuple[0]
new_res = input_tuple[1]
reservations = input_tuple[2]
resources_db_handle = input_tuple[4]
resources_dict = resources_db_handle[0]
end_limit = END_OF_SCHEDULING
reservation_windows = []
node_reservations = {}
if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
    print "len(accepted_nodes) (%s)" % len(accepted_nodes)
#if new_res['purpose_type_string'] in ['preempted_job',] :
#    print "reservations (%s)" % (reservations,)
for reservation in reservations :
    #print "reservation (%s)" % reservation
    #if reservation['purpose_type_string'] == 'running' :
    #    print "reservation name (%s) purpose (%s) start (%s) end (%s)" % \
    #      (reservation['name'], reservation['purpose_type_string'], reservation['start_time_float'], reservation['end_time_float'])
    #    print "running reservation (%s)" % reservation
    #print "reservation name (%s) purpose (%s) start (%s) end (%s)" % \
    #  (reservation['name'], reservation['purpose_type_string'], reservation['start_time_float'], reservation['end_time_float'])
    res_id = reservation['name']
    node_list = reservation['node_list']
    if reservation.has_key('allocated_dict_list') and reservation['allocated_dict_list'] != None :
        allocated_dict_list = reservation['allocated_dict_list']
        #Kenneth patch leaking reservation. 7/24/06
        for allocated_dict in allocated_dict_list:
            if allocated_dict.has_key('type') and allocated_dict['type'] == 'node_exclusive' and allocated_dict.has_key('nodename'):
                #if not resources_dict.has_key(allocated_dict['nodename']) :
                #    print "resources_dict does not have (%s)" % (allocated_dict['nodename'],)
                #    sys.exit(1)
                if resources_dict.has_key(allocated_dict['nodename']) :
                    for rkey in resources_dict[allocated_dict['nodename']]['consumable_dict'].keys():
                        allocated_dict[rkey] = resources_dict[allocated_dict['nodename']]['consumable_dict'][rkey]
                        # should allocated_dict['node'] = 1 here?

                    #if resources_dict[allocated_dict['nodename']].has_key('ConsumableCpus'):
                    #    allocated_dict['cpu'] = resources_dict[allocated_dict['nodename']]['ConsumableCpus']
                    #if resources_dict[allocated_dict['nodename']].has_key('ConsumableMemory'):
                    #    allocated_dict['memory'] = resources_dict[allocated_dict['nodename']]['ConsumableMemory']
                else :
                    for rkey in resources_dict[allocated_dict['nodename']]['consumable_dict'].keys():
                        allocated_dict[rkey] = 0
                    #allocated_dict['cpu'] = 0
                    #allocated_dict['memory'] = 0
        #end of patch

        if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
            print "existing allocated_dict_list (%s)" % (allocated_dict_list,)
    else :
        allocated_dict_list = []
        for node in reservation['node_list'] :
            #if DEBUGJOB != None :
            #print "node (%s)" % node
            #if resources_dict.has_key(node) and resources_dict[node].has_key('ConsumableCpus') and resources_dict[node].has_key('ConsumableMemory') :
            #    allocated_consumablecpus = resources_dict[node]['ConsumableCpus']
            #    allocated_consumablememory = resources_dict[node]['ConsumableMemory']
            #else :
            #    allocated_consumablecpus = 0
            #    allocated_consumablememory = 0
            #allocated_dict_list.append(
            #  { 'nodename' : node,
            #    'type' : 'node_exclusive',
            #    'node' : 1,
            #    'cpu' : allocated_consumablecpus,
            #    'memory' : allocated_consumablememory }
            #  )

            allocated_dict = { 'nodename' : node,
              'type' : 'node_exclusive',
              'node' : 1,}
            for rkey in resources_dict[node]['consumable_dict'].keys():
                allocated_dict[rkey] = resources_dict[node]['consumable_dict'][rkey]
            allocated_dict_list.append(copy.deepcopy(allocated_dict))

        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
            print "generated allocated_dict_list (%s)" % (allocated_dict_list,)
    node_resource_list = filter(lambda x : x.has_key('nodename'), allocated_dict_list)
    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
        print "node_resource_list (%s)" % (node_resource_list,)
    start_time_float = reservation['start_time_float']
    if reservation.has_key('end_time_float') :
        end_time_float = reservation['end_time_float']
    else :
        end_time_float = END_OF_SCHEDULING
    #print "getting open windows for node_resource_list (%s)" % (node_resource_list,)
    for index in range(len(node_resource_list)) :
        node = node_resource_list[index]['nodename']
        if not resources_dict.has_key(node) or not node in accepted_nodes :
            #print "not in accepted_nodes_list, continuing. node_resource_list[index] (%s)" % (node_resource_list[index],)
            continue
        if not node_reservations.has_key(node) :
            node_reservations[node] = []
            nr_dict = {}
            nr_dict['nodename'] = node
            nr_dict['type'] = 'node_exclusive'
            nr_dict['node'] = 1
            for rkey in resources_dict[node]['consumable_dict'].keys():
                nr_dict[rkey] = resources_dict[node]['consumable_dict'][rkey]
 
            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                #print "node_reservations[node].append (%s)" % ( (0.0, 'increment', 
              #{ 'nodename' : node, 'type' : 'node_exclusive',
              #  'node' : 1,
              #  'cpu' : resources_dict[node]['ConsumableCpus'],
              #  'memory' : resources_dict[node]['ConsumableMemory']
              #}
              #),
              #)
                print "node_reservations[node].append (%s)" % (nr_dict,)
            #node_reservations[node].append( (0.0, 'add', 
            #  { 'nodename' : node, 'type' : 'node_exclusive',
            #    'node' : 1,
            #    'cpu' : resources_dict[node]['ConsumableCpus'],
            #    'memory' : resources_dict[node]['ConsumableMemory']
            #  }
            #  )
            #  )
            node_reservations[node].append( (0.0, 'add', copy.deepcopy(nr_dict)) )
            #node_reservations[node].append( (END_OF_SCHEDULING, 'decrement', 
            #  { 'nodename' : node, 'type' : 'node_exclusive',
            #    'node' : 1,
            #    'cpu' : resources_dict[node]['ConsumableCpus'],
            #    'memory' : resources_dict[node]['ConsumableMemory']
            #  } )
            #  )
            node_reservations[node].append( (END_OF_SCHEDULING, 'decrement', copy.deepcopy(nr_dict)) )
        if node in accepted_nodes :
            if node_reservations.has_key(node) :
                node_reservations[node].append( (start_time_float, 'decrement', node_resource_list[index]) )
                node_reservations[node].append( (end_time_float, 'add', node_resource_list[index]) )
            else :
                node_reservations[node] = [ (start_time_float, 'decrement', node_resource_list[index]) ]
                node_reservations[node].append( (end_time_float, 'add', node_resource_list[index]) )
            if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                print "appending node_reservation (%s, %s, %s)" % (start_time_float, end_time_float, node)
#potential_start_time_float = new_res['earliest_start_float']
#if potential_start_time_float == None :
#    potential_start_time_float = Now_float
potential_start_time_float = 0.0
#print "accepted_nodes (%s)" % (accepted_nodes,)
for accepted_node in accepted_nodes :
    if not node_reservations.has_key(accepted_node) :
        accumulated_dict = {}
        # node is free, create window for Now_float
        #reservation_windows.append( (potential_start_time_float, end_limit, accepted_node) )
        # I need resource_dict here, to see ConsumableCpus and ConsumableMemory for the node...
        for rkey in resources_dict[accepted_node]['consumable_dict'].keys():
            accumulated_dict[rkey] = resources_dict[accepted_node]['consumable_dict'][rkey]
        #if resources_dict[accepted_node].has_key('ConsumableCpus') :
        #    acConsumableCpus = resources_dict[accepted_node]['ConsumableCpus']
        #else :
        #    acConsumableCpus = 0
        #if resources_dict[accepted_node].has_key('ConsumableMemory') :
        #    acConsumableMemory = resources_dict[accepted_node]['ConsumableMemory']
        #else :
        #    acConsumableMemory = 0
        reservation_windows.append( (potential_start_time_float, end_limit, {'nodename' : accepted_node,
     'node' : 1}) )
     #           reservation_windows.append( (potential_start_time_float, end_limit, {'nodename' : accepted_node,
     #'cpu' : acConsumableCpus}) )
     #           reservation_windows.append( (potential_start_time_float, end_limit, {'nodename' : accepted_node,
     #'memory' : acConsumableMemory}) )

        for rkey in accumulated_dict.keys():
            reservation_windows.append( (potential_start_time_float, end_limit, {'nodename' : accepted_node,
 rkey : accumulated_dict[rkey]}) )

        if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
            print "appending open window (%s, %s, %s)" % (potential_start_time_float, end_limit, accepted_node)
            print "end_limit is (%s)" % time.asctime(time.localtime(end_limit))
# sort the reservations for each node, in ascending start_time_float order
# keep a potential start time for the reservation window.
# for each reservation, if the start_time_float - the potential start_time_float
# is less than the duration_float, the window is too small (or negative)
# instead of doing this by reservation, need to do it by event
# + or - of cpus or memory.  Create an open window between each event
for node in node_reservations.keys() :
    node_reservations[node].sort()
    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
        print "node_reservations[node] (%s)" % (node_reservations[node],)
    #potential_start_time_float = new_res['earliest_start_float']
    #if potential_start_time_float == None :
    #    potential_start_time_float = Now_float
    potential_start_time_float = 0.0
    #freenodes = 0
    #freecpus = 0
    #freememory = 0
    free_dict = {'node' : 0}
    for rkey in resources_dict[node]['consumable_dict'].keys():
        free_dict[rkey] = 0
    started_windows_list = []
    #negative_node = 0
    #negative_cpu = 0
    #negative_memory = 0
    negative_dict = {'node' : 0}
    for rkey in resources_dict[node]['consumable_dict'].keys():
        negative_dict[rkey] = 0
    for event in node_reservations[node] :
        if event[1] == 'add' :
            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                print "add event (%s)" % (event,)
            #if event[2]['type'] == 'node_exclusive' :
            if new_res['node_usage'] == 'node_exclusive' :
                node_amount = 1
            else :
                if event[2].has_key('node') :
                    node_amount = event[2]['node']
                else :
                    node_amount = 1
            #if event[2].has_key('node') :
            #    started_windows_list.append(
            #      ( event[0],
            #        { 'start' : event[0], 'type' : 'node',
            #          'amount' : node_amount, 'state' : 'active'
            #        }
            #      )
            #      )
            #else :
            #    # is this right?  should we really say this is the
            #    # start of a time window for a free node?
            #    started_windows_list.append(
            #      ( event[0],
            #        { 'start' : event[0], 'type' : 'node',
            #          'amount' : 1, 'state' : 'active'
            #        }
            #      )
            #      )
            #started_windows_list.append(
            #  ( event[0],
            #    { 'start' : event[0], 'type' : 'cpu',
            #      'amount' : event[2]['cpu'], 'state' : 'active'
            #    }
            #  )
            #  )
            #started_windows_list.append(
            #  ( event[0],
            #    { 'start' : event[0], 'type' : 'memory',
            #      'amount' : event[2]['memory'], 'state' : 'active'
            #    }
            #  )
            #  )
            #if event[2].has_key('node') :
            #    started_windows_list.append(
            #      ( event[0],
            #        { 'start' : event[0], 'type' : 'node',
            #          'amount' : node_amount, 'state' : 'active'
            #        }
            #      )
            #      )
            #else :
            #    started_windows_list.append(
            #      ( event[0],
            #        { 'start' : event[0], 'type' : event[2].keys()[0],
            #          'amount' : event[2][event[2].keys()[0]], 'state' : 'active'
            #        }
            #      )
            #      )
            #add event ((0.0, 'add', {'node': 1, 'cpu': 16, 'type': 'node_exclusive', 'nodename': 'debian', 'memory': 1}))
            for eventkey in event[2].keys():
                if eventkey in ['type','nodename']:
                    continue
                started_windows_list.append(
                  ( event[0],
                    { 'start' : event[0], 'type' : eventkey,
                      'amount' : event[2][eventkey], 'state' : 'active'
                    }
                  )
                  )
        if event[1] == 'decrement' :
            # sort started_windows_list LASTAVAILABLE
            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                print "decrement event(%s)" % (event,)
            #if negative_cpu > 0 :
            #    # choose early cpu starts first, to get
            #    # rid of cpu debt
            #    cpu_started_windows_list.sort()
            #else :
            #    cpu_started_windows_list.sort()
            #    cpu_started_windows_list.reverse()
            #if negative_memory > 0 :
            #    # choose early memory starts first, to get
            #    # rid of memory debt
            #    memory_started_windows_list.sort()
            #else :
            #    memory_started_windows_list.sort()
            #    memory_started_windows_list.reverse()
            started_windows_list.sort()
            started_windows_list.reverse()
            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                print "started_windows_list (%s)" % (started_windows_list,)
            #foundnodes = 0
            #foundcpus = 0
            #foundmemory = 0
            found_dict = {'node' : 0}
            for rkey in resources_dict[node]['consumable_dict'].keys():
                found_dict[rkey] = 0
            #if event[2]['type'] == 'node_exclusive' :
            #    neednode = event[2]['node']
            #else :
            #    neednode = 0
            need_dict = {}
            if new_res['node_usage'] == 'node_exclusive' :
                #neednodes = 1
                need_dict['node'] = 1
            else :
                if event[2].has_key('node') :
                    #neednodes = event[2]['node']
                    need_dict['node'] = event[2]['node']
                else :
                    #neednodes = 1
                    need_dict['node'] = 1
            #needcpus = event[2]['cpu']
            #needmemory = event[2]['memory']
            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                print "adding event[2] (%s) to need_dict" % (event[2],)
            for ekey in event[2].keys():
                if ekey == 'nodename':
                    continue
                need_dict[ekey] = event[2][ekey]
            new_windows_list = []

            # pay rkey debt
            #if negative_node > 0 :
            extra_dict = {}
            for rkey in negative_dict.keys():
                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                    print "negative_dict[%s] (%s)" % (rkey,negative_dict[rkey])
                # choose early rkey starts first, to get
                # rid of rkey debt
                started_windows_list.sort()
                #extranodes = 0
                extra_dict[rkey] = 0
                for index in range(len(started_windows_list)) :
                    started_window = started_windows_list[index]
                    if started_window[1]['state'] == 'inactive' :
                        continue
                    #if started_window[1]['type'] == 'node' :
                    if started_window[1]['type'] == rkey :
                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                            print "started_window (%s)" % (started_window,)
                        if negative_dict[rkey] == 0 :
                            break
                        found_dict[rkey] = started_window[1]['amount']
                        if found_dict[rkey] >= negative_dict[rkey] :
                            extra_dict[rkey] = found_dict[rkey] - negative_dict[rkey]
                            negative_dict[rkey] = 0
                            if extra_dict[rkey] > 0 :
                                new_started_window = copy.deepcopy(started_window)
                                new_started_window[1]['amount'] = extra_dict[rkey]
                                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                                    print "new_started_window (%s)" % (new_started_window,)
                                new_windows_list.append(new_started_window)
                        else :
                            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                                print "setting negative_dict[%s] to negative_dict[%s] (%s) - found_dict[%s] (%s)" % (rkey, rkey, negative_dict[rkey], rkey, found_dict[rkey])
                            negative_dict[rkey] = negative_dict[rkey] - found_dict[rkey]
                        started_windows_list[index][1]['state'] = 'inactive'

#                    # pay node debt
#                    if negative_node > 0 :
#                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                            print "negative_node (%s)" % negative_node
#                        # choose early node starts first, to get
#                        # rid of cpu debt
#                        started_windows_list.sort()
#                        extranodes = 0
#                        for index in range(len(started_windows_list)) :
#                            started_window = started_windows_list[index]
#                            if started_window[1]['state'] == 'inactive' :
#                                continue
#                            if started_window[1]['type'] == 'node' :
#                                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                    print "started_window (%s)" % (started_window,)
#                                if negative_node == 0 :
#                                    break
#                                foundnodes = started_window[1]['amount']
#                                if foundnodes >= negative_node :
#                                    extranodes = foundnodes - negative_node
#                                    negative_node = 0
#                                    if extranodes > 0 :
#                                        new_started_window = copy.deepcopy(started_window)
#                                        new_started_window[1]['amount'] = extranodes
#                                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                            print "new_started_window (%s)" % (new_started_window,)
#                                        new_windows_list.append(new_started_window)
#                                else :
#                                    negative_node = negative_node - foundnodes
#                                started_windows_list[index][1]['state'] = 'inactive'
#
#                    # pay cpu debt
#                    if negative_cpu > 0 :
#                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                            print "negative_cpu (%s)" % negative_cpu
#                        # choose early cpu starts first, to get
#                        # rid of cpu debt
#                        started_windows_list.sort()
#                        extracpus = 0
#                        for index in range(len(started_windows_list)) :
#                            started_window = started_windows_list[index]
#                            if started_window[1]['state'] == 'inactive' :
#                                continue
#                            if started_window[1]['type'] == 'cpu' :
#                                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                    print "started_window (%s)" % (started_window,)
#                                if negative_cpu == 0 :
#                                    break
#                                foundcpus = started_window[1]['amount']
#                                if foundcpus >= negative_cpu :
#                                    extracpus = foundcpus - negative_cpu
#                                    negative_cpu = 0
#                                    if extracpus > 0 :
#                                        new_started_window = copy.deepcopy(started_window)
#                                        new_started_window[1]['amount'] = extracpus
#                                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                            print "new_started_window (%s)" % (new_started_window,)
#                                        new_windows_list.append(new_started_window)
#                                else :
#                                    negative_cpu = negative_cpu - foundcpus
#                                started_windows_list[index][1]['state'] = 'inactive'
#
#
#
#
#                    # pay memory debt
#                    if negative_memory > 0 :
#                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                            print "negative_memory (%s)" % negative_memory
#                        # choose early memory starts first, to get
#                        # rid of memory debt
#                        started_windows_list.sort()
#                        extramemory = 0
#                        for index in range(len(started_windows_list)) :
#                            started_window = started_windows_list[index]
#                            if started_window[1]['state'] == 'inactive' :
#                                continue
#                            if started_window[1]['type'] == 'memory' :
#                                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                    print "started_window (%s)" % (started_window,)
#                                if negative_memory == 0 :
#                                    break
#                                foundmemory = started_window[1]['amount']
#                                if foundmemory >= negative_memory :
#                                    extramemory = foundmemory - negative_memory
#                                    negative_memory = 0
#                                    if extramemory > 0 :
#                                        new_started_window = copy.deepcopy(started_window)
#                                        new_started_window[1]['amount'] = extramemory
#                                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                            print "new_started_window (%s)" % (new_started_window,)
#                                        new_windows_list.append(new_started_window)
#                                else :
#                                    negative_memory = negative_memory - foundmemory
#                                started_windows_list[index][1]['state'] = 'inactive'


            started_windows_list = started_windows_list + new_windows_list
            new_windows_list = []
            started_windows_list.sort()
            started_windows_list.reverse()
            #foundnodes = 0
            #foundcpus = 0
            #foundmemory = 0
            found_dict = {'node' : 0}
            for rkey in resources_dict[node]['consumable_dict'].keys():
                found_dict[rkey] = 0
                if not rkey in need_dict.keys():
                    need_dict[rkey] = 0
            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                print "negative_dict['node'] (%s) negative_dict['cpu'] (%s) negative_dict['memory'] (%s)" % (negative_dict['node'], negative_dict['cpu'], negative_dict['memory'])
                print "started_windows_list (%s)" % (started_windows_list,)
            for index in range(len(started_windows_list)) :
                started_window = started_windows_list[index]
                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                    print "started_window (%s)" % (started_window,)
                if started_window[1]['state'] == 'inactive' :
                    continue

                #print "looping through rkeys for started_window(%s)" % (started_window,)
                for rkey in found_dict.keys():
                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                        print "rkey (%s)" % rkey
                        print "found_dict[rkey] (%s) need_dict[rkey] (%s)" % (found_dict[rkey], need_dict[rkey])
                        print "started_window[1] (%s)" % (started_window[1],)
                    if started_window[1]['type'] == rkey :
                        if found_dict[rkey] >= need_dict[rkey] :
                            continue
                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                            print "adding started_window[1]['amount'] (%s) to found_dict[%s] (%s)" % (started_window[1]['amount'], rkey, found_dict[rkey])
                        found_dict[rkey] = found_dict[rkey] + started_window[1]['amount']
                        if found_dict[rkey] >= 0 :
                            negative_dict[rkey] = 0
                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                            print "found_dict[rkey] (%s)" % found_dict[rkey]
                            print "need_dict[rkey] (%s)" % need_dict[rkey]
                        if found_dict[rkey] >= need_dict[rkey] :
                            extra_dict[rkey] = found_dict[rkey] - need_dict[rkey]
                            if extra_dict[rkey] > 0 :
                                new_started_window = copy.deepcopy(started_window)
                                #new_started_window[1]['amount'] = extranodes
                                new_started_window[1]['amount'] = extra_dict[rkey]
                                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                                    print "new_started_window (%s)" % (new_started_window,)
                                new_windows_list.append(new_started_window)
                            if started_window[1]['start'] != event[0] :
                                if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                                    print "1. appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
                                      {'nodename' : node,
                                       rkey : started_window[1]['amount'] - extra_dict[rkey]}
                                      ),
                                      )
                                    print "start (%s) end (%s)" % (time.asctime(time.localtime(started_window[1]['start'])), time.asctime(time.localtime(event[0])))
                                reservation_windows.append(
                                  (started_window[1]['start'], event[0],
                                   {'nodename' : node,
                                    rkey : started_window[1]['amount'] - extra_dict[rkey]}
                                  )
                                  )
                        else :
                            # remove started_window from list,
                            # end the previously started windows
                            # append to reservation_windows
                            if started_window[1]['amount'] > 0 and found_dict[rkey] > 0 :
                                if started_window[1]['start'] != event[0] :
                                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                                        print "2. appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
                                          {'nodename' : node,
                                           rkey : started_window[1]['amount']}
                                          ),
                                          )
                                    reservation_windows.append(
                                      (started_window[1]['start'], event[0],
                                       {'nodename' : node,
                                        rkey : started_window[1]['amount']}
                                      )
                                      )
                        started_windows_list[index][1]['state'] = 'inactive'
                #print "after looping through rkeys for started_window(%s)" % (started_window,)

#                        if started_window[1]['type'] == 'node' :
#                            if foundnodes >= neednodes :
#                                continue
#                            foundnodes = foundnodes + started_window[1]['amount']
#                            if foundnodes >= 0 :
#                                negative_node = 0
#                            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                print "foundnodes (%s)" % foundnodes
#                                print "neednodes (%s)" % neednodes
#                            if foundnodes >= neednodes :
#                                extranodes = foundnodes - neednodes
#                                if extranodes > 0 :
#                                    new_started_window = copy.deepcopy(started_window)
#                                    new_started_window[1]['amount'] = extranodes
#                                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                        print "new_started_window (%s)" % (new_started_window,)
#                                    new_windows_list.append(new_started_window)
#                                if started_window[1]['start'] != event[0] :
#                                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                        print "appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
#                                          {'nodename' : node,
#                                           'node' : started_window[1]['amount'] - extranodes}
#                                          ),
#                                          )
#                                        print "start (%s) end (%s)" % (time.asctime(time.localtime(started_window[1]['start'])), time.asctime(time.localtime(event[0])))
#                                    reservation_windows.append(
#                                      (started_window[1]['start'], event[0],
#                                       {'nodename' : node,
#                                        'node' : started_window[1]['amount'] - extranodes}
#                                      )
#                                      )
#                            else :
#                                # remove started_window from list,
#                                # end the previously started windows
#                                # append to reservation_windows
#                                if started_window[1]['amount'] > 0 and foundnodes > 0 :
#                                    if started_window[1]['start'] != event[0] :
#                                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                            print "appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
#                                              {'nodename' : node,
#                                               'node' : started_window[1]['amount']}
#                                              ),
#                                              )
#                                        reservation_windows.append(
#                                          (started_window[1]['start'], event[0],
#                                           {'nodename' : node,
#                                            'node' : started_window[1]['amount']}
#                                          )
#                                          )
#                            started_windows_list[index][1]['state'] = 'inactive'
#
#
#                        if started_window[1]['type'] == 'cpu' :
#                            if foundcpus >= needcpus :
#                                continue
#                            foundcpus = foundcpus + started_window[1]['amount']
#                            if foundcpus >= 0 :
#                                negative_cpu = 0
#                            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                print "foundcpus (%s)" % foundcpus
#                                print "needcpus (%s)" % needcpus
#                            if foundcpus >= needcpus :
#                                extracpus = foundcpus - needcpus
#                                if extracpus > 0 :
#                                    new_started_window = copy.deepcopy(started_window)
#                                    new_started_window[1]['amount'] = extracpus
#                                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                        print "new_started_window (%s)" % (new_started_window,)
#                                    new_windows_list.append(new_started_window)
#                                if started_window[1]['start'] != event[0] :
#                                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                        print "appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
#                                          {'nodename' : node,
#                                           'cpu' : started_window[1]['amount'] - extracpus}
#                                          ),
#                                          )
#                                    reservation_windows.append(
#                                      (started_window[1]['start'], event[0],
#                                       {'nodename' : node,
#                                        'cpu' : started_window[1]['amount'] - extracpus}
#                                      )
#                                      )
#                            else :
#                                # remove started_window from list,
#                                # end the previously started windows
#                                # append to reservation_windows
#                                if started_window[1]['amount'] > 0 and foundcpus > 0 :
#                                    if started_window[1]['start'] != event[0] :
#                                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                            print "appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
#                                              {'nodename' : node,
#                                               'cpu' : started_window[1]['amount']}
#                                              ),
#                                              )
#                                        reservation_windows.append(
#                                          (started_window[1]['start'], event[0],
#                                           {'nodename' : node,
#                                            'cpu' : started_window[1]['amount']}
#                                          )
#                                          )
#                            started_windows_list[index][1]['state'] = 'inactive'
#
#
#
#                        if started_window[1]['type'] == 'memory' :
#                            if foundmemory >= needmemory :
#                                continue
#                            foundmemory = foundmemory + started_window[1]['amount']
#                            if foundmemory >= 0 :
#                                negative_memory = 0
#                            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                print "foundmemory (%s)" % foundmemory
#                                print "needmemory (%s)" % needmemory
#                            if foundmemory >= needmemory :
#                                extramemory = foundmemory - needmemory
#                                if extramemory > 0 :
#                                    new_started_window = copy.deepcopy(started_window)
#                                    new_started_window[1]['amount'] = extramemory
#                                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                        print "new_started_window (%s)" % (new_started_window,)
#                                    new_windows_list.append(new_started_window)
#                                if started_window[1]['start'] != event[0] :
#                                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                        print "appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
#                                          {'nodename' : node,
#                                           'memory' : started_window[1]['amount'] - extramemory}
#                                          ),
#                                          )
#                                    reservation_windows.append(
#                                      (started_window[1]['start'], event[0],
#                                       {'nodename' : node,
#                                        'memory' : started_window[1]['amount'] - extramemory}
#                                      )
#                                      )
#                            else :
#                                # remove started_window from list,
#                                # end the previously started windows
#                                # append to reservation_windows
#                                if started_window[1]['amount'] > 0 and foundmemory > 0 :
#                                    if started_window[1]['start'] != event[0] :
#                                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                            print "appending reservation_window (%s)" % (                                     (started_window[1]['start'], event[0],
#                                              {'nodename' : node,
#                                               'memory' : started_window[1]['amount']}
#                                              ),
#                                              )
#                                        reservation_windows.append(
#                                          (started_window[1]['start'], event[0],
#                                           {'nodename' : node,
#                                            'memory' : started_window[1]['amount']}
#                                          )
#                                          )
#                            #del started_windows_list[index]
#                            started_windows_list[index][1]['state'] = 'inactive'
                foundall = 1
                for rkey in found_dict.keys():
                    if found_dict[rkey] < need_dict[rkey]:
                        if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                            print "failed to fulfil (%s) found_dict (%s) need_dict (%s)" % (rkey, found_dict, need_dict)
                        foundall = 0
                if foundall == 1:
                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                        print "found nodes and cpus and memory (%s)" % (found_dict,)
                    break
                else:
                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                        print "foundall != 1 found_dict (%s) need_dict (%s)" % (found_dict,need_dict)
                   
                #if foundnodes >= neednodes and foundcpus >= needcpus and foundmemory >= needmemory :
                #    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                #        print "found nodes and cpus and memory (%s) (%s) (%s)" % (foundnodes, foundcpus, foundmemory)
                #    break

            #if foundnodes < neednodes or foundcpus < needcpus or foundmemory < needmemory :
            #print "looping through found_dict (%s)" % (found_dict,)
            for rkey in found_dict.keys():
                if found_dict[rkey] < need_dict[rkey]:
                # nodes or cpus or memory are overcommitted.  Create
                # a negative amount started window.
                    if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
                        print "overcommitted %s need_dict[%s] - found_dict[%s] (%s)" % (rkey, rkey, rkey, need_dict[rkey] - found_dict[rkey],)
                    negative_dict[rkey] = negative_dict[rkey] + need_dict[rkey] - found_dict[rkey]
            #print "after looping through found_dict (%s)" % (found_dict,)



#                        if foundnodes < neednodes :
#                            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                print "overcommitted nodes neednodes - foundnodes (%s)" % (neednodes - foundnodes,)
#                            negative_node = negative_node + neednodes - foundnodes
#                        if foundcpus < needcpus :
#                            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                print "overcommitted cpus needcpus - foundcpus (%s)" % (needcpus - foundcpus,)
#                            negative_cpu = negative_cpu + needcpus - foundcpus
#                        if foundmemory < needmemory :
#                            if DEBUGJOB != None  and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                                print "overcommitted cpus needmemory - foundmemory (%s)" % (needmemory - foundmemory,)
#                            negative_memory = negative_memory + needmemory - foundmemory
            started_windows_list = started_windows_list + new_windows_list
        #if event[0] > potential_start_time_float :
        #    # create open window here
        #reservation_windows.append( 
        #  (potential_start_time_float,
        #  reservation[0], { 'nodename' : node, 'cpu' : ) ) 
#            for reservation in node_reservations[node] :
#                if reservation[0] < end_limit :
#                    # reservation starts before end_limit
#                    if reservation[0] - potential_start_time_float >= \
#                    new_res['duration_float'] :
#                        # There is enough space ( duration )
#                        # between the potential start time and the start of this
#                        # blocking node reservation
#                        reservation_windows.append( 
#                          (potential_start_time_float,
#                          reservation[0], { 'nodename' : node, 'cpu' : ) ) 
#                        if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                            print "appending open window (%s, %s, %s)" % (potential_start_time_float, reservation[0], node)
#                            print "appending open window (%s, %s, %s)" % (time.asctime(time.localtime(potential_start_time_float)), time.asctime(time.localtime(reservation[0])), node)
#                else :
#                    # reservations starts after end_limit
#                    if end_limit - potential_start_time_float >= \
#                    new_res['duration_float'] :
#                        # There is enough space between the potential
#                        # start time and the end_limit for duration
#                        reservation_windows.append(
#                        (potential_start_time_float,
#                        end_limit, node) ) 
#                        if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
#                            print "appending open window (%s, %s, %s)" % (potential_start_time_float, end_limit, node)
#                if reservation[1] > potential_start_time_float :
#                    # The node reservation ends after the potential start time
#                    # advance the potential start time for this node
#                    # for cpu/memory scheduling the next cpu/memory open
#                    # window might overlap this reservations end time...
#                    potential_start_time_float = reservation[1]
    # handle the last window for the node
    #last_window = None
    #if end_limit >= potential_start_time_float + new_res['duration_float'] :
    #    last_window = ( potential_start_time_float, end_limit, node )
    #if last_window != None :
    #    reservation_windows.append(last_window)
    #    if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
    #        print "appending open window (%s, %s, %s)" % (potential_start_time_float, end_limit, node)
reservation_windows.sort()
if DEBUGJOB != None and new_res['job_runID'] != None and new_res['job_runID'] == DEBUGJOB :
    print "checking reservation_windows before returning"
    for new_window in reservation_windows :
        print "new_window[0] (%s), new_window[1] (%s), new_window[2] (%s)" % \
          (time.asctime(time.localtime(new_window[0])), time.asctime(time.localtime(new_window[1])), new_window[2])
result = reservation_windows
#return result
# End of get_nonconflicting function
