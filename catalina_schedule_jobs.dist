#!___PYTHON_PATH_PLACEHOLDER___
# script to update the resource database

import time
import sys
sys.path.append('___HOMEDIR_PLACEHOLDER___')
import Catalina
import Catalina____RESOURCEMANAGER_PLACEHOLDER___
import os
import getopt
import socket
import traceback
import string
import types
import copy

RESOURCES_DB = 'resource'
JOBS_DB = 'jobs'
RESERVATIONS_DB = 'reservations'
OLD_JOBS_DB = 'old_jobs'
OLD_RESERVATIONS_DB = 'old_reservations'
STANDING_RESERVATIONS_DB = 'standing_reservations'
CONFIGURED_RESOURCES_DB = 'configured_resources'
CONFIGURATION_DB = 'configuration'
EVENTS_DB = 'events'

options = [
  'debugjob=',
  'iterate',
  'shortcut',
  'startcount=',
  'endcount='
]

def instance_remove(configuration_db_handle) :
    if configuration_dict.has_key('server_hosts_pidslist_dict') :
        temp_dict = Catalina.get_object('server_hosts_pidslist_dict',
          configuration_db_handle)
        Catalina.delete_object('server_hosts_pidslist_dict',
          configuration_db_handle)
    else :
        temp_dict = {}
    my_hostname = socket.gethostname()
    my_pid = os.getpid()
    if temp_dict.has_key(my_hostname) :
        temp_pidslist = filter(lambda pid, my_pid=my_pid : pid != my_pid,
          temp_dict[my_hostname])
        if len(temp_pidslist) > 0 :
            temp_dict[my_hostname] = temp_pidslist
        else :
            del temp_dict[my_hostname]
        print "temp_pidslist (%s)" % temp_pidslist
    Catalina.insert_new_object_with_key('server_hosts_pidslist_dict',
      temp_dict, configuration_db_handle)
    update_object = { 'name' : 'last_schedule_update', 'timestamp' : Catalina.Now_float }
    Catalina.insert_new_object(update_object, configuration_db_handle)
    Catalina.close_db(configuration_db_handle)

args = sys.argv[1:]
argdict = {}
optlist, lineargs = getopt.getopt(args, '', options)
for pair in optlist:
    argdict[pair[0]] = pair[1]
if argdict.has_key('--startcount') :
    startcount = string.atoi(argdict['--startcount'])
else :
    startcount = 0
if argdict.has_key('--endcount') :
    endcount = string.atoi(argdict['--endcount'])
elif not argdict.has_key('--iterate') :
    endcount = startcount
if argdict.has_key('--debugjob') :
    Catalina.DEBUGJOB = argdict['--debugjob']
if argdict.has_key('--shortcut') :
    SHORTCUT = 1
else :
    SHORTCUT = 0

start_time = time.clock()
state = 'running'
count = startcount
failed_count = 0
log_warn_count = 0
jobs_list = []
reservations_list = []
resources_list = []
old_jobs_list = []
old_reservations_list = []
old_resources_list = []
while ( (state == 'running' or state == 'suspended') and
  (argdict.has_key('--iterate') or count <= endcount) ) :
    cfg_resources_db_handle = None
    events_db_handle = None
    jobs_db_handle = None
    old_jobs_db_handle = None
    old_reservations_db_handle = None
    reservations_db_handle = None
    resources_db_handle = None
    standing_reservations_db_handle = None
    try :
        #if Catalina.SERVERMODE == 'SIM' :
        #    Catalina.Now_float = float(os.system(Catalina.TIME_SIM))
        #else :
        #    Catalina.Now_float = time.time()
        #Catalina.Now_float = Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.get_scheduler_time()
        Catalina.Now_float = Catalina.get_scheduler_time()
        print "iteration (%s)" % count
        print "Catalina.Now_float (%s)" % time.asctime(time.localtime(Catalina.Now_float))
        print "%s" % time.clock()
        iteration_start_float = time.time()
        configuration_db_handle = Catalina.open_db(CONFIGURATION_DB,'write')
        configuration_dict = configuration_db_handle[0]
        if configuration_dict.has_key('state') :
            if configuration_dict['state'] == 'stopped' :
                print "Scheduler has state 'stopped'.  Exiting..."
                instance_remove(configuration_db_handle)
                state = 'stopped'
                raise Catalina.SchedulerStopped
            elif configuration_dict['state'] == 'suspended' :
                print "Scheduler has state 'suspended'.  Sleeping..."
                time.sleep(30)
                Catalina.close_db(configuration_db_handle)
                state = 'suspended'
                raise Catalina.SchedulerSuspended
            elif configuration_dict['state'] == 'running' :
                state = 'running'
                if configuration_dict.has_key('server_hosts_pidslist_dict') :
                    temp_dict = Catalina.get_object(
                      'server_hosts_pidslist_dict', configuration_db_handle)
                    Catalina.delete_object('server_hosts_pidslist_dict',
                      configuration_db_handle)
                else :
                    temp_dict = {}
                my_hostname = socket.gethostname()
                my_pid = os.getpid()
                if temp_dict.has_key(my_hostname) :
                    temp_dict[my_hostname].append(my_pid)
                else :
                    temp_dict[my_hostname] = [my_pid,]
                print "temp_dict[my_hostname] (%s)" % temp_dict[my_hostname]
                Catalina.insert_new_object_with_key('server_hosts_pidslist_dict', temp_dict, configuration_db_handle)
            else :
                print "Scheduler has unknown state. Exiting..."
                instance_remove(configuration_db_handle)
                state = 'stopped'
                sys.exit(1)
        Catalina.close_db(configuration_db_handle)
        cfg_resources_db_handle = Catalina.open_db(CONFIGURED_RESOURCES_DB,'write')
        events_db_handle = Catalina.open_db(EVENTS_DB,'write')
        jobs_db_handle = Catalina.open_db(JOBS_DB,'write')
        old_jobs_db_handle = Catalina.open_db(OLD_JOBS_DB,'write')
        old_reservations_db_handle = Catalina.open_db(OLD_RESERVATIONS_DB,'write')
        reservations_db_handle = Catalina.open_db(RESERVATIONS_DB,'write')
        resources_db_handle = Catalina.open_db(RESOURCES_DB,'write')
        standing_reservations_db_handle = Catalina.open_db(STANDING_RESERVATIONS_DB,'read')
        #print "updating standing reservations"
        #Catalina.update_standing_reservations(
        #  events_db_handle=events_db_handle,
        #  jobs_db_handle=jobs_db_handle,
        #  resources_db_handle=resources_db_handle,
        #  reservations_db_handle=reservations_db_handle,
        #  standing_reservations_db_handle=standing_reservations_db_handle)
        if count % 10 == 0 :
            #print "reloading job resource lists"
            #Catalina.reload_job_resource_lists(events_db_handle, jobs_db_handle, resources_db_handle)
            print "moving old jobs"
            Catalina.move_old_jobs(events_db_handle, jobs_db_handle, old_jobs_db_handle)
            print "moving old reservations"
            Catalina.move_old_reservations(events_db_handle, reservations_db_handle, old_reservations_db_handle)
            #print "refreshing node dictionary"
            #Catalina.reload_job_resource_lists(events_db_handle,jobs_db_handle,resources_db_handle)
            print "rolling logs"
            try :
                Catalina.roll_logs(events_db_handle, old_jobs_db_handle, old_reservations_db_handle)
            except :
                info_tuple = sys.exc_info()
                print "(%s) (%s) (%s)" % info_tuple
                info_list = ["%s" % info_tuple[0], "%s" % info_tuple[1], '\n']
                traceback.print_tb(info_tuple[2])
                tb_list = traceback.format_tb(info_tuple[2])
                info_list = info_list + tb_list
                tb_text = string.join(info_list)
                message = tb_text
                subject = 'Catalina warning'
                recipient = Catalina.MAIL_RECIPIENT
                print "message (%s)" % message
                print "subject (%s)" % subject
                print "recipient (%s)" % recipient
                log_warn_count = log_warn_count + 1
                if log_warn_count == 1 :
                    Catalina.warn(message, subject, recipient)
            else :
                log_warn_count = 0
        
        # feature 669
        if count % Catalina.MACHINE_REFRESH_INTERVAL == 0 :
            print "refreshing node dictionary after %s intervals" %(Catalina.MACHINE_REFRESH_INTERVAL)
            print "update_resources and filter out bad nodes from job list"
            Catalina.update_resources(resources_db_handle, cfg_resources_db_handle,jobs_db_handle)
            Catalina.reload_job_resource_lists(events_db_handle,jobs_db_handle,resources_db_handle)
            
        #print "update_resources and filter out bad nodes from job list"
        #Catalina.update_resources(resources_db_handle, cfg_resources_db_handle,jobs_db_handle)
        print "update_job_info"
        Catalina.update_job_info(jobs_db_handle)
        print "cancel_overrun_jobs"
        Catalina.cancel_overrun_jobs(events_db_handle, jobs_db_handle)
        print "cancel_bad_jobs"
        Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.cancel_bad_jobs(jobs_db_handle, resources_db_handle, events_db_handle)
        print "update_job_resource_lists"
        Catalina.update_job_resource_lists(jobs_db_handle, resources_db_handle)
        print "update_resource_usability"
        Catalina.set_resource_usability(resources_db_handle, jobs_db_handle)
        print "update_job_speculative_system_queue_time"
        Catalina.update_job_speculative_system_queue_time(jobs_db_handle)
        print "update_job_priorities"
        Catalina.update_job_priorities(jobs_db_handle)
        print "get_eligible_and_running_jobs"
        (eligible_jobs, runningstarting_jobs) = Catalina.get_eligible_and_running_jobs(jobs_db_handle,
            resources_db_handle, reservations_db_handle)
        print "update_running_reservations"
        Catalina.update_running_reservations(runningstarting_jobs, reservations_db_handle, resources_db_handle, jobs_db_handle, events_db_handle)
        print "updating standing reservations"
        Catalina.update_standing_reservations(
          events_db_handle=events_db_handle,
          jobs_db_handle=jobs_db_handle,
          resources_db_handle=resources_db_handle,
          reservations_db_handle=reservations_db_handle,
          standing_reservations_db_handle=standing_reservations_db_handle)
        print "migrating shortpools"
        Catalina.migrate_shortpools(jobs_db_handle, resources_db_handle, reservations_db_handle)
        #print "update_max_pushback"
        #update_max_pushback(jobs_db_handle, reservations_db_handle, resources_db_handle)
        # cleanup job starts, if needed
        if sys.__dict__['modules']['Catalina____RESOURCEMANAGER_PLACEHOLDER___'].__dict__.has_key('cleanup_job_starts') :
            print "cleanup_job_starts"
            Catalina____RESOURCEMANAGER_PLACEHOLDER___.cleanup_job_starts(jobs_db_handle=jobs_db_handle, resources_db_handle=resources_db_handle, reservations_db_handle=reservations_db_handle)
        else:
            print "no cleanup_job_starts in dict "
        # only schedule_jobs, if something has changed:
        # prioritized job list
        # any job status
        # any resource status
        # any reservation status
        if SHORTCUT == 1 :
            generate_schedule = 0
            jobs_list = []
            for job_name in jobs_db_handle[0].keys() :
                jobs_list.append((jobs_db_handle[0][job_name]['priority'],\
                  jobs_db_handle[0][job_name]['state'],\
                  job_name))
            jobs_list.sort()
            reservations_list = []
            for reservation_name in reservations_db_handle[0].keys() :
                reservations_list.append((reservation_name,\
                  reservations_db_handle[0][reservation_name]['node_list'],\
                  reservations_db_handle[0][reservation_name]['start_time_float'],\
                  reservations_db_handle[0][reservation_name]['end_time_float'],\
                  ))
            reservations_list.sort()
            resources_list = []
            for resource_name in resources_db_handle[0].keys() :
                resources_list.append((resource_name,\
                  resources_db_handle[0][resource_name]['properties_list'],\
                  resources_db_handle[0][resource_name]['State'],\
                  ))
            resources_list.sort()
            if len(jobs_list) == len(old_jobs_list) :
                for job_index in range(len(jobs_list)) :
                    if jobs_list[job_index][1] != old_jobs_list[job_index][1] \
                      or jobs_list[job_index][2] != old_jobs_list[job_index][2] :
                        print "jobs (%s,%s) differ" % (jobs_list[job_index],\
                          old_jobs_list[job_index])
                        generate_schedule = 1
                        break
            else :
                print "len(jobs_list) (%s) != len(old_jobs_list) (%s)" % \
                  (len(jobs_list), len(old_jobs_list))
                generate_schedule = 1
            if generate_schedule == 0 :
                if len(reservations_list) == len(old_reservations_list) :
                    for reservation_index in range(len(reservations_list)) :
                        if reservations_list[reservation_index][1] != old_reservations_list[reservation_index][1] \
                          or reservations_list[reservation_index][2] != old_reservations_list[reservation_index][2] \
                          or reservations_list[reservation_index][3] != old_reservations_list[reservation_index][3] :
                            print "(%s,%s)" % (
                              reservations_db_handle[0][reservations_list[reservation_index][0]],\
                              reservations_db_handle[0][old_reservations_list[reservation_index][0]])
                            print "reservations (%s,%s) differ" % (
                              reservations_list[reservation_index],\
                              old_reservations_list[reservation_index])
                            generate_schedule = 1
                            break
                else :
                    print "len(reservations_list) (%s) != len(old_reservation_list) (%s)" % \
                      (len(reservations_list), len(old_reservations_list))
                    generate_schedule = 1
            if generate_schedule == 0 :
                if len(resources_list) == len(old_resources_list) :
                    for resource_index in range(len(resources_list)) :
                        if resources_list[resource_index][1] != old_resources_list[resource_index][1] \
                          or resources_list[resource_index][2] != old_resources_list[resource_index][2] :
                            print "resourcess (%s,%s) differ" % (resources_list[resource_index][2],\
                              old_resources_list[resource_index][2])
                            generate_schedule = 1
                            break
                else :
                    print "len(resources_list) (%s) != len(old_resource_list) (%s)" % \
                      (len(resources_list), len(old_resources_list))
                    generate_schedule = 1
        else :
            generate_schedule = 1
            
        if generate_schedule == 1 :
            print "create_job_reservations"
            Catalina.create_job_reservations(eligible_jobs, resources_db_handle,
                reservations_db_handle, jobs_db_handle, events_db_handle)
            old_jobs_list = copy.deepcopy(jobs_list)
            old_reservations_list = copy.deepcopy(reservations_list)
            old_resources_list = copy.deepcopy(resources_list)
        print "cancel run-at-risk jobs"
        #cancel_risk_jobs(reservations_db_handle=reservations_db_handle,
        #                 jobs_db_handle=jobs_db_handle,
        #                 events_db_handle=events_db_handle
        #                 resources_db_handle=resources_db_handle)
        Catalina.cancel_risk_reservations(reservations_db_handle=reservations_db_handle,
                         jobs_db_handle=jobs_db_handle,
                         events_db_handle=events_db_handle,
                         resources_db_handle=resources_db_handle)
        print "run_jobs"
        Catalina.Catalina____RESOURCEMANAGER_PLACEHOLDER___.run_jobs(events_db_handle, jobs_db_handle, resources_db_handle, reservations_db_handle)
        #Catalina.schedule_jobs(events_db_handle, jobs_db_handle, resources_db_handle, reservations_db_handle, cfg_resources_db_handle, standing_reservations_db_handle )

        failed_count = 0
        count = count + 1
        #print "elapsed (%s)" % (time.time() - Catalina.Now_float,)
        print "elapsed (%s)" % (time.time() - iteration_start_float,)
        time.sleep(1)
    except Catalina.SchedulerSuspended :
        print "Scheduler suspended"
    except Catalina.SchedulerStopped :
        print "Scheduler stopped"
    except (Catalina.IncompleteQJ,Catalina.IncompleteQM) :
        try :
            info_tuple = sys.exc_info()
            print "(%s) (%s) (%s)" % info_tuple
            info_list = ["%s" % info_tuple[0], "%s" % info_tuple[1], '\n']
            traceback.print_tb(info_tuple[2])
            tb_list = traceback.format_tb(info_tuple[2])
            info_list = info_list + tb_list
            tb_text = string.join(info_list)
            ## bug 557. More descriptive mail output ##
            message = 'Admins, Catalina iteration has failed and it has stopped scheduling. Please immediately take corrective actions. No new jobs will be scheduled until the error has been corrected. \n\n'
            message = message + tb_text
            subject = 'Catalina failure. Catalina is no longer running because QM/QJ has failed. '
            recipient = Catalina.MAIL_RECIPIENT
            print "message (%s)" % message
            print "subject (%s)" % subject
            print "recipient (%s)" % recipient
            
            ## bug 557 fix: Catalina failed to warn the admins in case of qj_LL 
            ## failure. This could be fatal. I think the reason is because of
            ## bad logic in failed_count. You cannot double dip on exception. 
            
            ## since the exception IncompleteQJ has a handler, python will always
            ## use it, but the code to increment failed_count is in the failsafe.
                    
            ## I still have to maintain 1 email / failure so I don't spam mailserver
            failed_count+=1
            
            if failed_count == 1 :
                Catalina.warn(message, subject, recipient)
        except :
            print "print of sys.exc_info() failed"
    except Catalina.CatalinaDBError, exc:
        configuration_db_handle = Catalina.open_db(CONFIGURATION_DB,'write')
        instance_remove(configuration_db_handle)
        print "Unrecoverable DB Error (%s)!  Exiting..." % exc.detail
        try :
            info_tuple = sys.exc_info()
            print "(%s) (%s) (%s)" % info_tuple
            info_list = ["%s" % info_tuple[0], "%s" % info_tuple[1], '\n']
            traceback.print_tb(info_tuple[2])
            tb_list = traceback.format_tb(info_tuple[2])
            info_list = info_list + tb_list
            tb_text = string.join(info_list)
            message = tb_text
            subject = 'Catalina failure and exit'
            recipient = Catalina.MAIL_RECIPIENT
            print "message (%s)" % message
            print "subject (%s)" % subject
            print "recipient (%s)" % recipient
            if failed_count == 1 :
                Catalina.warn(message, subject, recipient)
        except :
            print "print of sys.exc_info() failed"
        sys.exit(1)
    except :
        failed_count = failed_count + 1
        try :
            info_tuple = sys.exc_info()
            print "(%s) (%s) (%s)" % info_tuple
            info_list = ["%s" % info_tuple[0], "%s" % info_tuple[1], '\n']
            traceback.print_tb(info_tuple[2])
            tb_list = traceback.format_tb(info_tuple[2])
            info_list = info_list + tb_list
            tb_text = string.join(info_list)
            message = tb_text + '\n' + "outermost except, Exiting..."
            subject = 'Catalina failure and Exit!'
            recipient = Catalina.MAIL_RECIPIENT
            print "message (%s)" % message
            print "subject (%s)" % subject
            print "recipient (%s)" % recipient
            if failed_count == 1 :
                Catalina.warn(message, subject, recipient)
        except :
            print "print of sys.exc_info() failed"
        print "iteration %s failed" % count
        sys.exit(1)
    else :
        configuration_db_handle = Catalina.open_db(CONFIGURATION_DB,'write')
        #print "db_tuple (%s)" % (configuration_db_handle[1],)
        instance_remove(configuration_db_handle)
        Catalina.DB_WARN_COUNT = 0
        #Catalina.close_db(configuration_db_handle)

    if standing_reservations_db_handle != None :
        Catalina.close_db(standing_reservations_db_handle)
    if resources_db_handle != None :
        Catalina.close_db(resources_db_handle)
    if reservations_db_handle != None :
        Catalina.close_db(reservations_db_handle)
    if old_reservations_db_handle != None :
        Catalina.close_db(old_reservations_db_handle)
    if old_jobs_db_handle != None :
        Catalina.close_db(old_jobs_db_handle)
    if jobs_db_handle != None :
        Catalina.close_db(jobs_db_handle)
    if cfg_resources_db_handle != None :
        #print "closing cfg_resources_db_handle (%s)" % (cfg_resources_db_handle[1],)
        Catalina.close_db(cfg_resources_db_handle)
    if events_db_handle != None :
        Catalina.close_db(events_db_handle)
