#!___PYTHON_PATH_PLACEHOLDER___
# script to show job priorities from jobs db
# The current priority calculation:
#        priority = \
#            resource_number * RESOURCE_WEIGHT + \
#            local_number * Local_Weight + \
#            expansion_factor * EXPANSION_FACTOR_WEIGHT + \
#            queue_wait_time * SYSTEM_QUEUE_TIME_WEIGHT + \
#            submit_wait_time * SUBMIT_TIME_WEIGHT + \
#            QOS_priority * QOS_PRIORITY_WEIGHT + \
#            QOS_target_xf_value * QOS_TARGET_EXPANSION_FACTOR_WEIGHT + \
#            QOS_target_qwt_value * QOS_TARGET_QUEUE_WAIT_TIME_WEIGHT + \
# If the calculation is changed, then this report will need to be changed

import Catalina
import math
import string

JOB_DB = 'jobs'

def by_priority(first, second) :
    if not first.has_key('priority') and second.has_key('priority') :
        return 1
    if first.has_key('priority') and not second.has_key('priority') :
        return -1
    if not first.has_key('priority') and not second.has_key('priority') :
        return 0
    if first['priority'] > second['priority'] :
        return -1
    if first['priority'] == second['priority'] :
        return 0
    if first['priority'] < second['priority'] :
        return 1

def print_job_line(job_step) :
    if job_step['system_priority_mark_string'] == None :
        priority_mark_string = ' '
    else :
        priority_mark_string = job_step['system_priority_mark_string']
    priority_element_dict = job_step['priority_element_dict']
    #print "%s\t%16.0f%s %# 3.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#08.3g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g" % (
    print "%s\t%s%s   %# 3.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#08.3g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g %#07.2g:%#07.2g:%#03.3g" % (
      job_step['name'],
      job_step['priority'],
      priority_mark_string,
      long(100 * priority_element_dict['resource_number']),
      long(100 * priority_element_dict['resource_number']) * priority_element_dict['RESOURCE_WEIGHT'],
      math.floor((long(100 * priority_element_dict['resource_number']) * priority_element_dict['RESOURCE_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['expansion_factor']),
      long(100 * priority_element_dict['expansion_factor']) * priority_element_dict['EXPANSION_FACTOR_WEIGHT'],
      math.floor((long(100 * priority_element_dict['expansion_factor']) * priority_element_dict['EXPANSION_FACTOR_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['queue_wait_time']),
      long(100 * priority_element_dict['queue_wait_time']) * priority_element_dict['SYSTEM_QUEUE_TIME_WEIGHT'],
      math.floor((long(100 * priority_element_dict['queue_wait_time']) * priority_element_dict['SYSTEM_QUEUE_TIME_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['submit_wait_time']),
      long(100 * priority_element_dict['submit_wait_time']) * priority_element_dict['SUBMIT_TIME_WEIGHT'],
      math.floor((long(100 * priority_element_dict['submit_wait_time']) * priority_element_dict['SUBMIT_TIME_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['QOS_target_xf_value']),
      long(100 * priority_element_dict['QOS_target_xf_value']) * priority_element_dict['QOS_TARGET_EXPANSION_FACTOR_WEIGHT'],
      math.floor((long(100 * priority_element_dict['QOS_target_xf_value']) * priority_element_dict['QOS_TARGET_EXPANSION_FACTOR_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['QOS_target_qwt_value']),
      long(100 * priority_element_dict['QOS_target_qwt_value']) * priority_element_dict['QOS_TARGET_QUEUE_WAIT_TIME_WEIGHT'],
      math.floor((long(100 * priority_element_dict['QOS_target_qwt_value']) * priority_element_dict['QOS_TARGET_QUEUE_WAIT_TIME_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['QOS_priority']),
      long(100 * priority_element_dict['QOS_priority']) * priority_element_dict['QOS_PRIORITY_WEIGHT'],
      math.floor((long(100 * priority_element_dict['QOS_priority']) * priority_element_dict['QOS_PRIORITY_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['local_admin_float']),
      long(100 * priority_element_dict['local_admin_float']) * priority_element_dict['LOCAL_ADMIN_WEIGHT'],
      math.floor((long(100 * priority_element_dict['local_admin_float']) * priority_element_dict['LOCAL_ADMIN_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['local_user_float']),
      long(100 * priority_element_dict['local_user_float']) * priority_element_dict['LOCAL_USER_WEIGHT'],
      math.floor((long(100 * priority_element_dict['local_user_float']) * priority_element_dict['LOCAL_USER_WEIGHT'] * 100) / job_step['priority']),
      long(100 * priority_element_dict['wall_clock_time']),
      long(100 * priority_element_dict['wall_clock_time']) * priority_element_dict['WALL_TIME_WEIGHT'],
      math.floor((long(100 * priority_element_dict['wall_clock_time']) * priority_element_dict['WALL_TIME_WEIGHT'] * 100) / job_step['priority'])
    )

db_handle = Catalina.open_ro_db(JOB_DB,'read')
job_steps = Catalina.get_object_list(db_handle)

idle_jobs = filter ( lambda job : job['state'] in ['Idle', 'IDLE'], job_steps )

eligible_jobs = filter ( lambda job : job['ineligible_reason'] == 'Eligible', idle_jobs )
ineligible_jobs = filter ( lambda job : job['ineligible_reason'] != 'Eligible', idle_jobs )

eligible_jobs.sort(by_priority)
ineligible_jobs.sort(by_priority)

#print "JobStepID\t\tPriority\tResource\t\tXFactor\t\t\tQTime\t\t\tSTime\t\t\tQOSTargetXF\t\tQOSTargetQT\t\tQOSPriority"
#print "Weights\t\t\t\t\t%s\t\t\t%s\t\t\t%s\t\t\t%s\t\t\t%s\t\t\t%s\t\t\t%s" % \
print "JobStepID\t\tPriority     Resource         XFactor              QTime                STime                QOSTargetXF           QOSTargetQT          QOSPriority          Local_Admin          Local_User          Wall_Time"
print "Weights\t\t\t\t     %16s %20s %20s %20s %20s %20s %20s %20s %20s %20s" % \
      ( Catalina.RESOURCE_WEIGHT,
      Catalina.EXPANSION_FACTOR_WEIGHT,
      Catalina.SYSTEM_QUEUE_TIME_WEIGHT,
      Catalina.SUBMIT_TIME_WEIGHT,
      Catalina.QOS_TARGET_EXPANSION_FACTOR_WEIGHT,
      Catalina.QOS_TARGET_QUEUE_WAIT_TIME_WEIGHT,
      Catalina.QOS_PRIORITY_WEIGHT,
      Catalina.LOCAL_ADMIN_WEIGHT,
      Catalina.LOCAL_USER_WEIGHT,
      Catalina.WALL_TIME_WEIGHT
      )

print "IDLE:"
for job_step in eligible_jobs :
    print_job_line(job_step)

print "NON-QUEUED:"

for job_step in ineligible_jobs :
    print_job_line(job_step)

Catalina.close_ro_db(db_handle)
